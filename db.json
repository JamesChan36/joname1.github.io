{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/_config.yml","hash":"07b66517a8f58f52a1e2a3ec984b738d332bdc01","modified":1476935734367},{"_id":"themes/yilia/README.md","hash":"dd311f8e8696bd89cf1790328d12b49d0e6b36da","modified":1475025005399},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1475025005424},{"_id":"source/_posts/bootstrap-grid.md","hash":"0e358acbdce0db9c59eda4f597bc18d867eafe02","modified":1475025005389},{"_id":"source/_posts/gulp-css.md","hash":"fbe0ae9820a3aab3f2f35691cf7890262fd77761","modified":1475025005390},{"_id":"source/_posts/gulp-img.md","hash":"8deb78af31a6fb6f5d574db07764723179b5b0c4","modified":1475025005391},{"_id":"source/_posts/gulp-js.md","hash":"5749728a6714d24b5907ee36af63a2548fff2786","modified":1475025005391},{"_id":"source/_posts/gulp-less.md","hash":"005b3078b2988a82d50d8c0a6304fe91ed1b4f2a","modified":1475025005392},{"_id":"source/_posts/gulp-sass.md","hash":"226e11f10e32f3553c5f011803bb4bd92566fed4","modified":1475025005393},{"_id":"source/_posts/hiwifi-ss.md","hash":"c8d56e164d4227a5c12e739892eb10a2a4ab9bf5","modified":1475025005394},{"_id":"source/_posts/no-f5.md","hash":"6cd76139a8bcc23555993414c3f083160fe3d9f8","modified":1476936456895},{"_id":"source/_posts/nodejs-1.md","hash":"f24734f4823c8f72501d1008a5dc7791e0a7eaac","modified":1476865430476},{"_id":"source/_posts/nodejs-2.md","hash":"efd05fb105d3b70ce7fd24afb8d8996aebcb4573","modified":1476866920110},{"_id":"source/_posts/nodejs-3.md","hash":"d8f620b4793a11bb887735b6cd0a6011e02729f5","modified":1476867983495},{"_id":"source/_posts/nodejs-hosts.md","hash":"a14b72888daeadec50c71a6335c9db1805868f0a","modified":1475025005395},{"_id":"source/_posts/sr-ss.md","hash":"564678f2997c4617c9033f58f5d5f20c01f3609b","modified":1475043519120},{"_id":"source/_posts/surge-ss.md","hash":"48b4d861a871feac4ab1d911cc59ab8e1d2c263e","modified":1475043777150},{"_id":"source/about/index.md","hash":"25a697208c153c225e1af79e9ea27a2e652404d2","modified":1476933572276},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1475025005401},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1475025005400},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1475025005402},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1475025005403},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1475025005403},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1475025005404},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1475025005404},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1475025005404},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1475025005415},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1475025005415},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1475025005415},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1475025005416},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475025005416},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475025005424},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1475025005424},{"_id":"themes/yilia/source/favicon.png","hash":"8a3261d7eecd88c88da0ddfd8cd8ae4cc90ecb72","modified":1476935394552},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"4d562c3dee40d075a9e057d6d05dfee20a3603fc","modified":1475025005405},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1475025005405},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1475025005406},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1475025005406},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"8cc38a9ca00681833a38832b6ba1079fb399dc6f","modified":1475025005406},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1475025005407},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"4ddbfcced6533d1b2a695c65e19ed8791f4634da","modified":1475025005407},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1475025005407},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"a9a0a29f2b885ca9a2561b4ab6ca1aaf8a48f4c3","modified":1475025005408},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"295e96fd94919bf03020a8d8a0c9ef4a1d459525","modified":1476934419158},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"eb443c035dd33e0fad1921af2e429076f4184dc4","modified":1475025005408},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1475025005425},{"_id":"themes/yilia/source/css/_variables.styl","hash":"b1e1116c01604fa87ae264a39c488ba69ca178cd","modified":1475025005431},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1475025005439},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475025005439},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475025005440},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475025005440},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475025005443},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475025005444},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475025005444},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1475025005449},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"e8c247b24ac736aef764717bd3531bc30d5ed62c","modified":1476935105124},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1475025005450},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1475025005452},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1475025005452},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1475025005453},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1475025005453},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1475025005453},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1475025005454},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1475025005454},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1475025005454},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1475025005455},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1475025005455},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1475025005455},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1475025005456},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1475025005456},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1475025005456},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1475025005456},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1475025005457},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1475025005457},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1475025005457},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1475025005458},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c3c0fe82d7685b24a469404a2c39977f3c687c29","modified":1476934405987},{"_id":"themes/yilia/source/js/main.js","hash":"ed6a65fafcc8c288e54d742182c8bc8ee998f0de","modified":1476933296797},{"_id":"themes/yilia/source/js/mobile.js","hash":"fdd8154d62ecf687e84030e31867f621745cef86","modified":1476934403023},{"_id":"themes/yilia/source/js/pc.js","hash":"421cffeb6250a5f14de34295f145285a75b65350","modified":1476934404790},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1475025005409},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1475025005409},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1475025005409},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"2f497e341c0dc8d2f936452613ce288915b7583b","modified":1476935955992},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1475025005410},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1475025005414},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1475025005414},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1475025005415},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1475025005431},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1475025005426},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1475025005431},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1475025005427},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1475025005427},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"ebddf6a98b9505d6db8e8377159e77d8f69471a3","modified":1475025005428},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1475025005427},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"712e809ddeaa8c6bf172286ccf81d005edbf1afd","modified":1475025005428},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1475025005428},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1475025005429},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1475025005429},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1475025005429},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1475025005430},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1475025005430},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1475025005430},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1475025005430},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1475025005435},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1475025005437},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1475025005438},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1475025005438},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475025005445},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1475025005445},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1475025005447},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1475025005448},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1475025005448},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1475025005448},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1475025005436},{"_id":"public/about/index.html","hash":"415c1d84f4b6b4be5c0562e5161928964c66fd00","modified":1476936468982},{"_id":"public/2016/no-f5/index.html","hash":"72d68943a1c609f75c86167c1a8ab2eff6c09fb3","modified":1476936468983},{"_id":"public/2016/nodejs-3/index.html","hash":"3f5db9033714ad1cae477f89f68631f026d2c643","modified":1476936468983},{"_id":"public/2016/gulp-sass/index.html","hash":"2026a65f1cbc4536923d1cee461d0de64e4642b5","modified":1476936468984},{"_id":"public/2016/gulp-less/index.html","hash":"7a63750050ed122f3026ca09cab869106b75c27f","modified":1476936468984},{"_id":"public/2016/gulp-css/index.html","hash":"8ea3f84941ad5f99eadacbfc9644c8faba45ec4a","modified":1476936468984},{"_id":"public/2016/gulp-img/index.html","hash":"d01ac68ab85afaefa16da686d2755ba724b09865","modified":1476936468984},{"_id":"public/2016/bootstrap-grid/index.html","hash":"46abdf38ea17b9881929515ba328bff887d36faa","modified":1476936468984},{"_id":"public/2016/surge-ss/index.html","hash":"17a50fade5cf2377a93f506bb4557eb6c87b374d","modified":1476936468984},{"_id":"public/2016/sr-ss/index.html","hash":"e3e5ad504d12691f4a42e7059244596341d2a660","modified":1476936468984},{"_id":"public/2016/hiwifi-ss/index.html","hash":"02c7101776ee1978f23256716829f5e02af3f268","modified":1476936468985},{"_id":"public/tags/Bootstrap/index.html","hash":"96213af1292cc160e7b038951ff345121a3c053c","modified":1476936468985},{"_id":"public/tags/grid/index.html","hash":"a7e8990cd761bfeaa046315650705a85a5a93d25","modified":1476936468985},{"_id":"public/tags/gulp/index.html","hash":"4e956d4567274378aea53ee51ab3db15c8eb1e1a","modified":1476936468985},{"_id":"public/tags/css/index.html","hash":"0b7dbb0663db8f9fec587fb1d6a1a33fc297c00f","modified":1476936468986},{"_id":"public/tags/js/index.html","hash":"c67004d3654e662656596e42ef042f172ea73395","modified":1476936468986},{"_id":"public/tags/less/index.html","hash":"b1eb1297755d3f38d30d20bb6237d1a5a7df19be","modified":1476936468986},{"_id":"public/tags/sass/index.html","hash":"07a47532cda7541296e3876e707c31e138fe6fcb","modified":1476936468986},{"_id":"public/tags/browser-sync/index.html","hash":"c4ac909803c0cf8339a55f15df004c10eae216e0","modified":1476936468987},{"_id":"public/tags/nodejs/index.html","hash":"d339724eebbc29a3dc634fda5ca506aaa808448c","modified":1476936468987},{"_id":"public/tags/node-js/index.html","hash":"688d0665a65b023c8ac97fdebdd67d7623053955","modified":1476936468987},{"_id":"public/tags/hiwifi/index.html","hash":"a71a3fa13c7af22bd634ffca1bb14fde51387b88","modified":1476936468987},{"_id":"public/tags/ss/index.html","hash":"c72d4039fc81ddec36b9ff9d92661da552dfb33d","modified":1476936468987},{"_id":"public/tags/Shadowsocks/index.html","hash":"00371560205851c4a12b314a05c36a7decbdd90a","modified":1476936468987},{"_id":"public/tags/fuck-gfw/index.html","hash":"8f7b9d3f178cb1b2d84d33016731b65505733e38","modified":1476936468987},{"_id":"public/tags/mysql/index.html","hash":"b15ab0d13066c49d17f2bb87d359f8754c4e4705","modified":1476936468987},{"_id":"public/tags/hosts/index.html","hash":"688d82379988e234389e19de217f0b76101e435a","modified":1476936468987},{"_id":"public/tags/surge/index.html","hash":"dbe8858e810237ed3725233423ed23aea28c3ae4","modified":1476936468987},{"_id":"public/archives/index.html","hash":"333dbfef0dd14a7fe5c59ec97e492d117756c5ad","modified":1476936468987},{"_id":"public/archives/page/2/index.html","hash":"6116c6fea0569d56a4e6f88ab8b9dde4bc80b8d3","modified":1476936468987},{"_id":"public/archives/2016/index.html","hash":"6da584ad7e53c17b780c370b68f21aa9d9a25a73","modified":1476936468987},{"_id":"public/archives/2016/page/2/index.html","hash":"6586cab3230d4561874b1c9a1ebc51c1b694eee9","modified":1476936468987},{"_id":"public/archives/2016/09/index.html","hash":"1ab376476a8df752f71d5c4ba81f75bc21f5d27e","modified":1476936468987},{"_id":"public/archives/2016/09/page/2/index.html","hash":"c2ab20bd94079dcff4198f5bdde49018df0fa116","modified":1476936468988},{"_id":"public/archives/2016/10/index.html","hash":"3ffc3a09daf68a11a03dec5ddd5074ea197a1456","modified":1476936468988},{"_id":"public/2016/nodejs-2/index.html","hash":"ecf8b8118086798bf23c2363bfe9098641dd5b67","modified":1476936468988},{"_id":"public/2016/nodejs-1/index.html","hash":"0277a1fb81da0d8a611de2edaaee1803fa96a425","modified":1476936468988},{"_id":"public/2016/gulp-js/index.html","hash":"e20f8671335f9c57a2b9163e53050511bae9c983","modified":1476936468988},{"_id":"public/2016/nodejs-hosts/index.html","hash":"b7a6b0d1e94d4d38359616ef200bb9042c6205a5","modified":1476936468988},{"_id":"public/index.html","hash":"9c03be216d837bbaaa46eddee19fc04e2add83f8","modified":1476936468988},{"_id":"public/page/2/index.html","hash":"8734a9d6784bea0cbecbb9dbf2ef766712a4ed19","modified":1476936468988},{"_id":"public/favicon.png","hash":"8a3261d7eecd88c88da0ddfd8cd8ae4cc90ecb72","modified":1476936469012},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476936469012},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476936469012},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476936469012},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476936469012},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476936469012},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476936469012},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1476936469012},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1476936469012},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1476936469012},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1476936469012},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1476936469012},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1476936469013},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1476936469013},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1476936469013},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1476936469013},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1476936469013},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1476936469013},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1476936469013},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1476936469013},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1476936469013},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1476936469013},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1476936469013},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1476936469013},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1476936469013},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1476936469014},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1476936469014},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1476936469014},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476936469014},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1476936469014},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1476936470189},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1476936470199},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1476936470200},{"_id":"public/js/jquery.lazyload.js","hash":"c3c0fe82d7685b24a469404a2c39977f3c687c29","modified":1476936470200},{"_id":"public/js/main.js","hash":"ed6a65fafcc8c288e54d742182c8bc8ee998f0de","modified":1476936470200},{"_id":"public/js/mobile.js","hash":"fdd8154d62ecf687e84030e31867f621745cef86","modified":1476936470200},{"_id":"public/js/pc.js","hash":"421cffeb6250a5f14de34295f145285a75b65350","modified":1476936470201},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1476936470201},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1476936470201},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1476936470201},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476936470201},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1476936470201},{"_id":"public/css/style.css","hash":"13a5d6e82a6e6b33e922bcb4ec811868a61eef68","modified":1476936470201},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1476936470201},{"_id":"public/fancybox/jquery.fancybox.js","hash":"e8c247b24ac736aef764717bd3531bc30d5ed62c","modified":1476936470203}],"Category":[],"Data":[],"Page":[{"title":"A Fake Front-End Developer [ Joname ]","date":"1989-06-03T15:05:15.000Z","_content":"## 关于我\n# 年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %>_<%\n#\t\n> Ability: HTML(5)、CSS(3)、JavaScript、jQuery、Git、Gulp、Grunt、LESS、Bootstrap.\n>> Interest: Node.js、Angular.js、Vue.js、React.js.","source":"about/index.md","raw":"---\ntitle: A Fake Front-End Developer [ Joname ]\ndate: 1989-06-04 00:05:15\n---\n## 关于我\n# 年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %>_<%\n#\t\n> Ability: HTML(5)、CSS(3)、JavaScript、jQuery、Git、Gulp、Grunt、LESS、Bootstrap.\n>> Interest: Node.js、Angular.js、Vue.js、React.js.","updated":"2016-10-20T03:19:32.276Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciuhtu7ux00010wtuoofowiee","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h1 id=\"年轻无为-卖马为生-喜欢钻研新技术-就是缺个女朋友-gt-lt\"><a href=\"#年轻无为-卖马为生-喜欢钻研新技术-就是缺个女朋友-gt-lt\" class=\"headerlink\" title=\"年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %&gt;_&lt;%\"></a>年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %&gt;_&lt;%</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><blockquote>\n<p>Ability: HTML(5)、CSS(3)、JavaScript、jQuery、Git、Gulp、Grunt、LESS、Bootstrap.</p>\n<blockquote>\n<p>Interest: Node.js、Angular.js、Vue.js、React.js.</p>\n</blockquote>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h1 id=\"年轻无为-卖马为生-喜欢钻研新技术-就是缺个女朋友-gt-lt\"><a href=\"#年轻无为-卖马为生-喜欢钻研新技术-就是缺个女朋友-gt-lt\" class=\"headerlink\" title=\"年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %&gt;_&lt;%\"></a>年轻无为, 卖马为生; 喜欢钻研新技术, 就是缺个女朋友. %&gt;_&lt;%</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><blockquote>\n<p>Ability: HTML(5)、CSS(3)、JavaScript、jQuery、Git、Gulp、Grunt、LESS、Bootstrap.</p>\n<blockquote>\n<p>Interest: Node.js、Angular.js、Vue.js、React.js.</p>\n</blockquote>\n</blockquote>\n"}],"Post":[{"title":"Bootstrap详解：栅格系统","date":"2016-09-03T08:36:29.000Z","_content":"Bootstrap3使用了四种栅格选项来形成栅格系统，这四种选项在官网上的介绍很多人不理解，这里跟大家详解一下四种栅格选项之间的区别，其实区别只有一条就是适合不同尺寸的屏幕设备。我们看class前缀这一项，我们姑且以前缀命名这四种栅格选项，他们分别是col-xs ,col-sm,col-md,col-lg，我们懂英文的就知道，lg是large的缩写，md是mid的缩写，sm是small的缩写，xs是extra small的缩写。这样命名就体现了这几种class适应的屏幕宽度不同。下面我们分别介绍这几种class的特点。 \n<!-- more -->\n## 1、col-xs类\n用法是<code>&lt;div class=\"col-xs-*\"&gt;</code>。它星号代表1~12的数字。我们知道栅格系统总共有12列，我们在这里使用数字几就代表着该div占用几列的宽度。假如我们在给超级小屏幕开发界面，那么我们使用该类，该类没有任何行为，不管屏幕小到多少，都不会改变div的布局。\n\n## 2、col-sm类\n用法是<code>&lt;div class=\"col-sm-*\"&gt;</code>。星号的意义同上，但是该类适合屏幕宽度为`750px`的设备，如果在屏幕宽度小于750px的设别上，该div就会水平堆叠。\n这是在`大于750px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于750px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n\n## 3、col-md类\n用法是<code>&lt;div class=\"col-md-*\"&gt;</code>。该类适合`970px`以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于`970px`的设备查看网页，div就会垂直堆叠。\n这是在`大于970px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于970px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n\n## 4、col-lg类\n用法是<code>&lt;div class=\"col-lg-*\"&gt;</code>。该类适合`1170px`以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于`1170px`的设备查看网页，div就会垂直堆叠。\n这是在`大于1170px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于1170px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n如何组合使用这几个类?\n我们使用<code>&lt;div class=\"col-sm-10 col-md-8\"&gt;</code>这样的方式来表示：在中等屏幕设备上该div占用8列的宽度；在小屏幕上该div占用10列的宽度。","source":"_posts/bootstrap-grid.md","raw":"---\ntitle: Bootstrap详解：栅格系统\ndate: 2016-09-03 16:36:29\ntags: [Bootstrap,grid]\n---\nBootstrap3使用了四种栅格选项来形成栅格系统，这四种选项在官网上的介绍很多人不理解，这里跟大家详解一下四种栅格选项之间的区别，其实区别只有一条就是适合不同尺寸的屏幕设备。我们看class前缀这一项，我们姑且以前缀命名这四种栅格选项，他们分别是col-xs ,col-sm,col-md,col-lg，我们懂英文的就知道，lg是large的缩写，md是mid的缩写，sm是small的缩写，xs是extra small的缩写。这样命名就体现了这几种class适应的屏幕宽度不同。下面我们分别介绍这几种class的特点。 \n<!-- more -->\n## 1、col-xs类\n用法是<code>&lt;div class=\"col-xs-*\"&gt;</code>。它星号代表1~12的数字。我们知道栅格系统总共有12列，我们在这里使用数字几就代表着该div占用几列的宽度。假如我们在给超级小屏幕开发界面，那么我们使用该类，该类没有任何行为，不管屏幕小到多少，都不会改变div的布局。\n\n## 2、col-sm类\n用法是<code>&lt;div class=\"col-sm-*\"&gt;</code>。星号的意义同上，但是该类适合屏幕宽度为`750px`的设备，如果在屏幕宽度小于750px的设别上，该div就会水平堆叠。\n这是在`大于750px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于750px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n\n## 3、col-md类\n用法是<code>&lt;div class=\"col-md-*\"&gt;</code>。该类适合`970px`以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于`970px`的设备查看网页，div就会垂直堆叠。\n这是在`大于970px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于970px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n\n## 4、col-lg类\n用法是<code>&lt;div class=\"col-lg-*\"&gt;</code>。该类适合`1170px`以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于`1170px`的设备查看网页，div就会垂直堆叠。\n这是在`大于1170px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg)\n这是在`小于1170px`屏幕上的样式：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg)\n\n如何组合使用这几个类?\n我们使用<code>&lt;div class=\"col-sm-10 col-md-8\"&gt;</code>这样的方式来表示：在中等屏幕设备上该div占用8列的宽度；在小屏幕上该div占用10列的宽度。","slug":"bootstrap-grid","published":1,"updated":"2016-09-28T01:10:05.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7us00000wtusk755nbp","content":"<p>Bootstrap3使用了四种栅格选项来形成栅格系统，这四种选项在官网上的介绍很多人不理解，这里跟大家详解一下四种栅格选项之间的区别，其实区别只有一条就是适合不同尺寸的屏幕设备。我们看class前缀这一项，我们姑且以前缀命名这四种栅格选项，他们分别是col-xs ,col-sm,col-md,col-lg，我们懂英文的就知道，lg是large的缩写，md是mid的缩写，sm是small的缩写，xs是extra small的缩写。这样命名就体现了这几种class适应的屏幕宽度不同。下面我们分别介绍这几种class的特点。<br><a id=\"more\"></a></p>\n<h2 id=\"1、col-xs类\"><a href=\"#1、col-xs类\" class=\"headerlink\" title=\"1、col-xs类\"></a>1、col-xs类</h2><p>用法是<code>&lt;div class=”col-xs-*”&gt;</code>。它星号代表1~12的数字。我们知道栅格系统总共有12列，我们在这里使用数字几就代表着该div占用几列的宽度。假如我们在给超级小屏幕开发界面，那么我们使用该类，该类没有任何行为，不管屏幕小到多少，都不会改变div的布局。</p>\n<h2 id=\"2、col-sm类\"><a href=\"#2、col-sm类\" class=\"headerlink\" title=\"2、col-sm类\"></a>2、col-sm类</h2><p>用法是<code>&lt;div class=”col-sm-*”&gt;</code>。星号的意义同上，但是该类适合屏幕宽度为<code>750px</code>的设备，如果在屏幕宽度小于750px的设别上，该div就会水平堆叠。<br>这是在<code>大于750px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于750px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<h2 id=\"3、col-md类\"><a href=\"#3、col-md类\" class=\"headerlink\" title=\"3、col-md类\"></a>3、col-md类</h2><p>用法是<code>&lt;div class=”col-md-*”&gt;</code>。该类适合<code>970px</code>以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于<code>970px</code>的设备查看网页，div就会垂直堆叠。<br>这是在<code>大于970px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于970px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<h2 id=\"4、col-lg类\"><a href=\"#4、col-lg类\" class=\"headerlink\" title=\"4、col-lg类\"></a>4、col-lg类</h2><p>用法是<code>&lt;div class=”col-lg-*”&gt;</code>。该类适合<code>1170px</code>以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于<code>1170px</code>的设备查看网页，div就会垂直堆叠。<br>这是在<code>大于1170px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于1170px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<p>如何组合使用这几个类?<br>我们使用<code>&lt;div class=”col-sm-10 col-md-8”&gt;</code>这样的方式来表示：在中等屏幕设备上该div占用8列的宽度；在小屏幕上该div占用10列的宽度。</p>\n","excerpt":"<p>Bootstrap3使用了四种栅格选项来形成栅格系统，这四种选项在官网上的介绍很多人不理解，这里跟大家详解一下四种栅格选项之间的区别，其实区别只有一条就是适合不同尺寸的屏幕设备。我们看class前缀这一项，我们姑且以前缀命名这四种栅格选项，他们分别是col-xs ,col-sm,col-md,col-lg，我们懂英文的就知道，lg是large的缩写，md是mid的缩写，sm是small的缩写，xs是extra small的缩写。这样命名就体现了这几种class适应的屏幕宽度不同。下面我们分别介绍这几种class的特点。<br>","more":"</p>\n<h2 id=\"1、col-xs类\"><a href=\"#1、col-xs类\" class=\"headerlink\" title=\"1、col-xs类\"></a>1、col-xs类</h2><p>用法是<code>&lt;div class=”col-xs-*”&gt;</code>。它星号代表1~12的数字。我们知道栅格系统总共有12列，我们在这里使用数字几就代表着该div占用几列的宽度。假如我们在给超级小屏幕开发界面，那么我们使用该类，该类没有任何行为，不管屏幕小到多少，都不会改变div的布局。</p>\n<h2 id=\"2、col-sm类\"><a href=\"#2、col-sm类\" class=\"headerlink\" title=\"2、col-sm类\"></a>2、col-sm类</h2><p>用法是<code>&lt;div class=”col-sm-*”&gt;</code>。星号的意义同上，但是该类适合屏幕宽度为<code>750px</code>的设备，如果在屏幕宽度小于750px的设别上，该div就会水平堆叠。<br>这是在<code>大于750px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于750px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<h2 id=\"3、col-md类\"><a href=\"#3、col-md类\" class=\"headerlink\" title=\"3、col-md类\"></a>3、col-md类</h2><p>用法是<code>&lt;div class=”col-md-*”&gt;</code>。该类适合<code>970px</code>以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于<code>970px</code>的设备查看网页，div就会垂直堆叠。<br>这是在<code>大于970px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于970px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<h2 id=\"4、col-lg类\"><a href=\"#4、col-lg类\" class=\"headerlink\" title=\"4、col-lg类\"></a>4、col-lg类</h2><p>用法是<code>&lt;div class=”col-lg-*”&gt;</code>。该类适合<code>1170px</code>以上屏幕。通上面讲的道理一样，假如使用屏幕尺寸小于<code>1170px</code>的设备查看网页，div就会垂直堆叠。<br>这是在<code>大于1170px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgo0fcs11eg114i150n8mtgdga.jpg\" alt=\"\"><br>这是在<code>小于1170px</code>屏幕上的样式：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahgnv4oa1o2ni62183v8l61npea.jpg\" alt=\"\"></p>\n<p>如何组合使用这几个类?<br>我们使用<code>&lt;div class=”col-sm-10 col-md-8”&gt;</code>这样的方式来表示：在中等屏幕设备上该div占用8列的宽度；在小屏幕上该div占用10列的宽度。</p>"},{"title":"使用 gulp 压缩图片","date":"2016-09-05T11:53:54.000Z","_content":"----------\n\n压缩 图片文件可降低文件大小，提高图片加载速度。\n\n找到规律转换为 gulp 代码\n\n<!-- more -->\n---\n找到 `images/` 目录下的所有文件，压缩它们，将压缩后的文件存放在 `dist/images/` 目录下。\n\ngulp 代码\n---------\n\n**一、安装 gulp-imagemin** 模块\n\n提示：你需要使用命令行的 `cd` 切换至对应目录再进行安装操作和 gulp 启动操作。\n\n在命令行输入\n\n```\nnpm install gulp-imagemin\n```\n\n安装成功后你会看到如下信息：(安装时间可能会比较长)\n\n```\ngulp-imagemin@2.2.1 node_modules/gulp-imagemin\n├── object-assign@2.0.0\n├── pretty-bytes@1.0.3 (get-stdin@4.0.1)\n├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)\n├── through2-concurrent@0.3.1 (through2@0.6.3)\n├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)\n└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)\n```\n\n**二、创建 `gulpfile.js` 文件编写代码**\n\n在对应目录创建 `gulpfile.js` 文件并写入如下内容：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('images/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n    // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 images 任务\n    gulp.watch('images/*.*)', ['images'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 images 任务和 auto 任务\ngulp.task('default', ['images', 'auto'])\n```\n\n你可以访问 [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) 以查看更多用法。\n\n------\n\n**三、在 `images/` 目录下存放图片**\n\n在 `gulpfile.js` 对应目录创建 `images` 文件夹，并在 `images/` 目录下存放图片。\n\n--------\n\n**四、运行 gulp 查看效果**\n\n在命令行输入 `gulp` +回车\n\n你将看到命令行出现如下提示\n\n```\ngulp\n[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js\n[18:10:42] Starting 'images'...\n[18:10:42] Finished 'images' after 5.72 ms\n[18:10:42] Starting 'auto'...\n[18:10:42] Finished 'auto' after 6.39 ms\n[18:10:42] Starting 'default'...\n[18:10:42] Finished 'default' after 5.91 μs\n[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)\n```","source":"_posts/gulp-img.md","raw":"---\ntitle: 使用 gulp 压缩图片\ndate: 2016-09-05 19:53:54\ntags: [gulp]\n---\n----------\n\n压缩 图片文件可降低文件大小，提高图片加载速度。\n\n找到规律转换为 gulp 代码\n\n<!-- more -->\n---\n找到 `images/` 目录下的所有文件，压缩它们，将压缩后的文件存放在 `dist/images/` 目录下。\n\ngulp 代码\n---------\n\n**一、安装 gulp-imagemin** 模块\n\n提示：你需要使用命令行的 `cd` 切换至对应目录再进行安装操作和 gulp 启动操作。\n\n在命令行输入\n\n```\nnpm install gulp-imagemin\n```\n\n安装成功后你会看到如下信息：(安装时间可能会比较长)\n\n```\ngulp-imagemin@2.2.1 node_modules/gulp-imagemin\n├── object-assign@2.0.0\n├── pretty-bytes@1.0.3 (get-stdin@4.0.1)\n├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)\n├── through2-concurrent@0.3.1 (through2@0.6.3)\n├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)\n└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)\n```\n\n**二、创建 `gulpfile.js` 文件编写代码**\n\n在对应目录创建 `gulpfile.js` 文件并写入如下内容：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('images/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n    // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 images 任务\n    gulp.watch('images/*.*)', ['images'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 images 任务和 auto 任务\ngulp.task('default', ['images', 'auto'])\n```\n\n你可以访问 [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) 以查看更多用法。\n\n------\n\n**三、在 `images/` 目录下存放图片**\n\n在 `gulpfile.js` 对应目录创建 `images` 文件夹，并在 `images/` 目录下存放图片。\n\n--------\n\n**四、运行 gulp 查看效果**\n\n在命令行输入 `gulp` +回车\n\n你将看到命令行出现如下提示\n\n```\ngulp\n[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js\n[18:10:42] Starting 'images'...\n[18:10:42] Finished 'images' after 5.72 ms\n[18:10:42] Starting 'auto'...\n[18:10:42] Finished 'auto' after 6.39 ms\n[18:10:42] Starting 'default'...\n[18:10:42] Finished 'default' after 5.91 μs\n[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)\n```","slug":"gulp-img","published":1,"updated":"2016-09-28T01:10:05.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7uz00020wtungy84mco","content":"<hr>\n<p>压缩 图片文件可降低文件大小，提高图片加载速度。</p>\n<p>找到规律转换为 gulp 代码</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><p>找到 <code>images/</code> 目录下的所有文件，压缩它们，将压缩后的文件存放在 <code>dist/images/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p><strong>一、安装 gulp-imagemin</strong> 模块</p>\n<p>提示：你需要使用命令行的 <code>cd</code> 切换至对应目录再进行安装操作和 gulp 启动操作。</p>\n<p>在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-imagemin</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-imagemin@2.2.1 node_modules/gulp-imagemin</div><div class=\"line\">├── object-assign@2.0.0</div><div class=\"line\">├── pretty-bytes@1.0.3 (get-stdin@4.0.1)</div><div class=\"line\">├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)</div><div class=\"line\">├── through2-concurrent@0.3.1 (through2@0.6.3)</div><div class=\"line\">├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)</div><div class=\"line\">└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)</div></pre></td></tr></table></figure>\n<p><strong>二、创建 <code>gulpfile.js</code> 文件编写代码</strong></p>\n<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 gulp-imagemin 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩图片任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到图片</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'images/*.*'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩图片</span></div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">    <span class=\"comment\">// 3. 另存图片</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'images/*.*)'</span>, [<span class=\"string\">'images'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 images 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'images'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/sindresorhus/gulp-imagemin\" target=\"_blank\" rel=\"external\">gulp-imagemin</a> 以查看更多用法。</p>\n<hr>\n<p><strong>三、在 <code>images/</code> 目录下存放图片</strong></p>\n<p>在 <code>gulpfile.js</code> 对应目录创建 <code>images</code> 文件夹，并在 <code>images/</code> 目录下存放图片。</p>\n<hr>\n<p><strong>四、运行 gulp 查看效果</strong></p>\n<p>在命令行输入 <code>gulp</code> +回车</p>\n<p>你将看到命令行出现如下提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp</div><div class=\"line\">[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js</div><div class=\"line\">[18:10:42] Starting &apos;images&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;images&apos; after 5.72 ms</div><div class=\"line\">[18:10:42] Starting &apos;auto&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;auto&apos; after 6.39 ms</div><div class=\"line\">[18:10:42] Starting &apos;default&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;default&apos; after 5.91 μs</div><div class=\"line\">[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)</div></pre></td></tr></table></figure>","excerpt":"<hr>\n<p>压缩 图片文件可降低文件大小，提高图片加载速度。</p>\n<p>找到规律转换为 gulp 代码</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><p>找到 <code>images/</code> 目录下的所有文件，压缩它们，将压缩后的文件存放在 <code>dist/images/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p><strong>一、安装 gulp-imagemin</strong> 模块</p>\n<p>提示：你需要使用命令行的 <code>cd</code> 切换至对应目录再进行安装操作和 gulp 启动操作。</p>\n<p>在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-imagemin</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-imagemin@2.2.1 node_modules/gulp-imagemin</div><div class=\"line\">├── object-assign@2.0.0</div><div class=\"line\">├── pretty-bytes@1.0.3 (get-stdin@4.0.1)</div><div class=\"line\">├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)</div><div class=\"line\">├── through2-concurrent@0.3.1 (through2@0.6.3)</div><div class=\"line\">├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)</div><div class=\"line\">└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)</div></pre></td></tr></table></figure>\n<p><strong>二、创建 <code>gulpfile.js</code> 文件编写代码</strong></p>\n<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 gulp-imagemin 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩图片任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到图片</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'images/*.*'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩图片</span></div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">    <span class=\"comment\">// 3. 另存图片</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'images/*.*)'</span>, [<span class=\"string\">'images'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 images 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'images'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/sindresorhus/gulp-imagemin\">gulp-imagemin</a> 以查看更多用法。</p>\n<hr>\n<p><strong>三、在 <code>images/</code> 目录下存放图片</strong></p>\n<p>在 <code>gulpfile.js</code> 对应目录创建 <code>images</code> 文件夹，并在 <code>images/</code> 目录下存放图片。</p>\n<hr>\n<p><strong>四、运行 gulp 查看效果</strong></p>\n<p>在命令行输入 <code>gulp</code> +回车</p>\n<p>你将看到命令行出现如下提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp</div><div class=\"line\">[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js</div><div class=\"line\">[18:10:42] Starting &apos;images&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;images&apos; after 5.72 ms</div><div class=\"line\">[18:10:42] Starting &apos;auto&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;auto&apos; after 6.39 ms</div><div class=\"line\">[18:10:42] Starting &apos;default&apos;...</div><div class=\"line\">[18:10:42] Finished &apos;default&apos; after 5.91 μs</div><div class=\"line\">[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)</div></pre></td></tr></table></figure>"},{"title":"使用 gulp 压缩 CSS","date":"2016-09-07T11:54:54.000Z","_content":"----------\n\n\n压缩 css 代码可降低 css 文件大小，提高页面打开速度。\n\n我们接着将规律转换为 gulp 代码\n\n<!-- more -->\n---\n找到 `css/` 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 `dist/css/` 目录下。\n\ngulp 代码\n---------\n\n当熟悉`使用 gulp 压缩 JS`的方法后，配置压缩 CSS 的 gulp 代码就变得很轻松。\n\n\n**一、安装 gulp-minify-css** 模块\n\n提示：你需要使用命令行的 `cd` 切换到对应目录后进行安装操作。\n\n在命令行输入\n\n```\nnpm install gulp-minify-css\n```\n\n安装成功后你会看到如下信息：(安装时间可能会比较长)\n\n```\ngulp-minify-css@1.0.0 node_modules/gulp-minify-css\n├── object-assign@2.0.0\n├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)\n├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)\n├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)\n├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)\n└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)\n```\n\n**二、参照`使用 gulp 压缩 JS`创建 `gulpfile.js` 文件编写代码**\n\n在对应目录创建 `gulpfile.js` 文件并写入如下内容：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n\n// 获取 minify-css 模块（用于压缩 CSS）\nvar minifyCSS = require('gulp-minify-css')\n\n// 压缩 css 文件\n// 在命令行使用 gulp css 启动此任务\ngulp.task('css', function () {\n    // 1. 找到文件\n    gulp.src('css/*.css')\n    // 2. 压缩文件\n        .pipe(minifyCSS())\n    // 3. 另存为压缩文件\n        .pipe(gulp.dest('dist/css'))\n})\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 css 任务\n    gulp.watch('css/*.css', ['css'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 css 任务和 auto 任务\ngulp.task('default', ['css', 'auto'])\n```\n\n你可以访问 [gulp-minify-css](https://github.com/jonathanepollack/gulp-minify-css) 以查看更多用法。\n\n------\n\n**三、创建 css 文件**\n\n在 `gulpfile.js` 对应目录创建 `css` 文件夹，并在 `css/` 目录下创建 `a.css` 文件。\n\n```css\n/* a.css */\nbody a{\n    color:pink;\n}\n```\n\n--------\n\n**四、运行 gulp 查看效果**\n\n在命令行输入 `gulp` +回车\n\n你将看到命令行出现如下提示\n\n```\ngulp\n[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js\n[17:01:19] Starting 'css'...\n[17:01:19] Finished 'css' after 6.21 ms\n[17:01:19] Starting 'auto'...\n[17:01:19] Finished 'auto' after 5.42 ms\n[17:01:19] Starting 'default'...\n[17:01:19] Finished 'default' after 5.71 μs\n```\n\ngulp 会创建 `dist/css` 目录，并创建 `a.css` 文件，此文件存放压缩后的 css 代码。","source":"_posts/gulp-css.md","raw":"---\ntitle: 使用 gulp 压缩 CSS\ndate: 2016-09-07 19:54:54\ntags: [gulp,css]\n---\n----------\n\n\n压缩 css 代码可降低 css 文件大小，提高页面打开速度。\n\n我们接着将规律转换为 gulp 代码\n\n<!-- more -->\n---\n找到 `css/` 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 `dist/css/` 目录下。\n\ngulp 代码\n---------\n\n当熟悉`使用 gulp 压缩 JS`的方法后，配置压缩 CSS 的 gulp 代码就变得很轻松。\n\n\n**一、安装 gulp-minify-css** 模块\n\n提示：你需要使用命令行的 `cd` 切换到对应目录后进行安装操作。\n\n在命令行输入\n\n```\nnpm install gulp-minify-css\n```\n\n安装成功后你会看到如下信息：(安装时间可能会比较长)\n\n```\ngulp-minify-css@1.0.0 node_modules/gulp-minify-css\n├── object-assign@2.0.0\n├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)\n├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)\n├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)\n├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)\n└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)\n```\n\n**二、参照`使用 gulp 压缩 JS`创建 `gulpfile.js` 文件编写代码**\n\n在对应目录创建 `gulpfile.js` 文件并写入如下内容：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n\n// 获取 minify-css 模块（用于压缩 CSS）\nvar minifyCSS = require('gulp-minify-css')\n\n// 压缩 css 文件\n// 在命令行使用 gulp css 启动此任务\ngulp.task('css', function () {\n    // 1. 找到文件\n    gulp.src('css/*.css')\n    // 2. 压缩文件\n        .pipe(minifyCSS())\n    // 3. 另存为压缩文件\n        .pipe(gulp.dest('dist/css'))\n})\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 css 任务\n    gulp.watch('css/*.css', ['css'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 css 任务和 auto 任务\ngulp.task('default', ['css', 'auto'])\n```\n\n你可以访问 [gulp-minify-css](https://github.com/jonathanepollack/gulp-minify-css) 以查看更多用法。\n\n------\n\n**三、创建 css 文件**\n\n在 `gulpfile.js` 对应目录创建 `css` 文件夹，并在 `css/` 目录下创建 `a.css` 文件。\n\n```css\n/* a.css */\nbody a{\n    color:pink;\n}\n```\n\n--------\n\n**四、运行 gulp 查看效果**\n\n在命令行输入 `gulp` +回车\n\n你将看到命令行出现如下提示\n\n```\ngulp\n[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js\n[17:01:19] Starting 'css'...\n[17:01:19] Finished 'css' after 6.21 ms\n[17:01:19] Starting 'auto'...\n[17:01:19] Finished 'auto' after 5.42 ms\n[17:01:19] Starting 'default'...\n[17:01:19] Finished 'default' after 5.71 μs\n```\n\ngulp 会创建 `dist/css` 目录，并创建 `a.css` 文件，此文件存放压缩后的 css 代码。","slug":"gulp-css","published":1,"updated":"2016-09-28T01:10:05.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7v700040wtur9iuz15v","content":"<hr>\n<p>压缩 css 代码可降低 css 文件大小，提高页面打开速度。</p>\n<p>我们接着将规律转换为 gulp 代码</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><p>找到 <code>css/</code> 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 <code>dist/css/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p>当熟悉<code>使用 gulp 压缩 JS</code>的方法后，配置压缩 CSS 的 gulp 代码就变得很轻松。</p>\n<p><strong>一、安装 gulp-minify-css</strong> 模块</p>\n<p>提示：你需要使用命令行的 <code>cd</code> 切换到对应目录后进行安装操作。</p>\n<p>在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-minify-css</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-minify-css@1.0.0 node_modules/gulp-minify-css</div><div class=\"line\">├── object-assign@2.0.0</div><div class=\"line\">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class=\"line\">├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)</div><div class=\"line\">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class=\"line\">├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)</div><div class=\"line\">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)</div></pre></td></tr></table></figure>\n<p><strong>二、参照<code>使用 gulp 压缩 JS</code>创建 <code>gulpfile.js</code> 文件编写代码</strong></p>\n<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> minifyCSS = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 css 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp css 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'css/*.css'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(minifyCSS())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存为压缩文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 css 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'css/*.css'</span>, [<span class=\"string\">'css'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 css 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'css'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/jonathanepollack/gulp-minify-css\" target=\"_blank\" rel=\"external\">gulp-minify-css</a> 以查看更多用法。</p>\n<hr>\n<p><strong>三、创建 css 文件</strong></p>\n<p>在 <code>gulpfile.js</code> 对应目录创建 <code>css</code> 文件夹，并在 <code>css/</code> 目录下创建 <code>a.css</code> 文件。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* a.css */</span></div><div class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>:pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>四、运行 gulp 查看效果</strong></p>\n<p>在命令行输入 <code>gulp</code> +回车</p>\n<p>你将看到命令行出现如下提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp</div><div class=\"line\">[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js</div><div class=\"line\">[17:01:19] Starting &apos;css&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;css&apos; after 6.21 ms</div><div class=\"line\">[17:01:19] Starting &apos;auto&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;auto&apos; after 5.42 ms</div><div class=\"line\">[17:01:19] Starting &apos;default&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;default&apos; after 5.71 μs</div></pre></td></tr></table></figure>\n<p>gulp 会创建 <code>dist/css</code> 目录，并创建 <code>a.css</code> 文件，此文件存放压缩后的 css 代码。</p>\n","excerpt":"<hr>\n<p>压缩 css 代码可降低 css 文件大小，提高页面打开速度。</p>\n<p>我们接着将规律转换为 gulp 代码</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><p>找到 <code>css/</code> 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 <code>dist/css/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p>当熟悉<code>使用 gulp 压缩 JS</code>的方法后，配置压缩 CSS 的 gulp 代码就变得很轻松。</p>\n<p><strong>一、安装 gulp-minify-css</strong> 模块</p>\n<p>提示：你需要使用命令行的 <code>cd</code> 切换到对应目录后进行安装操作。</p>\n<p>在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-minify-css</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-minify-css@1.0.0 node_modules/gulp-minify-css</div><div class=\"line\">├── object-assign@2.0.0</div><div class=\"line\">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class=\"line\">├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)</div><div class=\"line\">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class=\"line\">├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)</div><div class=\"line\">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)</div></pre></td></tr></table></figure>\n<p><strong>二、参照<code>使用 gulp 压缩 JS</code>创建 <code>gulpfile.js</code> 文件编写代码</strong></p>\n<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> minifyCSS = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 css 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp css 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'css/*.css'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(minifyCSS())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存为压缩文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 css 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'css/*.css'</span>, [<span class=\"string\">'css'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 css 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'css'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/jonathanepollack/gulp-minify-css\">gulp-minify-css</a> 以查看更多用法。</p>\n<hr>\n<p><strong>三、创建 css 文件</strong></p>\n<p>在 <code>gulpfile.js</code> 对应目录创建 <code>css</code> 文件夹，并在 <code>css/</code> 目录下创建 <code>a.css</code> 文件。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* a.css */</span></div><div class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>:pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>四、运行 gulp 查看效果</strong></p>\n<p>在命令行输入 <code>gulp</code> +回车</p>\n<p>你将看到命令行出现如下提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp</div><div class=\"line\">[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js</div><div class=\"line\">[17:01:19] Starting &apos;css&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;css&apos; after 6.21 ms</div><div class=\"line\">[17:01:19] Starting &apos;auto&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;auto&apos; after 5.42 ms</div><div class=\"line\">[17:01:19] Starting &apos;default&apos;...</div><div class=\"line\">[17:01:19] Finished &apos;default&apos; after 5.71 μs</div></pre></td></tr></table></figure>\n<p>gulp 会创建 <code>dist/css</code> 目录，并创建 <code>a.css</code> 文件，此文件存放压缩后的 css 代码。</p>"},{"title":"使用 gulp 压缩 JS","date":"2016-09-06T11:51:50.000Z","_content":"----------\n\n压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。\n\n所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。\n\n<!-- more -->\n---\n\n找到 `js/` 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 `dist/js/` 目录下。\n\ngulp 代码\n----\n\n**建议**：你可以只阅读下面的代码与注释或同时阅读代码解释\n\ngulp 的所有配置代码都写在 `gulpfile.js` 文件。\n\n**一、新建一个 `gulpfile.js` 文件**\n```\nchapter2\n└── gulpfile.js\n```\n\n---------\n\n**二、在 `gulpfile.js` 中编写代码**\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n```\n\n> `require()` 是 node （CommonJS）中获取模块的语法。\n> \n> 在 gulp 中你只需要理解 `require()` 可以获取模块。\n\n---------\n\n**三、获取 `gulp-uglify` 组件**\n\n```js\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\n```\n\n---------\n\n**四、创建压缩任务**\n\n```js\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n```\n\n- `gulp.task(name, fn)` - 定义任务，第一个参数是任务名，第二个参数是任务内容。\n- `gulp.src(path)` - 选择文件，传入参数是文件路径。\n- `gulp.dest(path)` - 输出文件\n- `gulp.pipe()` - 管道，你可以暂时将 pipe 理解为将操作加入执行队列\n\n参考：[gulp API文档](http://www.gulpjs.com.cn/docs/api/)\n\n---------\n\n**五、跳转至 `gulpfile.js` 所在目录**\n\n打开命令行使用 `cd` 命令跳转至 `gulpfile.js` 文件所在目录。\n\n例如我的 `gulpfile.js` 文件保存在 `C:\\gulp-book\\demo\\chapter2\\gulpfile.js`。\n\n那么就需要在命令行输入\n```\ncd C:\\gulp-book\\demo\\chapter2\n```\n\n> Mac 用户可使用 `cd Documents/gulp-book/demo/chapter2/` 跳转\n\n---------\n\n**六、使用命令行运行 script 任务**\n\n在控制台输入 `gulp 任务名` 可运行任务，此处我们输入 `gulp script` 回车。\n\n注意：输入 `gulp script` 后命令行将会提示错误信息\n```\n// 在命令行输入\ngulp script\n\nError: Cannot find module 'gulp-uglify'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n```\n\n`Cannot find module 'gulp-uglify'` 没有找到 `gulp-uglify` 模块。\n\n----------\n\n**七、安装 `gulp-uglify` 模块**\n\n因为我们并没有安装 `gulp-uglify` 模块到本地，所以找不到此模块。\n\n使用 npm 安装 `gulp-uglify` 到本地\n\n```\nnpm install gulp-uglify\n```\n\n安装成功后你会看到如下信息：\n```\ngulp-uglify@1.1.0 node_modules/gulp-uglify\n├── deepmerge@0.2.7\n├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)\n├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)\n├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)\n└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)\nchapter2 $\n```\n\n在你的文件夹中会新增一个 `node_modules` 文件夹，这里面存放着 npm 安装的模块。\n\n目录结构：\n```\n├── gulpfile.js\n└── node_modules\n    └── gulp-uglify\n```\n\n接着输入 `gulp script` 执行任务\n\n```\ngulp script\n[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js\n[13:34:57] Starting 'script'...\n[13:34:57] Finished 'script' after 6.13 ms\n```\n\n------------\n\n**八、编写 js 文件**\n\n我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 `.js` 后缀文件。\n\n创建 `a.js` 文件，并编写如下内容\n\n```\n// a.js\nfunction demo (msg) {\n    alert('--------\\r\\n' + msg + '\\r\\n--------')\n}\n\ndemo('Hi')\n```\n\n目录结构：\n```\n├── gulpfile.js\n├──  js\n│   └── a.js\n└── node_modules\n    └── gulp-uglify\n```\n\n接着在命令行输入 `gulp script` 执行任务\n\ngulp 会在命令行当前目录下创建 `dist/js/` 文件夹，并创建压缩后的 `a.js` 文件。\n\n目录结构：\n```\n├── gulpfile.js\n├──  js\n│   └── a.js\n├──  dist\n│   └── js\n│       └── a.js\n└── node_modules\n    └── gulp-uglify\n```\n\n[dist/js/a.js](https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js)\n```js\nfunction demo(n){alert(\"--------\\r\\n\"+n+\"\\r\\n--------\")}demo(\"Hi\");\n```\n\n---------\n\n**九、检测代码修改自动执行任务**\n\n`js/a.js`一旦有修改 就必须重新在命令行输入 `gulp script` ，这很麻烦。\n\n可以使用 `gulp.watch(src, fn)` 检测指定目录下文件的修改后执行任务。\n\n在 `gulpfile.js` 中编写如下代码：\n```\n// 监听文件修改，当文件被修改则执行 script 任务\ngulp.watch('js/*.js', ['script']);\n```\n\n但是没有命令可以运行 `gulp.watch()`，需要将 `gulp.watch()` 包含在一个任务中。\n\n```\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 script 任务\n    gulp.watch('js/*.js', ['script'])\n})\n```\n\n接着在命令行输入 `gulp auto`，自动监听 `js/*.js` 文件的修改后压缩js。\n\n```\n$gulp auto\n[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js\n[21:09:45] Starting 'auto'...\n[21:09:45] Finished 'auto' after 9.19 ms\n```\n\n此时修改 `js/a.js` 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。\n\n```\n[21:11:01] Starting 'script'...\n[21:11:01] Finished 'script' after 2.85 ms\n```\n至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。\n\n**注意：**使用 `gulp.watch` 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 `Ctrl + C` 停止 gulp。\n\n> Mac 下使用 `control + C` 停止 gulp\n\n**十、使用 gulp.task('default', fn) 定义默认任务**\n\n增加如下代码\n\n```js\ngulp.task('default', ['script', 'auto']);\n```\n\n此时你可以在命令行直接输入 `gulp` +回车，运行 `script` 和 `auto` 任务。\n\n最终代码如下：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\n\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 script 任务\n    gulp.watch('js/*.js', ['script'])\n})\n\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 script 任务和 auto 任务\ngulp.task('default', ['script', 'auto'])\n```\n\n去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。\n\n\n你可以访问 [gulp-uglify](https://github.com/terinjokes/gulp-uglify) 以查看更多用法。","source":"_posts/gulp-js.md","raw":"---\ntitle: 使用 gulp 压缩 JS\ndate: 2016-09-06 19:51:50\ntags: [gulp,js]\n---\n----------\n\n压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。\n\n所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。\n\n<!-- more -->\n---\n\n找到 `js/` 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 `dist/js/` 目录下。\n\ngulp 代码\n----\n\n**建议**：你可以只阅读下面的代码与注释或同时阅读代码解释\n\ngulp 的所有配置代码都写在 `gulpfile.js` 文件。\n\n**一、新建一个 `gulpfile.js` 文件**\n```\nchapter2\n└── gulpfile.js\n```\n\n---------\n\n**二、在 `gulpfile.js` 中编写代码**\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n```\n\n> `require()` 是 node （CommonJS）中获取模块的语法。\n> \n> 在 gulp 中你只需要理解 `require()` 可以获取模块。\n\n---------\n\n**三、获取 `gulp-uglify` 组件**\n\n```js\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\n```\n\n---------\n\n**四、创建压缩任务**\n\n```js\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n```\n\n- `gulp.task(name, fn)` - 定义任务，第一个参数是任务名，第二个参数是任务内容。\n- `gulp.src(path)` - 选择文件，传入参数是文件路径。\n- `gulp.dest(path)` - 输出文件\n- `gulp.pipe()` - 管道，你可以暂时将 pipe 理解为将操作加入执行队列\n\n参考：[gulp API文档](http://www.gulpjs.com.cn/docs/api/)\n\n---------\n\n**五、跳转至 `gulpfile.js` 所在目录**\n\n打开命令行使用 `cd` 命令跳转至 `gulpfile.js` 文件所在目录。\n\n例如我的 `gulpfile.js` 文件保存在 `C:\\gulp-book\\demo\\chapter2\\gulpfile.js`。\n\n那么就需要在命令行输入\n```\ncd C:\\gulp-book\\demo\\chapter2\n```\n\n> Mac 用户可使用 `cd Documents/gulp-book/demo/chapter2/` 跳转\n\n---------\n\n**六、使用命令行运行 script 任务**\n\n在控制台输入 `gulp 任务名` 可运行任务，此处我们输入 `gulp script` 回车。\n\n注意：输入 `gulp script` 后命令行将会提示错误信息\n```\n// 在命令行输入\ngulp script\n\nError: Cannot find module 'gulp-uglify'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n```\n\n`Cannot find module 'gulp-uglify'` 没有找到 `gulp-uglify` 模块。\n\n----------\n\n**七、安装 `gulp-uglify` 模块**\n\n因为我们并没有安装 `gulp-uglify` 模块到本地，所以找不到此模块。\n\n使用 npm 安装 `gulp-uglify` 到本地\n\n```\nnpm install gulp-uglify\n```\n\n安装成功后你会看到如下信息：\n```\ngulp-uglify@1.1.0 node_modules/gulp-uglify\n├── deepmerge@0.2.7\n├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)\n├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)\n├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)\n└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)\nchapter2 $\n```\n\n在你的文件夹中会新增一个 `node_modules` 文件夹，这里面存放着 npm 安装的模块。\n\n目录结构：\n```\n├── gulpfile.js\n└── node_modules\n    └── gulp-uglify\n```\n\n接着输入 `gulp script` 执行任务\n\n```\ngulp script\n[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js\n[13:34:57] Starting 'script'...\n[13:34:57] Finished 'script' after 6.13 ms\n```\n\n------------\n\n**八、编写 js 文件**\n\n我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 `.js` 后缀文件。\n\n创建 `a.js` 文件，并编写如下内容\n\n```\n// a.js\nfunction demo (msg) {\n    alert('--------\\r\\n' + msg + '\\r\\n--------')\n}\n\ndemo('Hi')\n```\n\n目录结构：\n```\n├── gulpfile.js\n├──  js\n│   └── a.js\n└── node_modules\n    └── gulp-uglify\n```\n\n接着在命令行输入 `gulp script` 执行任务\n\ngulp 会在命令行当前目录下创建 `dist/js/` 文件夹，并创建压缩后的 `a.js` 文件。\n\n目录结构：\n```\n├── gulpfile.js\n├──  js\n│   └── a.js\n├──  dist\n│   └── js\n│       └── a.js\n└── node_modules\n    └── gulp-uglify\n```\n\n[dist/js/a.js](https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js)\n```js\nfunction demo(n){alert(\"--------\\r\\n\"+n+\"\\r\\n--------\")}demo(\"Hi\");\n```\n\n---------\n\n**九、检测代码修改自动执行任务**\n\n`js/a.js`一旦有修改 就必须重新在命令行输入 `gulp script` ，这很麻烦。\n\n可以使用 `gulp.watch(src, fn)` 检测指定目录下文件的修改后执行任务。\n\n在 `gulpfile.js` 中编写如下代码：\n```\n// 监听文件修改，当文件被修改则执行 script 任务\ngulp.watch('js/*.js', ['script']);\n```\n\n但是没有命令可以运行 `gulp.watch()`，需要将 `gulp.watch()` 包含在一个任务中。\n\n```\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 script 任务\n    gulp.watch('js/*.js', ['script'])\n})\n```\n\n接着在命令行输入 `gulp auto`，自动监听 `js/*.js` 文件的修改后压缩js。\n\n```\n$gulp auto\n[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js\n[21:09:45] Starting 'auto'...\n[21:09:45] Finished 'auto' after 9.19 ms\n```\n\n此时修改 `js/a.js` 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。\n\n```\n[21:11:01] Starting 'script'...\n[21:11:01] Finished 'script' after 2.85 ms\n```\n至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。\n\n**注意：**使用 `gulp.watch` 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 `Ctrl + C` 停止 gulp。\n\n> Mac 下使用 `control + C` 停止 gulp\n\n**十、使用 gulp.task('default', fn) 定义默认任务**\n\n增加如下代码\n\n```js\ngulp.task('default', ['script', 'auto']);\n```\n\n此时你可以在命令行直接输入 `gulp` +回车，运行 `script` 和 `auto` 任务。\n\n最终代码如下：\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\n\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 script 任务\n    gulp.watch('js/*.js', ['script'])\n})\n\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 script 任务和 auto 任务\ngulp.task('default', ['script', 'auto'])\n```\n\n去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。\n\n\n你可以访问 [gulp-uglify](https://github.com/terinjokes/gulp-uglify) 以查看更多用法。","slug":"gulp-js","published":1,"updated":"2016-09-28T01:10:05.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vb00050wtugcew2gdv","content":"<hr>\n<p>压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。</p>\n<p>所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><p>找到 <code>js/</code> 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 <code>dist/js/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p><strong>建议</strong>：你可以只阅读下面的代码与注释或同时阅读代码解释</p>\n<p>gulp 的所有配置代码都写在 <code>gulpfile.js</code> 文件。</p>\n<p><strong>一、新建一个 <code>gulpfile.js</code> 文件</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">chapter2</div><div class=\"line\">└── gulpfile.js</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>二、在 <code>gulpfile.js</code> 中编写代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>require()</code> 是 node （CommonJS）中获取模块的语法。</p>\n<p>在 gulp 中你只需要理解 <code>require()</code> 可以获取模块。</p>\n</blockquote>\n<hr>\n<p><strong>三、获取 <code>gulp-uglify</code> 组件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 uglify 模块（用于压缩 JS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>四、创建压缩任务</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 压缩 js 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp script 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'script'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存压缩后的文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>gulp.task(name, fn)</code> - 定义任务，第一个参数是任务名，第二个参数是任务内容。</li>\n<li><code>gulp.src(path)</code> - 选择文件，传入参数是文件路径。</li>\n<li><code>gulp.dest(path)</code> - 输出文件</li>\n<li><code>gulp.pipe()</code> - 管道，你可以暂时将 pipe 理解为将操作加入执行队列</li>\n</ul>\n<p>参考：<a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"external\">gulp API文档</a></p>\n<hr>\n<p><strong>五、跳转至 <code>gulpfile.js</code> 所在目录</strong></p>\n<p>打开命令行使用 <code>cd</code> 命令跳转至 <code>gulpfile.js</code> 文件所在目录。</p>\n<p>例如我的 <code>gulpfile.js</code> 文件保存在 <code>C:\\gulp-book\\demo\\chapter2\\gulpfile.js</code>。</p>\n<p>那么就需要在命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd C:\\gulp-book\\demo\\chapter2</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Mac 用户可使用 <code>cd Documents/gulp-book/demo/chapter2/</code> 跳转</p>\n</blockquote>\n<hr>\n<p><strong>六、使用命令行运行 script 任务</strong></p>\n<p>在控制台输入 <code>gulp 任务名</code> 可运行任务，此处我们输入 <code>gulp script</code> 回车。</p>\n<p>注意：输入 <code>gulp script</code> 后命令行将会提示错误信息<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 在命令行输入</div><div class=\"line\">gulp script</div><div class=\"line\"></div><div class=\"line\">Error: Cannot find module &apos;gulp-uglify&apos;</div><div class=\"line\">    at Function.Module._resolveFilename (module.js:338:15)</div><div class=\"line\">    at Function.Module._load (module.js:280:25)</div></pre></td></tr></table></figure></p>\n<p><code>Cannot find module &#39;gulp-uglify&#39;</code> 没有找到 <code>gulp-uglify</code> 模块。</p>\n<hr>\n<p><strong>七、安装 <code>gulp-uglify</code> 模块</strong></p>\n<p>因为我们并没有安装 <code>gulp-uglify</code> 模块到本地，所以找不到此模块。</p>\n<p>使用 npm 安装 <code>gulp-uglify</code> 到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-uglify</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-uglify@1.1.0 node_modules/gulp-uglify</div><div class=\"line\">├── deepmerge@0.2.7</div><div class=\"line\">├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)</div><div class=\"line\">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class=\"line\">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class=\"line\">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)</div><div class=\"line\">chapter2 $</div></pre></td></tr></table></figure></p>\n<p>在你的文件夹中会新增一个 <code>node_modules</code> 文件夹，这里面存放着 npm 安装的模块。</p>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p>接着输入 <code>gulp script</code> 执行任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp script</div><div class=\"line\">[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class=\"line\">[13:34:57] Starting &apos;script&apos;...</div><div class=\"line\">[13:34:57] Finished &apos;script&apos; after 6.13 ms</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>八、编写 js 文件</strong></p>\n<p>我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 <code>.js</code> 后缀文件。</p>\n<p>创建 <code>a.js</code> 文件，并编写如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// a.js</div><div class=\"line\">function demo (msg) &#123;</div><div class=\"line\">    alert(&apos;--------\\r\\n&apos; + msg + &apos;\\r\\n--------&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">├──  js</div><div class=\"line\">│   └── a.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p>接着在命令行输入 <code>gulp script</code> 执行任务</p>\n<p>gulp 会在命令行当前目录下创建 <code>dist/js/</code> 文件夹，并创建压缩后的 <code>a.js</code> 文件。</p>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">├──  js</div><div class=\"line\">│   └── a.js</div><div class=\"line\">├──  dist</div><div class=\"line\">│   └── js</div><div class=\"line\">│       └── a.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js\" target=\"_blank\" rel=\"external\">dist/js/a.js</a><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">n</span>)</span>&#123;alert(<span class=\"string\">\"--------\\r\\n\"</span>+n+<span class=\"string\">\"\\r\\n--------\"</span>)&#125;demo(<span class=\"string\">\"Hi\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>九、检测代码修改自动执行任务</strong></p>\n<p><code>js/a.js</code>一旦有修改 就必须重新在命令行输入 <code>gulp script</code> ，这很麻烦。</p>\n<p>可以使用 <code>gulp.watch(src, fn)</code> 检测指定目录下文件的修改后执行任务。</p>\n<p>在 <code>gulpfile.js</code> 中编写如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 监听文件修改，当文件被修改则执行 script 任务</div><div class=\"line\">gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;]);</div></pre></td></tr></table></figure></p>\n<p>但是没有命令可以运行 <code>gulp.watch()</code>，需要将 <code>gulp.watch()</code> 包含在一个任务中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 在命令行使用 gulp auto 启动此任务</div><div class=\"line\">gulp.task(&apos;auto&apos;, function () &#123;</div><div class=\"line\">    // 监听文件修改，当文件被修改则执行 script 任务</div><div class=\"line\">    gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>接着在命令行输入 <code>gulp auto</code>，自动监听 <code>js/*.js</code> 文件的修改后压缩js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$gulp auto</div><div class=\"line\">[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class=\"line\">[21:09:45] Starting &apos;auto&apos;...</div><div class=\"line\">[21:09:45] Finished &apos;auto&apos; after 9.19 ms</div></pre></td></tr></table></figure>\n<p>此时修改 <code>js/a.js</code> 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[21:11:01] Starting &apos;script&apos;...</div><div class=\"line\">[21:11:01] Finished &apos;script&apos; after 2.85 ms</div></pre></td></tr></table></figure>\n<p>至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。</p>\n<p><strong>注意：</strong>使用 <code>gulp.watch</code> 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。</p>\n<blockquote>\n<p>Mac 下使用 <code>control + C</code> 停止 gulp</p>\n</blockquote>\n<p><strong>十、使用 gulp.task(‘default’, fn) 定义默认任务</strong></p>\n<p>增加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'script'</span>, <span class=\"string\">'auto'</span>]);</div></pre></td></tr></table></figure>\n<p>此时你可以在命令行直接输入 <code>gulp</code> +回车，运行 <code>script</code> 和 <code>auto</code> 任务。</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 uglify 模块（用于压缩 JS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 js 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp script 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'script'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存压缩后的文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'script'</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'script'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。</p>\n<p>你可以访问 <a href=\"https://github.com/terinjokes/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a> 以查看更多用法。</p>\n","excerpt":"<hr>\n<p>压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。</p>\n<p>所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><p>找到 <code>js/</code> 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 <code>dist/js/</code> 目录下。</p>\n<h2 id=\"gulp-代码\"><a href=\"#gulp-代码\" class=\"headerlink\" title=\"gulp 代码\"></a>gulp 代码</h2><p><strong>建议</strong>：你可以只阅读下面的代码与注释或同时阅读代码解释</p>\n<p>gulp 的所有配置代码都写在 <code>gulpfile.js</code> 文件。</p>\n<p><strong>一、新建一个 <code>gulpfile.js</code> 文件</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">chapter2</div><div class=\"line\">└── gulpfile.js</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>二、在 <code>gulpfile.js</code> 中编写代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>require()</code> 是 node （CommonJS）中获取模块的语法。</p>\n<p>在 gulp 中你只需要理解 <code>require()</code> 可以获取模块。</p>\n</blockquote>\n<hr>\n<p><strong>三、获取 <code>gulp-uglify</code> 组件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 uglify 模块（用于压缩 JS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>四、创建压缩任务</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 压缩 js 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp script 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'script'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存压缩后的文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>gulp.task(name, fn)</code> - 定义任务，第一个参数是任务名，第二个参数是任务内容。</li>\n<li><code>gulp.src(path)</code> - 选择文件，传入参数是文件路径。</li>\n<li><code>gulp.dest(path)</code> - 输出文件</li>\n<li><code>gulp.pipe()</code> - 管道，你可以暂时将 pipe 理解为将操作加入执行队列</li>\n</ul>\n<p>参考：<a href=\"http://www.gulpjs.com.cn/docs/api/\">gulp API文档</a></p>\n<hr>\n<p><strong>五、跳转至 <code>gulpfile.js</code> 所在目录</strong></p>\n<p>打开命令行使用 <code>cd</code> 命令跳转至 <code>gulpfile.js</code> 文件所在目录。</p>\n<p>例如我的 <code>gulpfile.js</code> 文件保存在 <code>C:\\gulp-book\\demo\\chapter2\\gulpfile.js</code>。</p>\n<p>那么就需要在命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd C:\\gulp-book\\demo\\chapter2</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Mac 用户可使用 <code>cd Documents/gulp-book/demo/chapter2/</code> 跳转</p>\n</blockquote>\n<hr>\n<p><strong>六、使用命令行运行 script 任务</strong></p>\n<p>在控制台输入 <code>gulp 任务名</code> 可运行任务，此处我们输入 <code>gulp script</code> 回车。</p>\n<p>注意：输入 <code>gulp script</code> 后命令行将会提示错误信息<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 在命令行输入</div><div class=\"line\">gulp script</div><div class=\"line\"></div><div class=\"line\">Error: Cannot find module &apos;gulp-uglify&apos;</div><div class=\"line\">    at Function.Module._resolveFilename (module.js:338:15)</div><div class=\"line\">    at Function.Module._load (module.js:280:25)</div></pre></td></tr></table></figure></p>\n<p><code>Cannot find module &#39;gulp-uglify&#39;</code> 没有找到 <code>gulp-uglify</code> 模块。</p>\n<hr>\n<p><strong>七、安装 <code>gulp-uglify</code> 模块</strong></p>\n<p>因为我们并没有安装 <code>gulp-uglify</code> 模块到本地，所以找不到此模块。</p>\n<p>使用 npm 安装 <code>gulp-uglify</code> 到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-uglify</div></pre></td></tr></table></figure>\n<p>安装成功后你会看到如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp-uglify@1.1.0 node_modules/gulp-uglify</div><div class=\"line\">├── deepmerge@0.2.7</div><div class=\"line\">├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)</div><div class=\"line\">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class=\"line\">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class=\"line\">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)</div><div class=\"line\">chapter2 $</div></pre></td></tr></table></figure></p>\n<p>在你的文件夹中会新增一个 <code>node_modules</code> 文件夹，这里面存放着 npm 安装的模块。</p>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p>接着输入 <code>gulp script</code> 执行任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp script</div><div class=\"line\">[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class=\"line\">[13:34:57] Starting &apos;script&apos;...</div><div class=\"line\">[13:34:57] Finished &apos;script&apos; after 6.13 ms</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>八、编写 js 文件</strong></p>\n<p>我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 <code>.js</code> 后缀文件。</p>\n<p>创建 <code>a.js</code> 文件，并编写如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// a.js</div><div class=\"line\">function demo (msg) &#123;</div><div class=\"line\">    alert(&apos;--------\\r\\n&apos; + msg + &apos;\\r\\n--------&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">├──  js</div><div class=\"line\">│   └── a.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p>接着在命令行输入 <code>gulp script</code> 执行任务</p>\n<p>gulp 会在命令行当前目录下创建 <code>dist/js/</code> 文件夹，并创建压缩后的 <code>a.js</code> 文件。</p>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── gulpfile.js</div><div class=\"line\">├──  js</div><div class=\"line\">│   └── a.js</div><div class=\"line\">├──  dist</div><div class=\"line\">│   └── js</div><div class=\"line\">│       └── a.js</div><div class=\"line\">└── node_modules</div><div class=\"line\">    └── gulp-uglify</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js\">dist/js/a.js</a><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">n</span>)</span>&#123;alert(<span class=\"string\">\"--------\\r\\n\"</span>+n+<span class=\"string\">\"\\r\\n--------\"</span>)&#125;demo(<span class=\"string\">\"Hi\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>九、检测代码修改自动执行任务</strong></p>\n<p><code>js/a.js</code>一旦有修改 就必须重新在命令行输入 <code>gulp script</code> ，这很麻烦。</p>\n<p>可以使用 <code>gulp.watch(src, fn)</code> 检测指定目录下文件的修改后执行任务。</p>\n<p>在 <code>gulpfile.js</code> 中编写如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 监听文件修改，当文件被修改则执行 script 任务</div><div class=\"line\">gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;]);</div></pre></td></tr></table></figure></p>\n<p>但是没有命令可以运行 <code>gulp.watch()</code>，需要将 <code>gulp.watch()</code> 包含在一个任务中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">// 在命令行使用 gulp auto 启动此任务</div><div class=\"line\">gulp.task(&apos;auto&apos;, function () &#123;</div><div class=\"line\">    // 监听文件修改，当文件被修改则执行 script 任务</div><div class=\"line\">    gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>接着在命令行输入 <code>gulp auto</code>，自动监听 <code>js/*.js</code> 文件的修改后压缩js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$gulp auto</div><div class=\"line\">[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class=\"line\">[21:09:45] Starting &apos;auto&apos;...</div><div class=\"line\">[21:09:45] Finished &apos;auto&apos; after 9.19 ms</div></pre></td></tr></table></figure>\n<p>此时修改 <code>js/a.js</code> 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[21:11:01] Starting &apos;script&apos;...</div><div class=\"line\">[21:11:01] Finished &apos;script&apos; after 2.85 ms</div></pre></td></tr></table></figure>\n<p>至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。</p>\n<p><strong>注意：</strong>使用 <code>gulp.watch</code> 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。</p>\n<blockquote>\n<p>Mac 下使用 <code>control + C</code> 停止 gulp</p>\n</blockquote>\n<p><strong>十、使用 gulp.task(‘default’, fn) 定义默认任务</strong></p>\n<p>增加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'script'</span>, <span class=\"string\">'auto'</span>]);</div></pre></td></tr></table></figure>\n<p>此时你可以在命令行直接输入 <code>gulp</code> +回车，运行 <code>script</code> 和 <code>auto</code> 任务。</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 uglify 模块（用于压缩 JS）</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 js 文件</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp script 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'script'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩文件</span></div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存压缩后的文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'script'</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'script'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。</p>\n<p>你可以访问 <a href=\"https://github.com/terinjokes/gulp-uglify\">gulp-uglify</a> 以查看更多用法。</p>"},{"title":"使用 gulp 编译 LESS","date":"2016-09-09T11:55:45.000Z","_content":"\n> Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。\n\n<!-- more -->\n安装\n---\n\n```\nnpm install gulp-less\n```\n\n基本用法\n-------\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n// 获取 gulp-less 模块\nvar less = require('gulp-less')\n\n// 编译less\n// 在命令行输入 gulp less 启动此任务\ngulp.task('less', function () {\n    // 1. 找到 less 文件\n    gulp.src('less/**.less')\n    // 2. 编译为css\n        .pipe(less())\n    // 3. 另存文件\n        .pipe(gulp.dest('dist/css'))\n});\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 less 任务\n    gulp.watch('less/**.less', ['less'])\n})\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 less 任务和 auto 任务\ngulp.task('default', ['less', 'auto'])\n```\n\n你可以访问 [gulp-less](https://github.com/plus3network/gulp-less) 以查看更多用法。\n\nLESS 代码和编译后的CSS代码\n----------\n\nless/a.less\n\n```css\n.less{\n  a{\n        color:pink;\n    }\n}\n```\nless/import.less\n\n\n```css\n@import \"a.less\";\n.import{\n  a{\n    color:red;\n    }\n}\n```\nless/a.css\n\n```css\n.less a {\n  color: pink;\n}\n```\nless/import.css\n\n```css\n.less a {\n  color: pink;\n}\n.import a{\n  color: red;\n}\n```\n","source":"_posts/gulp-less.md","raw":"---\ntitle: 使用 gulp 编译 LESS\ndate: 2016-09-09 19:55:45\ntags: [gulp,less]\n---\n\n> Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。\n\n<!-- more -->\n安装\n---\n\n```\nnpm install gulp-less\n```\n\n基本用法\n-------\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n// 获取 gulp-less 模块\nvar less = require('gulp-less')\n\n// 编译less\n// 在命令行输入 gulp less 启动此任务\ngulp.task('less', function () {\n    // 1. 找到 less 文件\n    gulp.src('less/**.less')\n    // 2. 编译为css\n        .pipe(less())\n    // 3. 另存文件\n        .pipe(gulp.dest('dist/css'))\n});\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 less 任务\n    gulp.watch('less/**.less', ['less'])\n})\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 less 任务和 auto 任务\ngulp.task('default', ['less', 'auto'])\n```\n\n你可以访问 [gulp-less](https://github.com/plus3network/gulp-less) 以查看更多用法。\n\nLESS 代码和编译后的CSS代码\n----------\n\nless/a.less\n\n```css\n.less{\n  a{\n        color:pink;\n    }\n}\n```\nless/import.less\n\n\n```css\n@import \"a.less\";\n.import{\n  a{\n    color:red;\n    }\n}\n```\nless/a.css\n\n```css\n.less a {\n  color: pink;\n}\n```\nless/import.css\n\n```css\n.less a {\n  color: pink;\n}\n.import a{\n  color: red;\n}\n```\n","slug":"gulp-less","published":1,"updated":"2016-09-28T01:10:05.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vg00060wtum95jilru","content":"<blockquote>\n<p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-less</div></pre></td></tr></table></figure>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"comment\">// 获取 gulp-less 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译less</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp less 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到 less 文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'less/**.less'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 编译为css</span></div><div class=\"line\">        .pipe(less())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 less 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'less/**.less'</span>, [<span class=\"string\">'less'</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/plus3network/gulp-less\" target=\"_blank\" rel=\"external\">gulp-less</a> 以查看更多用法。</p>\n<h2 id=\"LESS-代码和编译后的CSS代码\"><a href=\"#LESS-代码和编译后的CSS代码\" class=\"headerlink\" title=\"LESS 代码和编译后的CSS代码\"></a>LESS 代码和编译后的CSS代码</h2><p>less/a.less</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.less&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">        color:pink;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/import.less</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@import \"a.less\";</div><div class=\"line\">.import&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    color:red;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.less</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/import.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.less</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.import</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。</p>\n</blockquote>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-less</div></pre></td></tr></table></figure>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"comment\">// 获取 gulp-less 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译less</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp less 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到 less 文件</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'less/**.less'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 编译为css</span></div><div class=\"line\">        .pipe(less())</div><div class=\"line\">    <span class=\"comment\">// 3. 另存文件</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 less 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'less/**.less'</span>, [<span class=\"string\">'less'</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<p>你可以访问 <a href=\"https://github.com/plus3network/gulp-less\">gulp-less</a> 以查看更多用法。</p>\n<h2 id=\"LESS-代码和编译后的CSS代码\"><a href=\"#LESS-代码和编译后的CSS代码\" class=\"headerlink\" title=\"LESS 代码和编译后的CSS代码\"></a>LESS 代码和编译后的CSS代码</h2><p>less/a.less</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.less&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">        color:pink;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/import.less</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@import \"a.less\";</div><div class=\"line\">.import&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    color:red;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.less</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>less/import.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.less</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.import</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"使用 gulp 编译 Sass","date":"2016-09-10T11:55:36.000Z","_content":"\n## gulp-sass\n\n本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用`gulp-sass`\n\n----------\n\n> Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。\n\n本章使用 `ruby-sass` 编译 css,若你没有安装 ruby 和 sass 请移步`使用ruby.taobao安装 Sass`\n<!-- more -->\n\n安装\n---\n\n```\nnpm install gulp-ruby-sass\n```\n\n基本用法\n-------\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n// 获取 gulp-ruby-sass 模块\nvar sass = require('gulp-ruby-sass')\n\n// 编译sass\n// 在命令行输入 gulp sass 启动此任务\ngulp.task('sass', function() {\n    return sass('sass/') \n    .on('error', function (err) {\n      console.error('Error!', err.message);\n   })\n    .pipe(gulp.dest('dist/css'))\n});\n\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 images 任务\n    gulp.watch('sass/**/*.scss', ['sass'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 sass 任务和 auto 任务\ngulp.task('default', ['sass', 'auto'])\n```\n\n\nSass 代码和编译后的 CSS 代码\n----------\n\nsass/a.scss\n\n```css\n.sass{\n    a{\n        color:pink;\n    }\n}\n```\n\nsass/import.scss\n\n\n```css\n@import \"a.scss\";\n.import{\n  a{\n    color:red;\n    }\n}\n```\n\nsass/a.css\n\n```css\n.sass a {\n  color: pink;\n}\n```\n\nsass/import.css\n\n```css\n.sass a {\n  color: pink;\n}\n.import a{\n  color: red;\n}\n```","source":"_posts/gulp-sass.md","raw":"---\ntitle: 使用 gulp 编译 Sass\ndate: 2016-09-10 19:55:36\ntags: [gulp,sass]\n---\n\n## gulp-sass\n\n本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用`gulp-sass`\n\n----------\n\n> Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。\n\n本章使用 `ruby-sass` 编译 css,若你没有安装 ruby 和 sass 请移步`使用ruby.taobao安装 Sass`\n<!-- more -->\n\n安装\n---\n\n```\nnpm install gulp-ruby-sass\n```\n\n基本用法\n-------\n\n```js\n// 获取 gulp\nvar gulp = require('gulp')\n// 获取 gulp-ruby-sass 模块\nvar sass = require('gulp-ruby-sass')\n\n// 编译sass\n// 在命令行输入 gulp sass 启动此任务\ngulp.task('sass', function() {\n    return sass('sass/') \n    .on('error', function (err) {\n      console.error('Error!', err.message);\n   })\n    .pipe(gulp.dest('dist/css'))\n});\n\n\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('auto', function () {\n    // 监听文件修改，当文件被修改则执行 images 任务\n    gulp.watch('sass/**/*.scss', ['sass'])\n});\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 sass 任务和 auto 任务\ngulp.task('default', ['sass', 'auto'])\n```\n\n\nSass 代码和编译后的 CSS 代码\n----------\n\nsass/a.scss\n\n```css\n.sass{\n    a{\n        color:pink;\n    }\n}\n```\n\nsass/import.scss\n\n\n```css\n@import \"a.scss\";\n.import{\n  a{\n    color:red;\n    }\n}\n```\n\nsass/a.css\n\n```css\n.sass a {\n  color: pink;\n}\n```\n\nsass/import.css\n\n```css\n.sass a {\n  color: pink;\n}\n.import a{\n  color: red;\n}\n```","slug":"gulp-sass","published":1,"updated":"2016-09-28T01:10:05.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vk00080wtuj5fqjdxd","content":"<h2 id=\"gulp-sass\"><a href=\"#gulp-sass\" class=\"headerlink\" title=\"gulp-sass\"></a>gulp-sass</h2><p>本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用<code>gulp-sass</code></p>\n<hr>\n<blockquote>\n<p>Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。</p>\n</blockquote>\n<p>本章使用 <code>ruby-sass</code> 编译 css,若你没有安装 ruby 和 sass 请移步<code>使用ruby.taobao安装 Sass</code><br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-ruby-sass</div></pre></td></tr></table></figure>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"comment\">// 获取 gulp-ruby-sass 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-ruby-sass'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译sass</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp sass 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sass(<span class=\"string\">'sass/'</span>) </div><div class=\"line\">    .on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error!'</span>, err.message);</div><div class=\"line\">   &#125;)</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'sass/**/*.scss'</span>, [<span class=\"string\">'sass'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 sass 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'sass'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"Sass-代码和编译后的-CSS-代码\"><a href=\"#Sass-代码和编译后的-CSS-代码\" class=\"headerlink\" title=\"Sass 代码和编译后的 CSS 代码\"></a>Sass 代码和编译后的 CSS 代码</h2><p>sass/a.scss</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sass&#123;</div><div class=\"line\">    a&#123;</div><div class=\"line\">        color:pink;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/import.scss</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@import \"a.scss\";</div><div class=\"line\">.import&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    color:red;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sass</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/import.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sass</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.import</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"gulp-sass\"><a href=\"#gulp-sass\" class=\"headerlink\" title=\"gulp-sass\"></a>gulp-sass</h2><p>本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用<code>gulp-sass</code></p>\n<hr>\n<blockquote>\n<p>Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。</p>\n</blockquote>\n<p>本章使用 <code>ruby-sass</code> 编译 css,若你没有安装 ruby 和 sass 请移步<code>使用ruby.taobao安装 Sass</code><br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install gulp-ruby-sass</div></pre></td></tr></table></figure>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取 gulp</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"comment\">// 获取 gulp-ruby-sass 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-ruby-sass'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译sass</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp sass 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sass(<span class=\"string\">'sass/'</span>) </div><div class=\"line\">    .on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error!'</span>, err.message);</div><div class=\"line\">   &#125;)</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp auto 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class=\"line\">    gulp.watch(<span class=\"string\">'sass/**/*.scss'</span>, [<span class=\"string\">'sass'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 gulp.task('default') 定义默认任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行使用 gulp 启动 sass 任务和 auto 任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'sass'</span>, <span class=\"string\">'auto'</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"Sass-代码和编译后的-CSS-代码\"><a href=\"#Sass-代码和编译后的-CSS-代码\" class=\"headerlink\" title=\"Sass 代码和编译后的 CSS 代码\"></a>Sass 代码和编译后的 CSS 代码</h2><p>sass/a.scss</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sass&#123;</div><div class=\"line\">    a&#123;</div><div class=\"line\">        color:pink;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/import.scss</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@import \"a.scss\";</div><div class=\"line\">.import&#123;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    color:red;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sass</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>sass/import.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sass</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: pink;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.import</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"BrowserSync自动刷新,释放你的F5.","date":"2016-10-04T04:03:14.000Z","_content":"想象一下这个场景：你开着两个显示器，一边是写代码，另一边是浏览器里的你正在开发的Web。此时桌上还放着你的手机，手机里也是这个开发中的应用。然后，你新写了一小段代码，按下了<code>Ctrl+S</code>保存。紧接着，你的手机和另一个显示器里的应用，就变成了更新后的效果。你可以马上检查效果是否和你预想的一致，甚至都不需要动一下鼠标。\n<!-- more -->\n想起来还不错？嗯，这只是简单地省略掉那个开发过程中会按好多遍的F5刷新。\n\nLiveReload有所不足的地方是，需要搭配浏览器插件。但是，插件是取决于浏览器的，Chrome和Firefox都有可用插件，但IE和手机上的浏览器，就不能这样了，这时候只能手工向页面里添加一段<code>&lt;script&gt;</code>代码，而且还要记得结束后再手工移除。\n\nBrowserSync的用法则不需要浏览器插件，也不用手工添加代码。一句控制台的命令之后，无论是在手机里还是电脑，无论用多少个浏览器，都可以拥有自动刷新的功能。\n\n![](http://i1.piimg.com/567571/c60e6937130d255d.jpg)\n\n# BrowserSync安装和使用\n* 1.下载并安装Node.js：\n\nhttps://nodejs.org/en/download\n\n* 2.通过npm安装BrowserSync：\n\n`npm install -g browser-sync`\n\n* 3.安装后，就可以开始使用了。打开控制台进入项目所在的目录，然后输入命令(此命令用于纯静态站点)：\n--files 路径是相对于运行该命令的项目（目录）\n\n``browser-sync start --server --files \"*.css, *.html\"``\n\n后面的*.css, *.html，是指监听目录中的后缀名为.css和.html的文件。\n\n## 如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。\n``browser-sync start --server --files \"**\"``\n\n## 如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如``http://localhost:8080``\n\n此时会是这样的命令：\n\n``browser-sync start --proxy \"localhost:8080\" --files \"*.css\"``\n\nBrowserSync会提供一个新地址（如未被占用的话，``http://localhost:3000``）用于访问。\n\n好了，为什么BrowserSync不需要浏览器插件？因为它使用了服务器的形式（直接或代理）来处理项目文件。默认情况下，访问它的服务器上的网页，可以看到这样的提示签：\n\n![](http://i1.piimg.com/567571/48b052b246d65304.png)\n\n这说明当前浏览的网页已连接到BrowserSync。查看一下源码，会发现它们都被添加了与BrowserSync有关的一段<code>&lt;script&gt;</code>代码，就像LiveReload浏览器插件做的那样。这些代码会在浏览器和BrowserSync的服务器之间建立web socket连接，一旦有监听的文件发生变化，BrowserSync会通知浏览器。\n如果监听的文件是CSS，BrowserSync不会刷新整页，而是直接重新请求这个css文件，并更新到当前页中，如图：\n\n![](http://i1.piimg.com/567571/a193de06ae37289b.gif)","source":"_posts/no-f5.md","raw":"---\ntitle: BrowserSync自动刷新,释放你的F5.\ndate: 2016-10-4 12:03:14\ntags: [browser-sync,nodejs,node.js]\n---\n想象一下这个场景：你开着两个显示器，一边是写代码，另一边是浏览器里的你正在开发的Web。此时桌上还放着你的手机，手机里也是这个开发中的应用。然后，你新写了一小段代码，按下了<code>Ctrl+S</code>保存。紧接着，你的手机和另一个显示器里的应用，就变成了更新后的效果。你可以马上检查效果是否和你预想的一致，甚至都不需要动一下鼠标。\n<!-- more -->\n想起来还不错？嗯，这只是简单地省略掉那个开发过程中会按好多遍的F5刷新。\n\nLiveReload有所不足的地方是，需要搭配浏览器插件。但是，插件是取决于浏览器的，Chrome和Firefox都有可用插件，但IE和手机上的浏览器，就不能这样了，这时候只能手工向页面里添加一段<code>&lt;script&gt;</code>代码，而且还要记得结束后再手工移除。\n\nBrowserSync的用法则不需要浏览器插件，也不用手工添加代码。一句控制台的命令之后，无论是在手机里还是电脑，无论用多少个浏览器，都可以拥有自动刷新的功能。\n\n![](http://i1.piimg.com/567571/c60e6937130d255d.jpg)\n\n# BrowserSync安装和使用\n* 1.下载并安装Node.js：\n\nhttps://nodejs.org/en/download\n\n* 2.通过npm安装BrowserSync：\n\n`npm install -g browser-sync`\n\n* 3.安装后，就可以开始使用了。打开控制台进入项目所在的目录，然后输入命令(此命令用于纯静态站点)：\n--files 路径是相对于运行该命令的项目（目录）\n\n``browser-sync start --server --files \"*.css, *.html\"``\n\n后面的*.css, *.html，是指监听目录中的后缀名为.css和.html的文件。\n\n## 如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。\n``browser-sync start --server --files \"**\"``\n\n## 如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如``http://localhost:8080``\n\n此时会是这样的命令：\n\n``browser-sync start --proxy \"localhost:8080\" --files \"*.css\"``\n\nBrowserSync会提供一个新地址（如未被占用的话，``http://localhost:3000``）用于访问。\n\n好了，为什么BrowserSync不需要浏览器插件？因为它使用了服务器的形式（直接或代理）来处理项目文件。默认情况下，访问它的服务器上的网页，可以看到这样的提示签：\n\n![](http://i1.piimg.com/567571/48b052b246d65304.png)\n\n这说明当前浏览的网页已连接到BrowserSync。查看一下源码，会发现它们都被添加了与BrowserSync有关的一段<code>&lt;script&gt;</code>代码，就像LiveReload浏览器插件做的那样。这些代码会在浏览器和BrowserSync的服务器之间建立web socket连接，一旦有监听的文件发生变化，BrowserSync会通知浏览器。\n如果监听的文件是CSS，BrowserSync不会刷新整页，而是直接重新请求这个css文件，并更新到当前页中，如图：\n\n![](http://i1.piimg.com/567571/a193de06ae37289b.gif)","slug":"no-f5","published":1,"updated":"2016-10-20T04:07:36.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vp00090wtujemd6475","content":"<p>想象一下这个场景：你开着两个显示器，一边是写代码，另一边是浏览器里的你正在开发的Web。此时桌上还放着你的手机，手机里也是这个开发中的应用。然后，你新写了一小段代码，按下了<code>Ctrl+S</code>保存。紧接着，你的手机和另一个显示器里的应用，就变成了更新后的效果。你可以马上检查效果是否和你预想的一致，甚至都不需要动一下鼠标。<br><a id=\"more\"></a><br>想起来还不错？嗯，这只是简单地省略掉那个开发过程中会按好多遍的F5刷新。</p>\n<p>LiveReload有所不足的地方是，需要搭配浏览器插件。但是，插件是取决于浏览器的，Chrome和Firefox都有可用插件，但IE和手机上的浏览器，就不能这样了，这时候只能手工向页面里添加一段<code>&lt;script&gt;</code>代码，而且还要记得结束后再手工移除。</p>\n<p>BrowserSync的用法则不需要浏览器插件，也不用手工添加代码。一句控制台的命令之后，无论是在手机里还是电脑，无论用多少个浏览器，都可以拥有自动刷新的功能。</p>\n<p><img src=\"http://i1.piimg.com/567571/c60e6937130d255d.jpg\" alt=\"\"></p>\n<h1 id=\"BrowserSync安装和使用\"><a href=\"#BrowserSync安装和使用\" class=\"headerlink\" title=\"BrowserSync安装和使用\"></a>BrowserSync安装和使用</h1><ul>\n<li>1.下载并安装Node.js：</li>\n</ul>\n<p><a href=\"https://nodejs.org/en/download\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/download</a></p>\n<ul>\n<li>2.通过npm安装BrowserSync：</li>\n</ul>\n<p><code>npm install -g browser-sync</code></p>\n<ul>\n<li>3.安装后，就可以开始使用了。打开控制台进入项目所在的目录，然后输入命令(此命令用于纯静态站点)：<br>–files 路径是相对于运行该命令的项目（目录）</li>\n</ul>\n<p><code>browser-sync start --server --files &quot;*.css, *.html&quot;</code></p>\n<p>后面的<em>.css, </em>.html，是指监听目录中的后缀名为.css和.html的文件。</p>\n<h2 id=\"如果你的文件层级比较深，您可以考虑使用-（任意目录匹配），来监听目录下的任意文件。\"><a href=\"#如果你的文件层级比较深，您可以考虑使用-（任意目录匹配），来监听目录下的任意文件。\" class=\"headerlink\" title=\"如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。\"></a>如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。</h2><p><code>browser-sync start --server --files &quot;**&quot;</code></p>\n<h2 id=\"如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http-localhost-8080\"><a href=\"#如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http-localhost-8080\" class=\"headerlink\" title=\"如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http://localhost:8080\"></a>如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如<code>http://localhost:8080</code></h2><p>此时会是这样的命令：</p>\n<p><code>browser-sync start --proxy &quot;localhost:8080&quot; --files &quot;*.css&quot;</code></p>\n<p>BrowserSync会提供一个新地址（如未被占用的话，<code>http://localhost:3000</code>）用于访问。</p>\n<p>好了，为什么BrowserSync不需要浏览器插件？因为它使用了服务器的形式（直接或代理）来处理项目文件。默认情况下，访问它的服务器上的网页，可以看到这样的提示签：</p>\n<p><img src=\"http://i1.piimg.com/567571/48b052b246d65304.png\" alt=\"\"></p>\n<p>这说明当前浏览的网页已连接到BrowserSync。查看一下源码，会发现它们都被添加了与BrowserSync有关的一段<code>&lt;script&gt;</code>代码，就像LiveReload浏览器插件做的那样。这些代码会在浏览器和BrowserSync的服务器之间建立web socket连接，一旦有监听的文件发生变化，BrowserSync会通知浏览器。<br>如果监听的文件是CSS，BrowserSync不会刷新整页，而是直接重新请求这个css文件，并更新到当前页中，如图：</p>\n<p><img src=\"http://i1.piimg.com/567571/a193de06ae37289b.gif\" alt=\"\"></p>\n","excerpt":"<p>想象一下这个场景：你开着两个显示器，一边是写代码，另一边是浏览器里的你正在开发的Web。此时桌上还放着你的手机，手机里也是这个开发中的应用。然后，你新写了一小段代码，按下了<code>Ctrl+S</code>保存。紧接着，你的手机和另一个显示器里的应用，就变成了更新后的效果。你可以马上检查效果是否和你预想的一致，甚至都不需要动一下鼠标。<br>","more":"<br>想起来还不错？嗯，这只是简单地省略掉那个开发过程中会按好多遍的F5刷新。</p>\n<p>LiveReload有所不足的地方是，需要搭配浏览器插件。但是，插件是取决于浏览器的，Chrome和Firefox都有可用插件，但IE和手机上的浏览器，就不能这样了，这时候只能手工向页面里添加一段<code>&lt;script&gt;</code>代码，而且还要记得结束后再手工移除。</p>\n<p>BrowserSync的用法则不需要浏览器插件，也不用手工添加代码。一句控制台的命令之后，无论是在手机里还是电脑，无论用多少个浏览器，都可以拥有自动刷新的功能。</p>\n<p><img src=\"http://i1.piimg.com/567571/c60e6937130d255d.jpg\" alt=\"\"></p>\n<h1 id=\"BrowserSync安装和使用\"><a href=\"#BrowserSync安装和使用\" class=\"headerlink\" title=\"BrowserSync安装和使用\"></a>BrowserSync安装和使用</h1><ul>\n<li>1.下载并安装Node.js：</li>\n</ul>\n<p><a href=\"https://nodejs.org/en/download\">https://nodejs.org/en/download</a></p>\n<ul>\n<li>2.通过npm安装BrowserSync：</li>\n</ul>\n<p><code>npm install -g browser-sync</code></p>\n<ul>\n<li>3.安装后，就可以开始使用了。打开控制台进入项目所在的目录，然后输入命令(此命令用于纯静态站点)：<br>–files 路径是相对于运行该命令的项目（目录）</li>\n</ul>\n<p><code>browser-sync start --server --files &quot;*.css, *.html&quot;</code></p>\n<p>后面的<em>.css, </em>.html，是指监听目录中的后缀名为.css和.html的文件。</p>\n<h2 id=\"如果你的文件层级比较深，您可以考虑使用-（任意目录匹配），来监听目录下的任意文件。\"><a href=\"#如果你的文件层级比较深，您可以考虑使用-（任意目录匹配），来监听目录下的任意文件。\" class=\"headerlink\" title=\"如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。\"></a>如果你的文件层级比较深，您可以考虑使用 **（任意目录匹配），来监听目录下的任意文件。</h2><p><code>browser-sync start --server --files &quot;**&quot;</code></p>\n<h2 id=\"如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http-localhost-8080\"><a href=\"#如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http-localhost-8080\" class=\"headerlink\" title=\"如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如http://localhost:8080\"></a>如果是动态站点，则使用代理模式。例如PHP站点，已经建立了一个本地服务器如<code>http://localhost:8080</code></h2><p>此时会是这样的命令：</p>\n<p><code>browser-sync start --proxy &quot;localhost:8080&quot; --files &quot;*.css&quot;</code></p>\n<p>BrowserSync会提供一个新地址（如未被占用的话，<code>http://localhost:3000</code>）用于访问。</p>\n<p>好了，为什么BrowserSync不需要浏览器插件？因为它使用了服务器的形式（直接或代理）来处理项目文件。默认情况下，访问它的服务器上的网页，可以看到这样的提示签：</p>\n<p><img src=\"http://i1.piimg.com/567571/48b052b246d65304.png\" alt=\"\"></p>\n<p>这说明当前浏览的网页已连接到BrowserSync。查看一下源码，会发现它们都被添加了与BrowserSync有关的一段<code>&lt;script&gt;</code>代码，就像LiveReload浏览器插件做的那样。这些代码会在浏览器和BrowserSync的服务器之间建立web socket连接，一旦有监听的文件发生变化，BrowserSync会通知浏览器。<br>如果监听的文件是CSS，BrowserSync不会刷新整页，而是直接重新请求这个css文件，并更新到当前页中，如图：</p>\n<p><img src=\"http://i1.piimg.com/567571/a193de06ae37289b.gif\" alt=\"\"></p>"},{"title":"极路由Shadowsocks家庭无痛翻墙插件","date":"2016-09-01T06:12:16.000Z","_content":"\n## 1、准备工作\n* ①. 首先你得有一台极路由，型号随意，要求系统版本必须低于``1.0``，否则安装会出错。\n* ②. 然后你得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n* ③. 然后需要开启开发者权限，具体请参考官方的《[开发者模式功能开放公告](http://bbs.hiwifi.com/thread-74899-1-1.html)》。\n<!--more-->\n\n## 2、安装SS\n* ①. 使用putty连接路由器：[下载地址](http://pan.baidu.com/s/1jGivsOm)\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3br9sfect8rckt56l6hg5a.png)\n点击open,会出现命令框：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3bs0itgv05361e7u10h71rb4a.png)\n提示使用`root帐号`连接路由，密码是你的后台登陆密码。\n* ②. 输入安装SS命令，按回车键： \n``cd /tmp && curl -k -o 01.sh http://mytv-10005639.file.myqcloud.com/01.sh && sh 01.sh && rm 01.sh``\n\n## 3、配置SS\n* ①. 登陆极路由后台开启Shadowsocks插件:\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3c0jfl1afp1ehd19m713c58baa.jpg)\n* ②. 在表单中填写你的SS帐号密码和加密方式，选择智能模式，保存，只要提示``运行中 已加速``就表示已经成功连上SS了。\n\n#### 注意：\n* ①.请关闭极路由的`自动更新`功能，要不每次路由器升级后，会删除SS插件。\n* ②.若Shadowsocks选项显示的是：``{ \"msg\": \"请求的接口不存在.\", \"code\": 560 }``,请重启路由器。\n这个时候，连接极路由的所有设备，理论上都可以无痛翻墙了。\n\n## 4、更新gfwlist列表\n* ①. SSH登录极路由：``ssh root@192.168.199.1 -p 1022`` 使用root帐号连接路由，端口为1022，密码为后台登陆密码。\n* ②. 输入更新命令，按回车键：``cd /etc/gw-redsocks/gw-shadowsocks && wget http://mytv-10005639.file.myqcloud.com/gfwlist.txt && cat gfwlist.txt >> gw-shadowsocks.dnslist && /etc/init.d/dnsmasq restart``","source":"_posts/hiwifi-ss.md","raw":"---\ntitle: 极路由Shadowsocks家庭无痛翻墙插件\ndate: 2016-09-01 14:12:16\ntags: [hiwifi,ss,Shadowsocks,fuck-gfw]\n---\n\n## 1、准备工作\n* ①. 首先你得有一台极路由，型号随意，要求系统版本必须低于``1.0``，否则安装会出错。\n* ②. 然后你得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n* ③. 然后需要开启开发者权限，具体请参考官方的《[开发者模式功能开放公告](http://bbs.hiwifi.com/thread-74899-1-1.html)》。\n<!--more-->\n\n## 2、安装SS\n* ①. 使用putty连接路由器：[下载地址](http://pan.baidu.com/s/1jGivsOm)\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3br9sfect8rckt56l6hg5a.png)\n点击open,会出现命令框：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3bs0itgv05361e7u10h71rb4a.png)\n提示使用`root帐号`连接路由，密码是你的后台登陆密码。\n* ②. 输入安装SS命令，按回车键： \n``cd /tmp && curl -k -o 01.sh http://mytv-10005639.file.myqcloud.com/01.sh && sh 01.sh && rm 01.sh``\n\n## 3、配置SS\n* ①. 登陆极路由后台开启Shadowsocks插件:\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1af3c0jfl1afp1ehd19m713c58baa.jpg)\n* ②. 在表单中填写你的SS帐号密码和加密方式，选择智能模式，保存，只要提示``运行中 已加速``就表示已经成功连上SS了。\n\n#### 注意：\n* ①.请关闭极路由的`自动更新`功能，要不每次路由器升级后，会删除SS插件。\n* ②.若Shadowsocks选项显示的是：``{ \"msg\": \"请求的接口不存在.\", \"code\": 560 }``,请重启路由器。\n这个时候，连接极路由的所有设备，理论上都可以无痛翻墙了。\n\n## 4、更新gfwlist列表\n* ①. SSH登录极路由：``ssh root@192.168.199.1 -p 1022`` 使用root帐号连接路由，端口为1022，密码为后台登陆密码。\n* ②. 输入更新命令，按回车键：``cd /etc/gw-redsocks/gw-shadowsocks && wget http://mytv-10005639.file.myqcloud.com/gfwlist.txt && cat gfwlist.txt >> gw-shadowsocks.dnslist && /etc/init.d/dnsmasq restart``","slug":"hiwifi-ss","published":1,"updated":"2016-09-28T01:10:05.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vs000b0wtusb08mahd","content":"<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>①. 首先你得有一台极路由，型号随意，要求系统版本必须低于<code>1.0</code>，否则安装会出错。</li>\n<li>②. 然后你得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n<li>③. 然后需要开启开发者权限，具体请参考官方的《<a href=\"http://bbs.hiwifi.com/thread-74899-1-1.html\" target=\"_blank\" rel=\"external\">开发者模式功能开放公告</a>》。<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"2、安装SS\"><a href=\"#2、安装SS\" class=\"headerlink\" title=\"2、安装SS\"></a>2、安装SS</h2><ul>\n<li>①. 使用putty连接路由器：<a href=\"http://pan.baidu.com/s/1jGivsOm\" target=\"_blank\" rel=\"external\">下载地址</a><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3br9sfect8rckt56l6hg5a.png\" alt=\"\"><br>点击open,会出现命令框：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3bs0itgv05361e7u10h71rb4a.png\" alt=\"\"><br>提示使用<code>root帐号</code>连接路由，密码是你的后台登陆密码。</li>\n<li>②. 输入安装SS命令，按回车键：<br><code>cd /tmp &amp;&amp; curl -k -o 01.sh http://mytv-10005639.file.myqcloud.com/01.sh &amp;&amp; sh 01.sh &amp;&amp; rm 01.sh</code></li>\n</ul>\n<h2 id=\"3、配置SS\"><a href=\"#3、配置SS\" class=\"headerlink\" title=\"3、配置SS\"></a>3、配置SS</h2><ul>\n<li>①. 登陆极路由后台开启Shadowsocks插件:<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3c0jfl1afp1ehd19m713c58baa.jpg\" alt=\"\"></li>\n<li>②. 在表单中填写你的SS帐号密码和加密方式，选择智能模式，保存，只要提示<code>运行中 已加速</code>就表示已经成功连上SS了。</li>\n</ul>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>①.请关闭极路由的<code>自动更新</code>功能，要不每次路由器升级后，会删除SS插件。</li>\n<li>②.若Shadowsocks选项显示的是：<code>{ &quot;msg&quot;: &quot;请求的接口不存在.&quot;, &quot;code&quot;: 560 }</code>,请重启路由器。<br>这个时候，连接极路由的所有设备，理论上都可以无痛翻墙了。</li>\n</ul>\n<h2 id=\"4、更新gfwlist列表\"><a href=\"#4、更新gfwlist列表\" class=\"headerlink\" title=\"4、更新gfwlist列表\"></a>4、更新gfwlist列表</h2><ul>\n<li>①. SSH登录极路由：<code>ssh root@192.168.199.1 -p 1022</code> 使用root帐号连接路由，端口为1022，密码为后台登陆密码。</li>\n<li>②. 输入更新命令，按回车键：<code>cd /etc/gw-redsocks/gw-shadowsocks &amp;&amp; wget http://mytv-10005639.file.myqcloud.com/gfwlist.txt &amp;&amp; cat gfwlist.txt &gt;&gt; gw-shadowsocks.dnslist &amp;&amp; /etc/init.d/dnsmasq restart</code></li>\n</ul>\n","excerpt":"<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>①. 首先你得有一台极路由，型号随意，要求系统版本必须低于<code>1.0</code>，否则安装会出错。</li>\n<li>②. 然后你得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n<li>③. 然后需要开启开发者权限，具体请参考官方的《<a href=\"http://bbs.hiwifi.com/thread-74899-1-1.html\">开发者模式功能开放公告</a>》。","more":"</li>\n</ul>\n<h2 id=\"2、安装SS\"><a href=\"#2、安装SS\" class=\"headerlink\" title=\"2、安装SS\"></a>2、安装SS</h2><ul>\n<li>①. 使用putty连接路由器：<a href=\"http://pan.baidu.com/s/1jGivsOm\">下载地址</a><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3br9sfect8rckt56l6hg5a.png\" alt=\"\"><br>点击open,会出现命令框：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3bs0itgv05361e7u10h71rb4a.png\" alt=\"\"><br>提示使用<code>root帐号</code>连接路由，密码是你的后台登陆密码。</li>\n<li>②. 输入安装SS命令，按回车键：<br><code>cd /tmp &amp;&amp; curl -k -o 01.sh http://mytv-10005639.file.myqcloud.com/01.sh &amp;&amp; sh 01.sh &amp;&amp; rm 01.sh</code></li>\n</ul>\n<h2 id=\"3、配置SS\"><a href=\"#3、配置SS\" class=\"headerlink\" title=\"3、配置SS\"></a>3、配置SS</h2><ul>\n<li>①. 登陆极路由后台开启Shadowsocks插件:<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1af3c0jfl1afp1ehd19m713c58baa.jpg\" alt=\"\"></li>\n<li>②. 在表单中填写你的SS帐号密码和加密方式，选择智能模式，保存，只要提示<code>运行中 已加速</code>就表示已经成功连上SS了。</li>\n</ul>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>①.请关闭极路由的<code>自动更新</code>功能，要不每次路由器升级后，会删除SS插件。</li>\n<li>②.若Shadowsocks选项显示的是：<code>{ &quot;msg&quot;: &quot;请求的接口不存在.&quot;, &quot;code&quot;: 560 }</code>,请重启路由器。<br>这个时候，连接极路由的所有设备，理论上都可以无痛翻墙了。</li>\n</ul>\n<h2 id=\"4、更新gfwlist列表\"><a href=\"#4、更新gfwlist列表\" class=\"headerlink\" title=\"4、更新gfwlist列表\"></a>4、更新gfwlist列表</h2><ul>\n<li>①. SSH登录极路由：<code>ssh root@192.168.199.1 -p 1022</code> 使用root帐号连接路由，端口为1022，密码为后台登陆密码。</li>\n<li>②. 输入更新命令，按回车键：<code>cd /etc/gw-redsocks/gw-shadowsocks &amp;&amp; wget http://mytv-10005639.file.myqcloud.com/gfwlist.txt &amp;&amp; cat gfwlist.txt &gt;&gt; gw-shadowsocks.dnslist &amp;&amp; /etc/init.d/dnsmasq restart</code></li>\n</ul>"},{"title":"Node.js(1) 封装,调用,执行,访问路径,http,函数编程,等待函数,事件监听","date":"2016-10-01T07:53:07.000Z","_content":"# 1.如何封装一个模块；\n首先，我们建立一个js文件，例如命名为test.js；\n然后在里面写一个函数，函数名任意；\n然后通过exports.变量名，将函数赋值给这个变量；\n如代码：\n<!-- more -->\n```js\nfunction test(){    //请注意这个函数名\n    console.log(\"1\");\n}\nexports.testBegin= test;   //等号后面的test，指的是上面的函数名。等号前面的testBegin，是调用时的函数名（注意区别）\n```\n这个test.js的文件就写完了，这是一个模块，他的效果是调用该函数后，输出1；\n另外，不要问我这个exports是什么，我暂时也不知道。\n\n# 2.如何调用一个模块\n在封装模块的前提下，我们新建一个文件，例如a.js，来调用之前封装的test.js模块；\n方法是：\n```js\nvar test = require(\"./test\");   //调用该模块\ntest.testBegin();   //调用该模块的方法（注意方法名是test.js中exports后面的变量名）；\n```\n注意调用时的方法名，并非是test.js中的函数名test；\n\n# 3.如何执行一个Node.js的文件\n我们现在需要执行a.js这个调用了封装模块的文件了，执行他的方法，和执行普通的node.js的文件的方法并没有什么不同；\n在a.js这个文件的目录下，打开命令行。windows是shift＋鼠标右键；\n像下面这样输入即可：\n然后将输出1，感觉执行执行Python文件那样\n\n# 4.获得访问者想要访问的路径\n![](http://img.blog.csdn.net/20160602214711294)\n首先上图，其中pathname指的是路径；而query指的是请求之类的东西（暂时不关心）；\n假如我们想要获得pathname（即字符串“start”），我们该怎么办呢？\n方法：\n* ①首先，需要获取访问者需要访问的路径，方法是通过http的方法createServer\n具体来说：\n我们先require一个http模块：\n```js\nvar http = require(\"http\");\n```\n然后调用其方法，创建一个服务器：\n```js\nhttp.createServer(onRequest).listen(8888);\n```\n注意，这个方法监听的是8888端口，其参数是一个函数；\n \n然后我们书写这个函数的内容：\n```js\nfunction onRequest(request, response) {\n    console.log(request.url);\n}\n```\n这个函数的第一个参数request是用户访问的一些东西，我们需要的是其url变量；假设我们访问地址是这样的：\n``http://127.0.0.1:8888/index/loading?start``\n请注意红色部分，那么服务器在console.log输出的是\n```\n/index/loading?start\n```\n\n* ②我们下来要对这个url做点什么了；\n虽然直接对上面那个参数进行操纵也可以，但这太笨了，让我们来require一个新的模块url\n```js\nvar url = require(\"url\");\n```\n\n* ③调用这个新模块的方法parse，将第一步获得的url地址，作为其参数，再调用其方法pathname，就可以获得我们想要的东西了；\n具体而言，需要这么一段代码：\n```js\nvar pathname = url.parse(request.url).pathname;\n```\n这个pathname就是我们需要的东西了；\n \n把所有代码综合起来，是这样的：\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" recived.\");\n    response.writeHead(200, {\"Content-type\": \"text/plain\"});\n    response.write(\"Hello word!\");\n    response.end();\n}\nhttp.createServer(onRequest).listen(8888);\nconsole.log(\"Server has started!\");\n```\n然后运行之：\n \n我们随便访问一个本地的地址：\n``http://127.0.0.1:8888/index/loading?start``\n \n发现，/index/loding这部分被正常的显示出来了。\n另外，favicon.ico是该网站的图标，据说很多服务器是会默认读取的；\n \n假如我们直接访问：``http://127.0.0.1:8888``，显示是这样的\n![](http://img.blog.csdn.net/20160602214745169)\n\n# 5.关于http\n我们之前有了这么一段代码（已delete掉无关部分）：\n```js\nvar http = require(\"http\");\nfunction onRequest(request, response) {\n    response.writeHead(200, {\"Content-type\": \"text/plain\"});\n    response.write(\"Hello word!\");\n    response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n其中，http调用了NodeJs自带的一个模块“http”，而这个模块是一个服务器模块；\n而createServer是这个模块的方法，效果是返回一个对象，而这个对象有一个listen的方法；\n当然，由于你和我，也许都是新手，因此我们尚没有搞清楚这个到底是怎么运作的；但如果有一定经验的话，可以猜到，这个listen是监听，监听的是8888端口；如果去掉这部分会怎么样？经过测试，服务器并没有运行，如图：\n \n而onRequest函数呢，从名字可以猜到，这个函数的效果是“当请求的时候做些什么”，我们来看其函数：\n```js\nfunction onRequest(request, response) {\n    response.writeHead(200);\n    response.write(\"Hello word!\");\n    response.end();\n}\n```\n这个函数有两个参数：request和response，顾名思义，请求和响应。\nrequest请求指用户访问的时候，相关的信息；\nresponse指服务器的响应，会做些什么；这个函数的三个方法，都是response相关的；\n \n* 第一个：response.writeHead方法，具体来说，就是HTTP响应报文的头行；\n这个指HTTP通信的响应报文中的头部分，如果没有基础的话，暂时不需要关心，写200即可，这里的200，是约定俗称的请求成功时的返回；\n具体搜：\n``response.writeHead(statusCode,[reasonPhrase], [headers])``\n \n* 第二个：response.write方法，具体来说，是HTTP响应报文；\n简单理解，负责发送正文中的一部分，可以同时发送多个不一样的；\n在上面搜：\n``response.write(chunk,encoding='utf8')``\n \n* 第三个：response.end方法，具体来说每一个响应的结束，必须要调用这个方法，然后服务器会认为这条信息已经发送完毕了。\n\n综合效果来说，当我们访问：``http://127.0.0.1:8888/``时，浏览器会出现：\n``Hello world!``\n\n# 6.函数式编程\n所谓函数式编程，简单的理解，就是将函数作为参数传递；\n目前有四个文件：\n``index.js``\n```js\nvar server = require(\"./server\");   //调用该模块\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {};\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\n\nserver.start(router.route, handle);   //调用该模块的方法（注意方法名是test.js中exports后面的变量名）\n```\n\n``server.js``\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start(route, handle) {\n    var count = 0;\n\n    function onRequest(request, response) {\n        console.log(count++ + \"#:\");\n        var pathname = url.parse(request.url).pathname;\n        console.log(\"Request for \" + pathname + \" recived.\");\n\n        route(handle, pathname);    //来源于上面的start的参数\n\n        response.writeHead(200);\n        response.write(\"Hello word!\");\n        response.end();\n    }\n\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started!\");\n}\nexports.start = start;\n```\n\n``router.js``\n```js\nfunction route(handle, pathname) {\n    console.log(\"About to route a request for \" + pathname);\n    if (typeof handle[pathname] === 'function') {\n        handle[pathname]();\n    } else {\n        console.log(\"No request handler found for \" + pathname);\n    }\n}\n\nexports.route = route;\n```\n\n``requestHandler.js``\n```js\nfunction start() {\n    console.log(\"Request handler 'start' was called\");\n}\n\nfunction upload() {\n    console.log(\"Request handler 'upload' was called\");\n}\n\nexports.start = start;\nexports.upload = upload;\n```\n分析：\n* ①首先看index.js，他调用了3个模块，然后声明了一个空的对象，然后给这个对象声明了几个不同的变量（准确的说是函数变量），他们分别对应requestHandlers这个模块的不同函数；\n \n调用server这个模块的start方法，传两个参数，分别是router模块的route方法和对象handle（包含3个函数变量）；\n \n* ②由于调用了server模块的start方法，因此我们来看server模块；\n在server模块中，调用了两个模块，分别是http和url，这两个都是NodeJs自带的，具体里面的内容就不一一分析了（前面已经说明过了）。\n \n在servre模块的start函数（也是index.js调用的方法），有两个参数，第一个参数是route函数（来源于router模块），第二个参数是一个对象（来源于index.js）。\n \n而在start函数中，调用了其第一个参数（route函数），由于这个参数是函数，因此运行它，给其两个参数，分别是handle（来源于index.js的对象）和pathname（来源于当前模块，是用户请求的路径）；\n \n因此接下来我们看router模块的route函数，记得，这个函数传递了一个对象和一个路径；\n \n* ③在router模块中，传递了两个参数，并进行了一次判断；\n判断的逻辑是这样的，第一个参数（是一个对象），其加上下标后的值，如果是类型是函数，那么执行这个函数；如果不是函数，提示没找到该句柄；\n \n请注意，为什么说这个对象加上下标是函数呢，原因在于index中声明的这个对象，而这个对象的三个带下标的变量都是函数；\n \n而这三个被执行函数来源于哪呢？来源于index里加载的模块requestHandlers，那么最后让我们来看看这个模块；\n \n* ④在这个模块里，只有两个函数，分别是start和upload；\n这两个函数输出不同的内容（一个关键字是start，另一个关键字是upload）；\n请回想之前的下标，下标分为三个，分别是空（/），start下标（/start），和upload下标（/upload），因此当用户访问根目录、start目录、和upload目录时，调用对应的方法，而若访问其他目录（包括start目录的子目录等时，提示错误——来源于router模块）；\n![](http://img.blog.csdn.net/20160602214830419)\n现在回顾这种模式是怎么实现的：\n![](http://img.blog.csdn.net/20160602214835576)\n\n# 7.等待函数\n```js\nfunction sleep(milliSeconds) {\n    var startTime = new Date().getTime();\n    while (new Date() < startTime + milliSeconds);  //等待参数的时间\n}\n```\n传的参数是毫秒，在这个时间前，无法执行下一句代码，类似C++的Sleep()函数\n\n# 8.返回的两种格式\n```js\nresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\nresponse.write(content);\nresponse.end();\n```\n其中，writeHead里面的第二个参数，有多种格式，分别是：\napplication/xml 、 text/xml、text/html、text/plain\n经查：\ntext/html是html格式的正文 \ntext/plain是无格式正文\ntext/xml忽略xml头所指定编码格式而默认采用us-ascii编码\napplication/xml会根据xml头指定的编码格式来编码：\n简单来说，html就是返回一个html，plain就是无格式的，写什么就是什么，xml就是一个xml文件；\n\n# 9.关于事件监听\n之前说到有\n```js\nfunction onRequest(request, response)\n```\n这样一个回调函数，其中request是请求，response是回应；\n根据推测，每次request的，都会触发至少一个data，一个end事件，因此应该监听这两个事件。（并且只有接受到data之后，才会接收到end事件）；\n我们之前是不监听的，只要有请求，就直接执行某个函数，而监听表示只有这些事件触发后，我们才会执行某一段代码。\n因此我们这么写：\n```js\nvar postData = \"\";\nrequest.setEncoding(\"utf8\");\nrequest.addListener(\"data\", function (postDataChunk) {      //data事件\n    postData += postDataChunk;\n    console.log(\"Received POST data chunk \" + postDataChunk + \".\");\n    console.log(\"————————\");\n})\nrequest.addListener(\"end\", function () {\n    route(handle, pathname, response, postData);\n})\n```\n表示监听的编码类型为UTF8，监听data事件，把内容加起来，监听end事件，把加起来的内容发送出去。\n直到end事件触发时，才会执行之前写的route函数（也就是那个写回复的函数）。\n \nPS：\n根据我的测试，如果data事件注释掉，end事件会无法执行，准确的说，是无法访问任何url的。\n但是，如果不注释掉，只是普通的访问的话，可是又不会触发data监听事件里面的console.log代码，很奇怪； \n另外，注释掉end事件，留着data事件，也会卡住； ","source":"_posts/nodejs-1.md","raw":"---\ntitle: Node.js(1) 封装,调用,执行,访问路径,http,函数编程,等待函数,事件监听\ndate: 2016-10-1 15:53:07\ntags: [nodejs,node.js]\n---\n# 1.如何封装一个模块；\n首先，我们建立一个js文件，例如命名为test.js；\n然后在里面写一个函数，函数名任意；\n然后通过exports.变量名，将函数赋值给这个变量；\n如代码：\n<!-- more -->\n```js\nfunction test(){    //请注意这个函数名\n    console.log(\"1\");\n}\nexports.testBegin= test;   //等号后面的test，指的是上面的函数名。等号前面的testBegin，是调用时的函数名（注意区别）\n```\n这个test.js的文件就写完了，这是一个模块，他的效果是调用该函数后，输出1；\n另外，不要问我这个exports是什么，我暂时也不知道。\n\n# 2.如何调用一个模块\n在封装模块的前提下，我们新建一个文件，例如a.js，来调用之前封装的test.js模块；\n方法是：\n```js\nvar test = require(\"./test\");   //调用该模块\ntest.testBegin();   //调用该模块的方法（注意方法名是test.js中exports后面的变量名）；\n```\n注意调用时的方法名，并非是test.js中的函数名test；\n\n# 3.如何执行一个Node.js的文件\n我们现在需要执行a.js这个调用了封装模块的文件了，执行他的方法，和执行普通的node.js的文件的方法并没有什么不同；\n在a.js这个文件的目录下，打开命令行。windows是shift＋鼠标右键；\n像下面这样输入即可：\n然后将输出1，感觉执行执行Python文件那样\n\n# 4.获得访问者想要访问的路径\n![](http://img.blog.csdn.net/20160602214711294)\n首先上图，其中pathname指的是路径；而query指的是请求之类的东西（暂时不关心）；\n假如我们想要获得pathname（即字符串“start”），我们该怎么办呢？\n方法：\n* ①首先，需要获取访问者需要访问的路径，方法是通过http的方法createServer\n具体来说：\n我们先require一个http模块：\n```js\nvar http = require(\"http\");\n```\n然后调用其方法，创建一个服务器：\n```js\nhttp.createServer(onRequest).listen(8888);\n```\n注意，这个方法监听的是8888端口，其参数是一个函数；\n \n然后我们书写这个函数的内容：\n```js\nfunction onRequest(request, response) {\n    console.log(request.url);\n}\n```\n这个函数的第一个参数request是用户访问的一些东西，我们需要的是其url变量；假设我们访问地址是这样的：\n``http://127.0.0.1:8888/index/loading?start``\n请注意红色部分，那么服务器在console.log输出的是\n```\n/index/loading?start\n```\n\n* ②我们下来要对这个url做点什么了；\n虽然直接对上面那个参数进行操纵也可以，但这太笨了，让我们来require一个新的模块url\n```js\nvar url = require(\"url\");\n```\n\n* ③调用这个新模块的方法parse，将第一步获得的url地址，作为其参数，再调用其方法pathname，就可以获得我们想要的东西了；\n具体而言，需要这么一段代码：\n```js\nvar pathname = url.parse(request.url).pathname;\n```\n这个pathname就是我们需要的东西了；\n \n把所有代码综合起来，是这样的：\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" recived.\");\n    response.writeHead(200, {\"Content-type\": \"text/plain\"});\n    response.write(\"Hello word!\");\n    response.end();\n}\nhttp.createServer(onRequest).listen(8888);\nconsole.log(\"Server has started!\");\n```\n然后运行之：\n \n我们随便访问一个本地的地址：\n``http://127.0.0.1:8888/index/loading?start``\n \n发现，/index/loding这部分被正常的显示出来了。\n另外，favicon.ico是该网站的图标，据说很多服务器是会默认读取的；\n \n假如我们直接访问：``http://127.0.0.1:8888``，显示是这样的\n![](http://img.blog.csdn.net/20160602214745169)\n\n# 5.关于http\n我们之前有了这么一段代码（已delete掉无关部分）：\n```js\nvar http = require(\"http\");\nfunction onRequest(request, response) {\n    response.writeHead(200, {\"Content-type\": \"text/plain\"});\n    response.write(\"Hello word!\");\n    response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n其中，http调用了NodeJs自带的一个模块“http”，而这个模块是一个服务器模块；\n而createServer是这个模块的方法，效果是返回一个对象，而这个对象有一个listen的方法；\n当然，由于你和我，也许都是新手，因此我们尚没有搞清楚这个到底是怎么运作的；但如果有一定经验的话，可以猜到，这个listen是监听，监听的是8888端口；如果去掉这部分会怎么样？经过测试，服务器并没有运行，如图：\n \n而onRequest函数呢，从名字可以猜到，这个函数的效果是“当请求的时候做些什么”，我们来看其函数：\n```js\nfunction onRequest(request, response) {\n    response.writeHead(200);\n    response.write(\"Hello word!\");\n    response.end();\n}\n```\n这个函数有两个参数：request和response，顾名思义，请求和响应。\nrequest请求指用户访问的时候，相关的信息；\nresponse指服务器的响应，会做些什么；这个函数的三个方法，都是response相关的；\n \n* 第一个：response.writeHead方法，具体来说，就是HTTP响应报文的头行；\n这个指HTTP通信的响应报文中的头部分，如果没有基础的话，暂时不需要关心，写200即可，这里的200，是约定俗称的请求成功时的返回；\n具体搜：\n``response.writeHead(statusCode,[reasonPhrase], [headers])``\n \n* 第二个：response.write方法，具体来说，是HTTP响应报文；\n简单理解，负责发送正文中的一部分，可以同时发送多个不一样的；\n在上面搜：\n``response.write(chunk,encoding='utf8')``\n \n* 第三个：response.end方法，具体来说每一个响应的结束，必须要调用这个方法，然后服务器会认为这条信息已经发送完毕了。\n\n综合效果来说，当我们访问：``http://127.0.0.1:8888/``时，浏览器会出现：\n``Hello world!``\n\n# 6.函数式编程\n所谓函数式编程，简单的理解，就是将函数作为参数传递；\n目前有四个文件：\n``index.js``\n```js\nvar server = require(\"./server\");   //调用该模块\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {};\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\n\nserver.start(router.route, handle);   //调用该模块的方法（注意方法名是test.js中exports后面的变量名）\n```\n\n``server.js``\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start(route, handle) {\n    var count = 0;\n\n    function onRequest(request, response) {\n        console.log(count++ + \"#:\");\n        var pathname = url.parse(request.url).pathname;\n        console.log(\"Request for \" + pathname + \" recived.\");\n\n        route(handle, pathname);    //来源于上面的start的参数\n\n        response.writeHead(200);\n        response.write(\"Hello word!\");\n        response.end();\n    }\n\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started!\");\n}\nexports.start = start;\n```\n\n``router.js``\n```js\nfunction route(handle, pathname) {\n    console.log(\"About to route a request for \" + pathname);\n    if (typeof handle[pathname] === 'function') {\n        handle[pathname]();\n    } else {\n        console.log(\"No request handler found for \" + pathname);\n    }\n}\n\nexports.route = route;\n```\n\n``requestHandler.js``\n```js\nfunction start() {\n    console.log(\"Request handler 'start' was called\");\n}\n\nfunction upload() {\n    console.log(\"Request handler 'upload' was called\");\n}\n\nexports.start = start;\nexports.upload = upload;\n```\n分析：\n* ①首先看index.js，他调用了3个模块，然后声明了一个空的对象，然后给这个对象声明了几个不同的变量（准确的说是函数变量），他们分别对应requestHandlers这个模块的不同函数；\n \n调用server这个模块的start方法，传两个参数，分别是router模块的route方法和对象handle（包含3个函数变量）；\n \n* ②由于调用了server模块的start方法，因此我们来看server模块；\n在server模块中，调用了两个模块，分别是http和url，这两个都是NodeJs自带的，具体里面的内容就不一一分析了（前面已经说明过了）。\n \n在servre模块的start函数（也是index.js调用的方法），有两个参数，第一个参数是route函数（来源于router模块），第二个参数是一个对象（来源于index.js）。\n \n而在start函数中，调用了其第一个参数（route函数），由于这个参数是函数，因此运行它，给其两个参数，分别是handle（来源于index.js的对象）和pathname（来源于当前模块，是用户请求的路径）；\n \n因此接下来我们看router模块的route函数，记得，这个函数传递了一个对象和一个路径；\n \n* ③在router模块中，传递了两个参数，并进行了一次判断；\n判断的逻辑是这样的，第一个参数（是一个对象），其加上下标后的值，如果是类型是函数，那么执行这个函数；如果不是函数，提示没找到该句柄；\n \n请注意，为什么说这个对象加上下标是函数呢，原因在于index中声明的这个对象，而这个对象的三个带下标的变量都是函数；\n \n而这三个被执行函数来源于哪呢？来源于index里加载的模块requestHandlers，那么最后让我们来看看这个模块；\n \n* ④在这个模块里，只有两个函数，分别是start和upload；\n这两个函数输出不同的内容（一个关键字是start，另一个关键字是upload）；\n请回想之前的下标，下标分为三个，分别是空（/），start下标（/start），和upload下标（/upload），因此当用户访问根目录、start目录、和upload目录时，调用对应的方法，而若访问其他目录（包括start目录的子目录等时，提示错误——来源于router模块）；\n![](http://img.blog.csdn.net/20160602214830419)\n现在回顾这种模式是怎么实现的：\n![](http://img.blog.csdn.net/20160602214835576)\n\n# 7.等待函数\n```js\nfunction sleep(milliSeconds) {\n    var startTime = new Date().getTime();\n    while (new Date() < startTime + milliSeconds);  //等待参数的时间\n}\n```\n传的参数是毫秒，在这个时间前，无法执行下一句代码，类似C++的Sleep()函数\n\n# 8.返回的两种格式\n```js\nresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\nresponse.write(content);\nresponse.end();\n```\n其中，writeHead里面的第二个参数，有多种格式，分别是：\napplication/xml 、 text/xml、text/html、text/plain\n经查：\ntext/html是html格式的正文 \ntext/plain是无格式正文\ntext/xml忽略xml头所指定编码格式而默认采用us-ascii编码\napplication/xml会根据xml头指定的编码格式来编码：\n简单来说，html就是返回一个html，plain就是无格式的，写什么就是什么，xml就是一个xml文件；\n\n# 9.关于事件监听\n之前说到有\n```js\nfunction onRequest(request, response)\n```\n这样一个回调函数，其中request是请求，response是回应；\n根据推测，每次request的，都会触发至少一个data，一个end事件，因此应该监听这两个事件。（并且只有接受到data之后，才会接收到end事件）；\n我们之前是不监听的，只要有请求，就直接执行某个函数，而监听表示只有这些事件触发后，我们才会执行某一段代码。\n因此我们这么写：\n```js\nvar postData = \"\";\nrequest.setEncoding(\"utf8\");\nrequest.addListener(\"data\", function (postDataChunk) {      //data事件\n    postData += postDataChunk;\n    console.log(\"Received POST data chunk \" + postDataChunk + \".\");\n    console.log(\"————————\");\n})\nrequest.addListener(\"end\", function () {\n    route(handle, pathname, response, postData);\n})\n```\n表示监听的编码类型为UTF8，监听data事件，把内容加起来，监听end事件，把加起来的内容发送出去。\n直到end事件触发时，才会执行之前写的route函数（也就是那个写回复的函数）。\n \nPS：\n根据我的测试，如果data事件注释掉，end事件会无法执行，准确的说，是无法访问任何url的。\n但是，如果不注释掉，只是普通的访问的话，可是又不会触发data监听事件里面的console.log代码，很奇怪； \n另外，注释掉end事件，留着data事件，也会卡住； ","slug":"nodejs-1","published":1,"updated":"2016-10-19T08:23:50.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7vw000d0wtu7o5ty79o","content":"<h1 id=\"1-如何封装一个模块；\"><a href=\"#1-如何封装一个模块；\" class=\"headerlink\" title=\"1.如何封装一个模块；\"></a>1.如何封装一个模块；</h1><p>首先，我们建立一个js文件，例如命名为test.js；<br>然后在里面写一个函数，函数名任意；<br>然后通过exports.变量名，将函数赋值给这个变量；<br>如代码：<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;    <span class=\"comment\">//请注意这个函数名</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.testBegin= test;   <span class=\"comment\">//等号后面的test，指的是上面的函数名。等号前面的testBegin，是调用时的函数名（注意区别）</span></div></pre></td></tr></table></figure></p>\n<p>这个test.js的文件就写完了，这是一个模块，他的效果是调用该函数后，输出1；<br>另外，不要问我这个exports是什么，我暂时也不知道。</p>\n<h1 id=\"2-如何调用一个模块\"><a href=\"#2-如何调用一个模块\" class=\"headerlink\" title=\"2.如何调用一个模块\"></a>2.如何调用一个模块</h1><p>在封装模块的前提下，我们新建一个文件，例如a.js，来调用之前封装的test.js模块；<br>方法是：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">\"./test\"</span>);   <span class=\"comment\">//调用该模块</span></div><div class=\"line\">test.testBegin();   <span class=\"comment\">//调用该模块的方法（注意方法名是test.js中exports后面的变量名）；</span></div></pre></td></tr></table></figure></p>\n<p>注意调用时的方法名，并非是test.js中的函数名test；</p>\n<h1 id=\"3-如何执行一个Node-js的文件\"><a href=\"#3-如何执行一个Node-js的文件\" class=\"headerlink\" title=\"3.如何执行一个Node.js的文件\"></a>3.如何执行一个Node.js的文件</h1><p>我们现在需要执行a.js这个调用了封装模块的文件了，执行他的方法，和执行普通的node.js的文件的方法并没有什么不同；<br>在a.js这个文件的目录下，打开命令行。windows是shift＋鼠标右键；<br>像下面这样输入即可：<br>然后将输出1，感觉执行执行Python文件那样</p>\n<h1 id=\"4-获得访问者想要访问的路径\"><a href=\"#4-获得访问者想要访问的路径\" class=\"headerlink\" title=\"4.获得访问者想要访问的路径\"></a>4.获得访问者想要访问的路径</h1><p><img src=\"http://img.blog.csdn.net/20160602214711294\" alt=\"\"><br>首先上图，其中pathname指的是路径；而query指的是请求之类的东西（暂时不关心）；<br>假如我们想要获得pathname（即字符串“start”），我们该怎么办呢？<br>方法：</p>\n<ul>\n<li>①首先，需要获取访问者需要访问的路径，方法是通过http的方法createServer<br>具体来说：<br>我们先require一个http模块：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后调用其方法，创建一个服务器：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>注意，这个方法监听的是8888端口，其参数是一个函数；</p>\n<p>然后我们书写这个函数的内容：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(request.url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数的第一个参数request是用户访问的一些东西，我们需要的是其url变量；假设我们访问地址是这样的：<br><code>http://127.0.0.1:8888/index/loading?start</code><br>请注意红色部分，那么服务器在console.log输出的是<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/index/loading?start</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>②我们下来要对这个url做点什么了；<br>虽然直接对上面那个参数进行操纵也可以，但这太笨了，让我们来require一个新的模块url</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>③调用这个新模块的方法parse，将第一步获得的url地址，作为其参数，再调用其方法pathname，就可以获得我们想要的东西了；<br>具体而言，需要这么一段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个pathname就是我们需要的东西了；</p>\n<p>把所有代码综合起来，是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" recived.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started!\"</span>);</div></pre></td></tr></table></figure></p>\n<p>然后运行之：</p>\n<p>我们随便访问一个本地的地址：<br><code>http://127.0.0.1:8888/index/loading?start</code></p>\n<p>发现，/index/loding这部分被正常的显示出来了。<br>另外，favicon.ico是该网站的图标，据说很多服务器是会默认读取的；</p>\n<p>假如我们直接访问：<code>http://127.0.0.1:8888</code>，显示是这样的<br><img src=\"http://img.blog.csdn.net/20160602214745169\" alt=\"\"></p>\n<h1 id=\"5-关于http\"><a href=\"#5-关于http\" class=\"headerlink\" title=\"5.关于http\"></a>5.关于http</h1><p>我们之前有了这么一段代码（已delete掉无关部分）：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>其中，http调用了NodeJs自带的一个模块“http”，而这个模块是一个服务器模块；<br>而createServer是这个模块的方法，效果是返回一个对象，而这个对象有一个listen的方法；<br>当然，由于你和我，也许都是新手，因此我们尚没有搞清楚这个到底是怎么运作的；但如果有一定经验的话，可以猜到，这个listen是监听，监听的是8888端口；如果去掉这部分会怎么样？经过测试，服务器并没有运行，如图：</p>\n<p>而onRequest函数呢，从名字可以猜到，这个函数的效果是“当请求的时候做些什么”，我们来看其函数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数有两个参数：request和response，顾名思义，请求和响应。<br>request请求指用户访问的时候，相关的信息；<br>response指服务器的响应，会做些什么；这个函数的三个方法，都是response相关的；</p>\n<ul>\n<li><p>第一个：response.writeHead方法，具体来说，就是HTTP响应报文的头行；<br>这个指HTTP通信的响应报文中的头部分，如果没有基础的话，暂时不需要关心，写200即可，这里的200，是约定俗称的请求成功时的返回；<br>具体搜：<br><code>response.writeHead(statusCode,[reasonPhrase], [headers])</code></p>\n</li>\n<li><p>第二个：response.write方法，具体来说，是HTTP响应报文；<br>简单理解，负责发送正文中的一部分，可以同时发送多个不一样的；<br>在上面搜：<br><code>response.write(chunk,encoding=&#39;utf8&#39;)</code></p>\n</li>\n<li><p>第三个：response.end方法，具体来说每一个响应的结束，必须要调用这个方法，然后服务器会认为这条信息已经发送完毕了。</p>\n</li>\n</ul>\n<p>综合效果来说，当我们访问：<code>http://127.0.0.1:8888/</code>时，浏览器会出现：<br><code>Hello world!</code></p>\n<h1 id=\"6-函数式编程\"><a href=\"#6-函数式编程\" class=\"headerlink\" title=\"6.函数式编程\"></a>6.函数式编程</h1><p>所谓函数式编程，简单的理解，就是将函数作为参数传递；<br>目前有四个文件：<br><code>index.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);   <span class=\"comment\">//调用该模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);   <span class=\"comment\">//调用该模块的方法（注意方法名是test.js中exports后面的变量名）</span></div></pre></td></tr></table></figure></p>\n<p><code>server.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(count++ + <span class=\"string\">\"#:\"</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" recived.\"</span>);</div><div class=\"line\"></div><div class=\"line\">        route(handle, pathname);    <span class=\"comment\">//来源于上面的start的参数</span></div><div class=\"line\"></div><div class=\"line\">        response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">        response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">        response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p><code>router.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        handle[pathname]();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p><code>requestHandler.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure></p>\n<p>分析：</p>\n<ul>\n<li>①首先看index.js，他调用了3个模块，然后声明了一个空的对象，然后给这个对象声明了几个不同的变量（准确的说是函数变量），他们分别对应requestHandlers这个模块的不同函数；</li>\n</ul>\n<p>调用server这个模块的start方法，传两个参数，分别是router模块的route方法和对象handle（包含3个函数变量）；</p>\n<ul>\n<li>②由于调用了server模块的start方法，因此我们来看server模块；<br>在server模块中，调用了两个模块，分别是http和url，这两个都是NodeJs自带的，具体里面的内容就不一一分析了（前面已经说明过了）。</li>\n</ul>\n<p>在servre模块的start函数（也是index.js调用的方法），有两个参数，第一个参数是route函数（来源于router模块），第二个参数是一个对象（来源于index.js）。</p>\n<p>而在start函数中，调用了其第一个参数（route函数），由于这个参数是函数，因此运行它，给其两个参数，分别是handle（来源于index.js的对象）和pathname（来源于当前模块，是用户请求的路径）；</p>\n<p>因此接下来我们看router模块的route函数，记得，这个函数传递了一个对象和一个路径；</p>\n<ul>\n<li>③在router模块中，传递了两个参数，并进行了一次判断；<br>判断的逻辑是这样的，第一个参数（是一个对象），其加上下标后的值，如果是类型是函数，那么执行这个函数；如果不是函数，提示没找到该句柄；</li>\n</ul>\n<p>请注意，为什么说这个对象加上下标是函数呢，原因在于index中声明的这个对象，而这个对象的三个带下标的变量都是函数；</p>\n<p>而这三个被执行函数来源于哪呢？来源于index里加载的模块requestHandlers，那么最后让我们来看看这个模块；</p>\n<ul>\n<li>④在这个模块里，只有两个函数，分别是start和upload；<br>这两个函数输出不同的内容（一个关键字是start，另一个关键字是upload）；<br>请回想之前的下标，下标分为三个，分别是空（/），start下标（/start），和upload下标（/upload），因此当用户访问根目录、start目录、和upload目录时，调用对应的方法，而若访问其他目录（包括start目录的子目录等时，提示错误——来源于router模块）；<br><img src=\"http://img.blog.csdn.net/20160602214830419\" alt=\"\"><br>现在回顾这种模式是怎么实现的：<br><img src=\"http://img.blog.csdn.net/20160602214835576\" alt=\"\"></li>\n</ul>\n<h1 id=\"7-等待函数\"><a href=\"#7-等待函数\" class=\"headerlink\" title=\"7.等待函数\"></a>7.等待函数</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">milliSeconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &lt; startTime + milliSeconds);  <span class=\"comment\">//等待参数的时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>传的参数是毫秒，在这个时间前，无法执行下一句代码，类似C++的Sleep()函数</p>\n<h1 id=\"8-返回的两种格式\"><a href=\"#8-返回的两种格式\" class=\"headerlink\" title=\"8.返回的两种格式\"></a>8.返回的两种格式</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">response.write(content);</div><div class=\"line\">response.end();</div></pre></td></tr></table></figure>\n<p>其中，writeHead里面的第二个参数，有多种格式，分别是：<br>application/xml 、 text/xml、text/html、text/plain<br>经查：<br>text/html是html格式的正文<br>text/plain是无格式正文<br>text/xml忽略xml头所指定编码格式而默认采用us-ascii编码<br>application/xml会根据xml头指定的编码格式来编码：<br>简单来说，html就是返回一个html，plain就是无格式的，写什么就是什么，xml就是一个xml文件；</p>\n<h1 id=\"9-关于事件监听\"><a href=\"#9-关于事件监听\" class=\"headerlink\" title=\"9.关于事件监听\"></a>9.关于事件监听</h1><p>之前说到有<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>)</span></div></pre></td></tr></table></figure></p>\n<p>这样一个回调函数，其中request是请求，response是回应；<br>根据推测，每次request的，都会触发至少一个data，一个end事件，因此应该监听这两个事件。（并且只有接受到data之后，才会接收到end事件）；<br>我们之前是不监听的，只要有请求，就直接执行某个函数，而监听表示只有这些事件触发后，我们才会执行某一段代码。<br>因此我们这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</div><div class=\"line\">request.setEncoding(<span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">postDataChunk</span>) </span>&#123;      <span class=\"comment\">//data事件</span></div><div class=\"line\">    postData += postDataChunk;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received POST data chunk \"</span> + postDataChunk + <span class=\"string\">\".\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"————————\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    route(handle, pathname, response, postData);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>表示监听的编码类型为UTF8，监听data事件，把内容加起来，监听end事件，把加起来的内容发送出去。<br>直到end事件触发时，才会执行之前写的route函数（也就是那个写回复的函数）。</p>\n<p>PS：<br>根据我的测试，如果data事件注释掉，end事件会无法执行，准确的说，是无法访问任何url的。<br>但是，如果不注释掉，只是普通的访问的话，可是又不会触发data监听事件里面的console.log代码，很奇怪；<br>另外，注释掉end事件，留着data事件，也会卡住； </p>\n","excerpt":"<h1 id=\"1-如何封装一个模块；\"><a href=\"#1-如何封装一个模块；\" class=\"headerlink\" title=\"1.如何封装一个模块；\"></a>1.如何封装一个模块；</h1><p>首先，我们建立一个js文件，例如命名为test.js；<br>然后在里面写一个函数，函数名任意；<br>然后通过exports.变量名，将函数赋值给这个变量；<br>如代码：<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;    <span class=\"comment\">//请注意这个函数名</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.testBegin= test;   <span class=\"comment\">//等号后面的test，指的是上面的函数名。等号前面的testBegin，是调用时的函数名（注意区别）</span></div></pre></td></tr></table></figure></p>\n<p>这个test.js的文件就写完了，这是一个模块，他的效果是调用该函数后，输出1；<br>另外，不要问我这个exports是什么，我暂时也不知道。</p>\n<h1 id=\"2-如何调用一个模块\"><a href=\"#2-如何调用一个模块\" class=\"headerlink\" title=\"2.如何调用一个模块\"></a>2.如何调用一个模块</h1><p>在封装模块的前提下，我们新建一个文件，例如a.js，来调用之前封装的test.js模块；<br>方法是：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">\"./test\"</span>);   <span class=\"comment\">//调用该模块</span></div><div class=\"line\">test.testBegin();   <span class=\"comment\">//调用该模块的方法（注意方法名是test.js中exports后面的变量名）；</span></div></pre></td></tr></table></figure></p>\n<p>注意调用时的方法名，并非是test.js中的函数名test；</p>\n<h1 id=\"3-如何执行一个Node-js的文件\"><a href=\"#3-如何执行一个Node-js的文件\" class=\"headerlink\" title=\"3.如何执行一个Node.js的文件\"></a>3.如何执行一个Node.js的文件</h1><p>我们现在需要执行a.js这个调用了封装模块的文件了，执行他的方法，和执行普通的node.js的文件的方法并没有什么不同；<br>在a.js这个文件的目录下，打开命令行。windows是shift＋鼠标右键；<br>像下面这样输入即可：<br>然后将输出1，感觉执行执行Python文件那样</p>\n<h1 id=\"4-获得访问者想要访问的路径\"><a href=\"#4-获得访问者想要访问的路径\" class=\"headerlink\" title=\"4.获得访问者想要访问的路径\"></a>4.获得访问者想要访问的路径</h1><p><img src=\"http://img.blog.csdn.net/20160602214711294\" alt=\"\"><br>首先上图，其中pathname指的是路径；而query指的是请求之类的东西（暂时不关心）；<br>假如我们想要获得pathname（即字符串“start”），我们该怎么办呢？<br>方法：</p>\n<ul>\n<li>①首先，需要获取访问者需要访问的路径，方法是通过http的方法createServer<br>具体来说：<br>我们先require一个http模块：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后调用其方法，创建一个服务器：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>注意，这个方法监听的是8888端口，其参数是一个函数；</p>\n<p>然后我们书写这个函数的内容：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(request.url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数的第一个参数request是用户访问的一些东西，我们需要的是其url变量；假设我们访问地址是这样的：<br><code>http://127.0.0.1:8888/index/loading?start</code><br>请注意红色部分，那么服务器在console.log输出的是<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/index/loading?start</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>②我们下来要对这个url做点什么了；<br>虽然直接对上面那个参数进行操纵也可以，但这太笨了，让我们来require一个新的模块url</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>③调用这个新模块的方法parse，将第一步获得的url地址，作为其参数，再调用其方法pathname，就可以获得我们想要的东西了；<br>具体而言，需要这么一段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个pathname就是我们需要的东西了；</p>\n<p>把所有代码综合起来，是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" recived.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started!\"</span>);</div></pre></td></tr></table></figure></p>\n<p>然后运行之：</p>\n<p>我们随便访问一个本地的地址：<br><code>http://127.0.0.1:8888/index/loading?start</code></p>\n<p>发现，/index/loding这部分被正常的显示出来了。<br>另外，favicon.ico是该网站的图标，据说很多服务器是会默认读取的；</p>\n<p>假如我们直接访问：<code>http://127.0.0.1:8888</code>，显示是这样的<br><img src=\"http://img.blog.csdn.net/20160602214745169\" alt=\"\"></p>\n<h1 id=\"5-关于http\"><a href=\"#5-关于http\" class=\"headerlink\" title=\"5.关于http\"></a>5.关于http</h1><p>我们之前有了这么一段代码（已delete掉无关部分）：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>其中，http调用了NodeJs自带的一个模块“http”，而这个模块是一个服务器模块；<br>而createServer是这个模块的方法，效果是返回一个对象，而这个对象有一个listen的方法；<br>当然，由于你和我，也许都是新手，因此我们尚没有搞清楚这个到底是怎么运作的；但如果有一定经验的话，可以猜到，这个listen是监听，监听的是8888端口；如果去掉这部分会怎么样？经过测试，服务器并没有运行，如图：</p>\n<p>而onRequest函数呢，从名字可以猜到，这个函数的效果是“当请求的时候做些什么”，我们来看其函数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数有两个参数：request和response，顾名思义，请求和响应。<br>request请求指用户访问的时候，相关的信息；<br>response指服务器的响应，会做些什么；这个函数的三个方法，都是response相关的；</p>\n<ul>\n<li><p>第一个：response.writeHead方法，具体来说，就是HTTP响应报文的头行；<br>这个指HTTP通信的响应报文中的头部分，如果没有基础的话，暂时不需要关心，写200即可，这里的200，是约定俗称的请求成功时的返回；<br>具体搜：<br><code>response.writeHead(statusCode,[reasonPhrase], [headers])</code></p>\n</li>\n<li><p>第二个：response.write方法，具体来说，是HTTP响应报文；<br>简单理解，负责发送正文中的一部分，可以同时发送多个不一样的；<br>在上面搜：<br><code>response.write(chunk,encoding=&#39;utf8&#39;)</code></p>\n</li>\n<li><p>第三个：response.end方法，具体来说每一个响应的结束，必须要调用这个方法，然后服务器会认为这条信息已经发送完毕了。</p>\n</li>\n</ul>\n<p>综合效果来说，当我们访问：<code>http://127.0.0.1:8888/</code>时，浏览器会出现：<br><code>Hello world!</code></p>\n<h1 id=\"6-函数式编程\"><a href=\"#6-函数式编程\" class=\"headerlink\" title=\"6.函数式编程\"></a>6.函数式编程</h1><p>所谓函数式编程，简单的理解，就是将函数作为参数传递；<br>目前有四个文件：<br><code>index.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);   <span class=\"comment\">//调用该模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);   <span class=\"comment\">//调用该模块的方法（注意方法名是test.js中exports后面的变量名）</span></div></pre></td></tr></table></figure></p>\n<p><code>server.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(count++ + <span class=\"string\">\"#:\"</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" recived.\"</span>);</div><div class=\"line\"></div><div class=\"line\">        route(handle, pathname);    <span class=\"comment\">//来源于上面的start的参数</span></div><div class=\"line\"></div><div class=\"line\">        response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">        response.write(<span class=\"string\">\"Hello word!\"</span>);</div><div class=\"line\">        response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p><code>router.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        handle[pathname]();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p><code>requestHandler.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure></p>\n<p>分析：</p>\n<ul>\n<li>①首先看index.js，他调用了3个模块，然后声明了一个空的对象，然后给这个对象声明了几个不同的变量（准确的说是函数变量），他们分别对应requestHandlers这个模块的不同函数；</li>\n</ul>\n<p>调用server这个模块的start方法，传两个参数，分别是router模块的route方法和对象handle（包含3个函数变量）；</p>\n<ul>\n<li>②由于调用了server模块的start方法，因此我们来看server模块；<br>在server模块中，调用了两个模块，分别是http和url，这两个都是NodeJs自带的，具体里面的内容就不一一分析了（前面已经说明过了）。</li>\n</ul>\n<p>在servre模块的start函数（也是index.js调用的方法），有两个参数，第一个参数是route函数（来源于router模块），第二个参数是一个对象（来源于index.js）。</p>\n<p>而在start函数中，调用了其第一个参数（route函数），由于这个参数是函数，因此运行它，给其两个参数，分别是handle（来源于index.js的对象）和pathname（来源于当前模块，是用户请求的路径）；</p>\n<p>因此接下来我们看router模块的route函数，记得，这个函数传递了一个对象和一个路径；</p>\n<ul>\n<li>③在router模块中，传递了两个参数，并进行了一次判断；<br>判断的逻辑是这样的，第一个参数（是一个对象），其加上下标后的值，如果是类型是函数，那么执行这个函数；如果不是函数，提示没找到该句柄；</li>\n</ul>\n<p>请注意，为什么说这个对象加上下标是函数呢，原因在于index中声明的这个对象，而这个对象的三个带下标的变量都是函数；</p>\n<p>而这三个被执行函数来源于哪呢？来源于index里加载的模块requestHandlers，那么最后让我们来看看这个模块；</p>\n<ul>\n<li>④在这个模块里，只有两个函数，分别是start和upload；<br>这两个函数输出不同的内容（一个关键字是start，另一个关键字是upload）；<br>请回想之前的下标，下标分为三个，分别是空（/），start下标（/start），和upload下标（/upload），因此当用户访问根目录、start目录、和upload目录时，调用对应的方法，而若访问其他目录（包括start目录的子目录等时，提示错误——来源于router模块）；<br><img src=\"http://img.blog.csdn.net/20160602214830419\" alt=\"\"><br>现在回顾这种模式是怎么实现的：<br><img src=\"http://img.blog.csdn.net/20160602214835576\" alt=\"\"></li>\n</ul>\n<h1 id=\"7-等待函数\"><a href=\"#7-等待函数\" class=\"headerlink\" title=\"7.等待函数\"></a>7.等待函数</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">milliSeconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &lt; startTime + milliSeconds);  <span class=\"comment\">//等待参数的时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>传的参数是毫秒，在这个时间前，无法执行下一句代码，类似C++的Sleep()函数</p>\n<h1 id=\"8-返回的两种格式\"><a href=\"#8-返回的两种格式\" class=\"headerlink\" title=\"8.返回的两种格式\"></a>8.返回的两种格式</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">response.write(content);</div><div class=\"line\">response.end();</div></pre></td></tr></table></figure>\n<p>其中，writeHead里面的第二个参数，有多种格式，分别是：<br>application/xml 、 text/xml、text/html、text/plain<br>经查：<br>text/html是html格式的正文<br>text/plain是无格式正文<br>text/xml忽略xml头所指定编码格式而默认采用us-ascii编码<br>application/xml会根据xml头指定的编码格式来编码：<br>简单来说，html就是返回一个html，plain就是无格式的，写什么就是什么，xml就是一个xml文件；</p>\n<h1 id=\"9-关于事件监听\"><a href=\"#9-关于事件监听\" class=\"headerlink\" title=\"9.关于事件监听\"></a>9.关于事件监听</h1><p>之前说到有<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>)</span></div></pre></td></tr></table></figure></p>\n<p>这样一个回调函数，其中request是请求，response是回应；<br>根据推测，每次request的，都会触发至少一个data，一个end事件，因此应该监听这两个事件。（并且只有接受到data之后，才会接收到end事件）；<br>我们之前是不监听的，只要有请求，就直接执行某个函数，而监听表示只有这些事件触发后，我们才会执行某一段代码。<br>因此我们这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</div><div class=\"line\">request.setEncoding(<span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">postDataChunk</span>) </span>&#123;      <span class=\"comment\">//data事件</span></div><div class=\"line\">    postData += postDataChunk;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received POST data chunk \"</span> + postDataChunk + <span class=\"string\">\".\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"————————\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    route(handle, pathname, response, postData);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>表示监听的编码类型为UTF8，监听data事件，把内容加起来，监听end事件，把加起来的内容发送出去。<br>直到end事件触发时，才会执行之前写的route函数（也就是那个写回复的函数）。</p>\n<p>PS：<br>根据我的测试，如果data事件注释掉，end事件会无法执行，准确的说，是无法访问任何url的。<br>但是，如果不注释掉，只是普通的访问的话，可是又不会触发data监听事件里面的console.log代码，很奇怪；<br>另外，注释掉end事件，留着data事件，也会卡住； </p>"},{"title":"Node.js(2) MySQL","date":"2016-10-02T08:22:52.000Z","_content":"MySQL是mysql-5.6.17\nnodejs是目前最新版。\n\n# ①安装nodejs的mysql模块\n如果你的nodejs的版本比较新的话，应该不存在安装路径问题；\n在你想要运行nodejs文件的根路径，启动命令行（shift+鼠标右键）；\n输入：\n<!-- more -->\n``npm install mysql``\n \n正常的话，应该出的是一个带树形结构的图，比如这样：\n![](http://p1.bpimg.com/567571/8a56c4679605be87.png)\n\n如果差别过大，可能是出问题了，那么新建一个js文件，把以下内容复制粘贴进去\n注意修改mysql的账号名、密码，而端口号3306是默认的；\n```js\nvar mysql  = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar connection = mysql.createConnection({  \n    host     : '127.0.0.1',       //主机  \n    user     : 'root',               //MySQL认证用户名  \n    password : '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n});  \n//创建一个connection  \nconnection.connect(function(err){  \n    if(err){  \n        console.log('[query] - :'+err);  \n        return;  \n    }  \n    console.log('[connection connect]  succeed!');  \n});  \n//执行SQL语句  \nconnection.query('SELECT 1 + 1 AS solution', function(err, rows, fields) {  \n    if (err) {  \n        console.log('[query] - :'+err);  \n        return;  \n    }  \n    console.log('The solution is: ', rows[0].solution);  \n});  \n//关闭connection  \nconnection.end(function(err){  \n    if(err){  \n        return;  \n    }  \n    console.log('[connection end] succeed!');  \n});  \n```\n如果正常运行的话，可以从控制台console.log出来的消息确认（具体请看代码）；\n\n# ②mysql的增add：\n假如我想在mysql里，数据库（database）名为test，表名为a_test_table插入数据。\n假设你只装了mysql，却不懂mysql，那么这里我推荐你安装mysql-5.6.17-winx64这个版本，这样可以保证代码正常执行。\n然后进入mysql，默认账号名为root，默认密码为空；\n【以下代码注意结尾的分号，分号表示一条命令的结束】\n \n输入showdatabases;\n可以查看库名。应该有一个test库，如下图：\n![](http://p1.bpimg.com/567571/e7ee7e55bcf03dd5.png)\n如果没有的话，请自行搜索如何创建一个库；\n然后输入usetest;\n进入test表；然后输入show tables;\n显示test库下面的所有表，如下图：\n![](http://p1.bpimg.com/567571/76a59ac469b33b45.png)\n\n当然，正常来说，你这里应该是空。于是我们需要建表，为了方便，建一个最简单的表，输入以下命令：\ncreate table a_test_table(\nid int,\nname varchar(20));\n创建一个表，他只有两个字段，分别是id（int类型表示数字），name（字符类型）。此时再打show tables;  便可以看到a_test_table这个表了；\n再输入elect* from a_test_table;\n查询表内容，会显示空：\n![](http://img.blog.csdn.net/20160612152004210)\n\n下来开始正文，如何在这个表里插入内容：\n首先，新建一个js文件，记得使用utf-8格式。\n下面是代码，具体请看注释：\n```js\nvar mysql = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar connection = mysql.createConnection({  \n    host: '127.0.0.1',       //主机地址  \n    user: 'root',               //MySQL认证用户名  \n    password: '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n    database: 'test',                //库名  \n});  \n//创建一个connection，即连接到mysql的对象，如果连接错误，会提示错误。  \nconnection.connect(function (err) {  \n    if (err) {  \n        console.log('[query] - :' + err);  \n        return;  \n    }  \n    console.log('[connection connect]  succeed!');  \n});  \n  \nvar userAddSql = 'INSERT INTO a_test_table(id, name) VALUES(?,?)';  \n/* \n这里实际上是一个mysql语句， \n关键是第三个a_table_test表示表名； \nid和name表示字段名； \n两个问号表示插入的值，如果不是问号，而是一个值，那么表示这个字段固定插入这个值 \n*/  \nvar userAddSql_value = [1, 'wddddd'];       //这里实际依次对应的是上面2个问号，因为id是int，所以第一个是数字，第二个是字符串  \n  \nconnection.query(userAddSql, userAddSql_value, function (err, result) {  \n    if (err) {  \n        console.log('[INSERT ERROR] - ', err.message);  \n        return;  \n    }  \n  \n    console.log('——————————————INSERT————————————————');  \n    console.log('INSERT ID: ', result);  \n    console.log('—————————————————————————————————');  \n})  \n  \n//关闭connection  \nconnection.end(function (err) {  \n    if (err) {  \n        return;  \n    }  \n    console.log('[connection end] succeed!');  \n});  \n```\n如果显示错误，请检查自己的nodejs代码，一般问题常发生在账号名、密码、库名、表名等。\n\n# ③查select：\n有没有发现代码的特点，他的关键是mysql的命令，只要我们更改命令，完全可以像直接在mysql里输入命令行一样操控mysql，例如，我们只需要改这么一段代码：\n```js\nvar userAddSql = 'SELECT * FORM a_test_table';\n```\n即使完全不动其他代码，那么回调函数也能正常运行，其表现应该是这样：\n![](http://img.blog.csdn.net/20160612152125384)\n当然，完全不改是不好的，但无论如何，我们需要的功能是实现了。\n另外，显而易见，我们需要对返回内容进行操纵，那么首先我们需要明确返回内容是什么？结论是，他是一个数组（从 [] 可以猜出），然后我们这个数组只有一项，因此加上下标[0]，假如我们需要获取name属性，那么就是result[0].name；\n总得来说，代码在之前的基础上这么修改：\n把\n```js\nconsole.log('INSERT ID: ', result);  \n```\n修改为：\n```js\nconsole.log(result[0].name);\n```\n然后再次执行js文件，显示结果应该是这样：\n![](http://img.blog.csdn.net/20160612152225291)\n\n# ④删delete\n是不是感觉很简单，让我们Go on\n这次我们要删除id=1的那一项（因为id是唯一的，不会删错）——虽然我们其实就一项\n在之前代码上继续修改：\n```js\nvar userAddSql = 'DELETE FROM a_test_table WHERE id = 1';  //之所以大写mysql的指令，是为了和数据区分，事实上不大写也是可以的\n```\n然后执行之；\n毫无疑问，代码会报错，但是并非我们删除命令错误了，而是因为之前的代码，会输出结果的name属性，显然咯，都被删除了，哪有name属性；\n为了证明我们删除命令并没错，在mysql里进行查询：\n![](http://img.blog.csdn.net/20160612152323055)\n我们可以发现，我们需要删除的那一项被删除了。\n\n# ⑤改update\n增删查改，我们只剩下改了。但是目前mysql表里没内容，我们需要重新加上一些mysql信息。\n一次插入多条数据：\n```js\nvar userAddSql_value = [[1, 'a'], [2, 'd']];  \n  \nfor (var i = 0; i < userAddSql_value.length; i++) {  \n    connection.query(userAddSql, userAddSql_value[i], function (err, result) {  \n        if (err) {  \n            console.log('[INSERT ERROR] - ', err.message);  \n            return;  \n        }  \n  \n        console.log('——————————————INSERT————————————————');  \n        console.log(result[0].name);  \n        console.log('—————————————————————————————————');  \n    })  \n}  \n```\n然后接下来，我们要修改数据了。\n我们这次的目的，是把id=1的项，name修改为pp\n需要注意的是，所有id=1的项，name属性都将被修改为pp（而不是仅仅只有一个）；\n```js\nvar userAddSql = 'UPDATE a_test_table SET name = ? WHERE id = ?';    \nvar userAddSql_value = [\"pp\", 1];   \nconnection.query(userAddSql, userAddSql_value, function (err, result) {  \n    if (err) {  \n        console.log('[INSERT ERROR] - ', err.message);  \n        return;  \n    }  \n  \n    console.log('——————————————INSERT————————————————');  \n    console.log('INSERT ID: ', result);  \n    console.log('—————————————————————————————————');  \n})  \n```\n运行之，然后再查表，正常的话，你会发现，id=1的项，其值被更为为了pp\n![](http://img.blog.csdn.net/20160612152440545)\n\n# ⑥断线重连\n按照说明，使用连接池的方法更好，不过既然看到了断线重连，虽然挺迷茫，但正常运行了（虽然并不明白，而且感觉有点出入），那就先用着\n代码这么写：\n```js\nvar mysql = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar db_config = mysql.createConnection({  \n    host: '127.0.0.1',       //主机地址  \n    user: 'root',               //MySQL认证用户名  \n    password: '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n    database: 'test',                //库名  \n});  \nvar connect;  \nfunction handleDisconnect() {  \n    connect = mysql.createConnection(db_config);    //创建连接（连接的设置是上面）  \n    connect.connect(function (err) {    //大概是指连接，  \n        if (err) {  \n            console.log(\"正在连接中：\" + new Date());  \n            setTimeout(handleDisconnect, 3000);  \n            return;  \n        }  \n        console.log(\"连接成功\");  \n        run();  \n    })  \n    connect.on('error', function (err) {  \n        console.log('db error', err);  \n        if (err.code === 'PROTOCOL_CONNECTION_SET') {  \n            handleDisconnect();  \n        } else {  \n            throw err;  \n        }  \n    })  \n}  \nhandleDisconnect();  \nfunction run() {  \n    db_config.connect(function (err) {  \n        if (err) {  \n            console.log('[query] - :' + err);  \n            return;  \n        }  \n        console.log('[connection connect]  succeed!');  \n    });  \n  \n    var userAddSql = 'UPDATE a_test_table SET name = ? WHERE id = ?';  \n    var userAddSql_value = [\"www\", 1];  \n  \n    db_config.query(userAddSql, userAddSql_value, function (err, result) {  \n        if (err) {  \n            console.log('[INSERT ERROR] - ', err.message);  \n            return;  \n        }  \n  \n        console.log('——————————————INSERT————————————————');  \n        console.log('INSERT ID: ', result);  \n        console.log('—————————————————————————————————');  \n    })  \n  \n  \n//关闭connection  \n    db_config.end(function (err) {  \n        if (err) {  \n            return;  \n        }  \n        console.log('[connection end] succeed!');  \n    });  \n}  \n```\n\n# ⑦连接池：\n然后我试了试连接池的方法：\n```js\nvar mysql = require('mysql');  \nvar pool = mysql.createPool({  \n    host: 'localhost',  \n    user: 'root',  \n    password: '',  \n    database: 'test',  \n    debug: false,  \n});  \n  \nvar insert = function (connection, data) {  \n    connection.query('INSERT INTO a_test_table SET ?', data, function (err, result) {  \n        console.log('ID : ' + result.insertId);  \n    });  \n};  \n  \nvar update = function (connection, data) {  \n    connection.query('UPDATE a_test_table SET name = ? WHERE id = ?', data, function (err, result) {  \n    });  \n};  \n  \nvar select = function (connection) {  \n    connection.query('SELECT * FROM a_test_table', function (err, result) {  \n        result.forEach(function (user) {  \n            console.log(user.id + ':' + user.name + ':');  \n        });  \n    });  \n};  \n  \npool.getConnection(function (err, connection) {  \n    var data = ['www', 1];  \n    select(connection);  \n    update(connection, data);  \n    select(connection);  \n});  \n  \nconsole.log('mysql is start!');  \n``` \n然后我尝试停用了mysql，运行这段代码，发现，停用后无法连接，并报错；如果是正在连接，那么会自动断掉连接。\n \n不是很明白如何断线重连。\n \n也许是假如断线了，就运行这个pool.getConnection这句代码？\n但是如何判断呢？不清楚\n \n像下面这么写么？假如没连上，的确可以尝试重复连接，但是如果连接上的时候，断掉了，却不会继续重连。\n```js\nfunction toConnet() {  \n    pool.getConnection(function (err, connection) {  \n        if (err) {  \n            console.log(\"连接中：\" + err);  \n            setTimeout(toConnet, 2000);  \n        } else {  \n            var data = ['bbbb', 1];  \n            select(connection);  \n            update(connection, data);  \n            select(connection);  \n        }  \n    })  \n}  \ntoConnet();  \n```\n下面的表示链接成功了\n![](http://img.blog.csdn.net/20160612152611657)\n\n# ⑧防止SQL注入：\n使用方法：escape()\n具体用法是：\n不过貌似nodejs本身就带有一定的防注入功能。例如，我把data改为：\n```js\nvar data = [\"'bbbb', id = 2\", 1];  \n```\n这样拼接出来的sql代码应该是：\nUPDATE a_test_table SET name = 'bbbb', id = 2 WHERE id = 1\n运行这个js文件后，会发现结果变成这样：\n![](http://img.blog.csdn.net/20160612153243840)\n但若在mysql里面运行这段代码：\n结果变成这样：\n![](http://img.blog.csdn.net/20160612153302712)\n说明我们拼接的代码是没错的，只是mysql防止了这种简单的sql注入攻击。","source":"_posts/nodejs-2.md","raw":"---\ntitle:  Node.js(2) MySQL\ndate: 2016-10-2 16:22:52\ntags: [node.js,nodejs,mysql]\n---\nMySQL是mysql-5.6.17\nnodejs是目前最新版。\n\n# ①安装nodejs的mysql模块\n如果你的nodejs的版本比较新的话，应该不存在安装路径问题；\n在你想要运行nodejs文件的根路径，启动命令行（shift+鼠标右键）；\n输入：\n<!-- more -->\n``npm install mysql``\n \n正常的话，应该出的是一个带树形结构的图，比如这样：\n![](http://p1.bpimg.com/567571/8a56c4679605be87.png)\n\n如果差别过大，可能是出问题了，那么新建一个js文件，把以下内容复制粘贴进去\n注意修改mysql的账号名、密码，而端口号3306是默认的；\n```js\nvar mysql  = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar connection = mysql.createConnection({  \n    host     : '127.0.0.1',       //主机  \n    user     : 'root',               //MySQL认证用户名  \n    password : '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n});  \n//创建一个connection  \nconnection.connect(function(err){  \n    if(err){  \n        console.log('[query] - :'+err);  \n        return;  \n    }  \n    console.log('[connection connect]  succeed!');  \n});  \n//执行SQL语句  \nconnection.query('SELECT 1 + 1 AS solution', function(err, rows, fields) {  \n    if (err) {  \n        console.log('[query] - :'+err);  \n        return;  \n    }  \n    console.log('The solution is: ', rows[0].solution);  \n});  \n//关闭connection  \nconnection.end(function(err){  \n    if(err){  \n        return;  \n    }  \n    console.log('[connection end] succeed!');  \n});  \n```\n如果正常运行的话，可以从控制台console.log出来的消息确认（具体请看代码）；\n\n# ②mysql的增add：\n假如我想在mysql里，数据库（database）名为test，表名为a_test_table插入数据。\n假设你只装了mysql，却不懂mysql，那么这里我推荐你安装mysql-5.6.17-winx64这个版本，这样可以保证代码正常执行。\n然后进入mysql，默认账号名为root，默认密码为空；\n【以下代码注意结尾的分号，分号表示一条命令的结束】\n \n输入showdatabases;\n可以查看库名。应该有一个test库，如下图：\n![](http://p1.bpimg.com/567571/e7ee7e55bcf03dd5.png)\n如果没有的话，请自行搜索如何创建一个库；\n然后输入usetest;\n进入test表；然后输入show tables;\n显示test库下面的所有表，如下图：\n![](http://p1.bpimg.com/567571/76a59ac469b33b45.png)\n\n当然，正常来说，你这里应该是空。于是我们需要建表，为了方便，建一个最简单的表，输入以下命令：\ncreate table a_test_table(\nid int,\nname varchar(20));\n创建一个表，他只有两个字段，分别是id（int类型表示数字），name（字符类型）。此时再打show tables;  便可以看到a_test_table这个表了；\n再输入elect* from a_test_table;\n查询表内容，会显示空：\n![](http://img.blog.csdn.net/20160612152004210)\n\n下来开始正文，如何在这个表里插入内容：\n首先，新建一个js文件，记得使用utf-8格式。\n下面是代码，具体请看注释：\n```js\nvar mysql = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar connection = mysql.createConnection({  \n    host: '127.0.0.1',       //主机地址  \n    user: 'root',               //MySQL认证用户名  \n    password: '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n    database: 'test',                //库名  \n});  \n//创建一个connection，即连接到mysql的对象，如果连接错误，会提示错误。  \nconnection.connect(function (err) {  \n    if (err) {  \n        console.log('[query] - :' + err);  \n        return;  \n    }  \n    console.log('[connection connect]  succeed!');  \n});  \n  \nvar userAddSql = 'INSERT INTO a_test_table(id, name) VALUES(?,?)';  \n/* \n这里实际上是一个mysql语句， \n关键是第三个a_table_test表示表名； \nid和name表示字段名； \n两个问号表示插入的值，如果不是问号，而是一个值，那么表示这个字段固定插入这个值 \n*/  \nvar userAddSql_value = [1, 'wddddd'];       //这里实际依次对应的是上面2个问号，因为id是int，所以第一个是数字，第二个是字符串  \n  \nconnection.query(userAddSql, userAddSql_value, function (err, result) {  \n    if (err) {  \n        console.log('[INSERT ERROR] - ', err.message);  \n        return;  \n    }  \n  \n    console.log('——————————————INSERT————————————————');  \n    console.log('INSERT ID: ', result);  \n    console.log('—————————————————————————————————');  \n})  \n  \n//关闭connection  \nconnection.end(function (err) {  \n    if (err) {  \n        return;  \n    }  \n    console.log('[connection end] succeed!');  \n});  \n```\n如果显示错误，请检查自己的nodejs代码，一般问题常发生在账号名、密码、库名、表名等。\n\n# ③查select：\n有没有发现代码的特点，他的关键是mysql的命令，只要我们更改命令，完全可以像直接在mysql里输入命令行一样操控mysql，例如，我们只需要改这么一段代码：\n```js\nvar userAddSql = 'SELECT * FORM a_test_table';\n```\n即使完全不动其他代码，那么回调函数也能正常运行，其表现应该是这样：\n![](http://img.blog.csdn.net/20160612152125384)\n当然，完全不改是不好的，但无论如何，我们需要的功能是实现了。\n另外，显而易见，我们需要对返回内容进行操纵，那么首先我们需要明确返回内容是什么？结论是，他是一个数组（从 [] 可以猜出），然后我们这个数组只有一项，因此加上下标[0]，假如我们需要获取name属性，那么就是result[0].name；\n总得来说，代码在之前的基础上这么修改：\n把\n```js\nconsole.log('INSERT ID: ', result);  \n```\n修改为：\n```js\nconsole.log(result[0].name);\n```\n然后再次执行js文件，显示结果应该是这样：\n![](http://img.blog.csdn.net/20160612152225291)\n\n# ④删delete\n是不是感觉很简单，让我们Go on\n这次我们要删除id=1的那一项（因为id是唯一的，不会删错）——虽然我们其实就一项\n在之前代码上继续修改：\n```js\nvar userAddSql = 'DELETE FROM a_test_table WHERE id = 1';  //之所以大写mysql的指令，是为了和数据区分，事实上不大写也是可以的\n```\n然后执行之；\n毫无疑问，代码会报错，但是并非我们删除命令错误了，而是因为之前的代码，会输出结果的name属性，显然咯，都被删除了，哪有name属性；\n为了证明我们删除命令并没错，在mysql里进行查询：\n![](http://img.blog.csdn.net/20160612152323055)\n我们可以发现，我们需要删除的那一项被删除了。\n\n# ⑤改update\n增删查改，我们只剩下改了。但是目前mysql表里没内容，我们需要重新加上一些mysql信息。\n一次插入多条数据：\n```js\nvar userAddSql_value = [[1, 'a'], [2, 'd']];  \n  \nfor (var i = 0; i < userAddSql_value.length; i++) {  \n    connection.query(userAddSql, userAddSql_value[i], function (err, result) {  \n        if (err) {  \n            console.log('[INSERT ERROR] - ', err.message);  \n            return;  \n        }  \n  \n        console.log('——————————————INSERT————————————————');  \n        console.log(result[0].name);  \n        console.log('—————————————————————————————————');  \n    })  \n}  \n```\n然后接下来，我们要修改数据了。\n我们这次的目的，是把id=1的项，name修改为pp\n需要注意的是，所有id=1的项，name属性都将被修改为pp（而不是仅仅只有一个）；\n```js\nvar userAddSql = 'UPDATE a_test_table SET name = ? WHERE id = ?';    \nvar userAddSql_value = [\"pp\", 1];   \nconnection.query(userAddSql, userAddSql_value, function (err, result) {  \n    if (err) {  \n        console.log('[INSERT ERROR] - ', err.message);  \n        return;  \n    }  \n  \n    console.log('——————————————INSERT————————————————');  \n    console.log('INSERT ID: ', result);  \n    console.log('—————————————————————————————————');  \n})  \n```\n运行之，然后再查表，正常的话，你会发现，id=1的项，其值被更为为了pp\n![](http://img.blog.csdn.net/20160612152440545)\n\n# ⑥断线重连\n按照说明，使用连接池的方法更好，不过既然看到了断线重连，虽然挺迷茫，但正常运行了（虽然并不明白，而且感觉有点出入），那就先用着\n代码这么写：\n```js\nvar mysql = require('mysql');  //调用MySQL模块  \n  \n//创建一个connection  \nvar db_config = mysql.createConnection({  \n    host: '127.0.0.1',       //主机地址  \n    user: 'root',               //MySQL认证用户名  \n    password: '',        //MySQL认证用户密码  \n    port: '3306',                   //端口号  \n    database: 'test',                //库名  \n});  \nvar connect;  \nfunction handleDisconnect() {  \n    connect = mysql.createConnection(db_config);    //创建连接（连接的设置是上面）  \n    connect.connect(function (err) {    //大概是指连接，  \n        if (err) {  \n            console.log(\"正在连接中：\" + new Date());  \n            setTimeout(handleDisconnect, 3000);  \n            return;  \n        }  \n        console.log(\"连接成功\");  \n        run();  \n    })  \n    connect.on('error', function (err) {  \n        console.log('db error', err);  \n        if (err.code === 'PROTOCOL_CONNECTION_SET') {  \n            handleDisconnect();  \n        } else {  \n            throw err;  \n        }  \n    })  \n}  \nhandleDisconnect();  \nfunction run() {  \n    db_config.connect(function (err) {  \n        if (err) {  \n            console.log('[query] - :' + err);  \n            return;  \n        }  \n        console.log('[connection connect]  succeed!');  \n    });  \n  \n    var userAddSql = 'UPDATE a_test_table SET name = ? WHERE id = ?';  \n    var userAddSql_value = [\"www\", 1];  \n  \n    db_config.query(userAddSql, userAddSql_value, function (err, result) {  \n        if (err) {  \n            console.log('[INSERT ERROR] - ', err.message);  \n            return;  \n        }  \n  \n        console.log('——————————————INSERT————————————————');  \n        console.log('INSERT ID: ', result);  \n        console.log('—————————————————————————————————');  \n    })  \n  \n  \n//关闭connection  \n    db_config.end(function (err) {  \n        if (err) {  \n            return;  \n        }  \n        console.log('[connection end] succeed!');  \n    });  \n}  \n```\n\n# ⑦连接池：\n然后我试了试连接池的方法：\n```js\nvar mysql = require('mysql');  \nvar pool = mysql.createPool({  \n    host: 'localhost',  \n    user: 'root',  \n    password: '',  \n    database: 'test',  \n    debug: false,  \n});  \n  \nvar insert = function (connection, data) {  \n    connection.query('INSERT INTO a_test_table SET ?', data, function (err, result) {  \n        console.log('ID : ' + result.insertId);  \n    });  \n};  \n  \nvar update = function (connection, data) {  \n    connection.query('UPDATE a_test_table SET name = ? WHERE id = ?', data, function (err, result) {  \n    });  \n};  \n  \nvar select = function (connection) {  \n    connection.query('SELECT * FROM a_test_table', function (err, result) {  \n        result.forEach(function (user) {  \n            console.log(user.id + ':' + user.name + ':');  \n        });  \n    });  \n};  \n  \npool.getConnection(function (err, connection) {  \n    var data = ['www', 1];  \n    select(connection);  \n    update(connection, data);  \n    select(connection);  \n});  \n  \nconsole.log('mysql is start!');  \n``` \n然后我尝试停用了mysql，运行这段代码，发现，停用后无法连接，并报错；如果是正在连接，那么会自动断掉连接。\n \n不是很明白如何断线重连。\n \n也许是假如断线了，就运行这个pool.getConnection这句代码？\n但是如何判断呢？不清楚\n \n像下面这么写么？假如没连上，的确可以尝试重复连接，但是如果连接上的时候，断掉了，却不会继续重连。\n```js\nfunction toConnet() {  \n    pool.getConnection(function (err, connection) {  \n        if (err) {  \n            console.log(\"连接中：\" + err);  \n            setTimeout(toConnet, 2000);  \n        } else {  \n            var data = ['bbbb', 1];  \n            select(connection);  \n            update(connection, data);  \n            select(connection);  \n        }  \n    })  \n}  \ntoConnet();  \n```\n下面的表示链接成功了\n![](http://img.blog.csdn.net/20160612152611657)\n\n# ⑧防止SQL注入：\n使用方法：escape()\n具体用法是：\n不过貌似nodejs本身就带有一定的防注入功能。例如，我把data改为：\n```js\nvar data = [\"'bbbb', id = 2\", 1];  \n```\n这样拼接出来的sql代码应该是：\nUPDATE a_test_table SET name = 'bbbb', id = 2 WHERE id = 1\n运行这个js文件后，会发现结果变成这样：\n![](http://img.blog.csdn.net/20160612153243840)\n但若在mysql里面运行这段代码：\n结果变成这样：\n![](http://img.blog.csdn.net/20160612153302712)\n说明我们拼接的代码是没错的，只是mysql防止了这种简单的sql注入攻击。","slug":"nodejs-2","published":1,"updated":"2016-10-19T08:48:40.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7w0000g0wtuske73275","content":"<p>MySQL是mysql-5.6.17<br>nodejs是目前最新版。</p>\n<h1 id=\"①安装nodejs的mysql模块\"><a href=\"#①安装nodejs的mysql模块\" class=\"headerlink\" title=\"①安装nodejs的mysql模块\"></a>①安装nodejs的mysql模块</h1><p>如果你的nodejs的版本比较新的话，应该不存在安装路径问题；<br>在你想要运行nodejs文件的根路径，启动命令行（shift+鼠标右键）；<br>输入：<br><a id=\"more\"></a><br><code>npm install mysql</code></p>\n<p>正常的话，应该出的是一个带树形结构的图，比如这样：<br><img src=\"http://p1.bpimg.com/567571/8a56c4679605be87.png\" alt=\"\"></p>\n<p>如果差别过大，可能是出问题了，那么新建一个js文件，把以下内容复制粘贴进去<br>注意修改mysql的账号名、密码，而端口号3306是默认的；<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql  = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>     : <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机  </span></div><div class=\"line\">    user     : <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password : <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span>+err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//执行SQL语句  </span></div><div class=\"line\">connection.query(<span class=\"string\">'SELECT 1 + 1 AS solution'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, rows, fields</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span>+err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>, rows[<span class=\"number\">0</span>].solution);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">connection.end(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果正常运行的话，可以从控制台console.log出来的消息确认（具体请看代码）；</p>\n<h1 id=\"②mysql的增add：\"><a href=\"#②mysql的增add：\" class=\"headerlink\" title=\"②mysql的增add：\"></a>②mysql的增add：</h1><p>假如我想在mysql里，数据库（database）名为test，表名为a_test_table插入数据。<br>假设你只装了mysql，却不懂mysql，那么这里我推荐你安装mysql-5.6.17-winx64这个版本，这样可以保证代码正常执行。<br>然后进入mysql，默认账号名为root，默认密码为空；<br>【以下代码注意结尾的分号，分号表示一条命令的结束】</p>\n<p>输入showdatabases;<br>可以查看库名。应该有一个test库，如下图：<br><img src=\"http://p1.bpimg.com/567571/e7ee7e55bcf03dd5.png\" alt=\"\"><br>如果没有的话，请自行搜索如何创建一个库；<br>然后输入usetest;<br>进入test表；然后输入show tables;<br>显示test库下面的所有表，如下图：<br><img src=\"http://p1.bpimg.com/567571/76a59ac469b33b45.png\" alt=\"\"></p>\n<p>当然，正常来说，你这里应该是空。于是我们需要建表，为了方便，建一个最简单的表，输入以下命令：<br>create table a_test_table(<br>id int,<br>name varchar(20));<br>创建一个表，他只有两个字段，分别是id（int类型表示数字），name（字符类型）。此时再打show tables;  便可以看到a_test_table这个表了；<br>再输入elect* from a_test_table;<br>查询表内容，会显示空：<br><img src=\"http://img.blog.csdn.net/20160612152004210\" alt=\"\"></p>\n<p>下来开始正文，如何在这个表里插入内容：<br>首先，新建一个js文件，记得使用utf-8格式。<br>下面是代码，具体请看注释：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机地址  </span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password: <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">    database: <span class=\"string\">'test'</span>,                <span class=\"comment\">//库名  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建一个connection，即连接到mysql的对象，如果连接错误，会提示错误。  </span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'INSERT INTO a_test_table(id, name) VALUES(?,?)'</span>;  </div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">这里实际上是一个mysql语句， </div><div class=\"line\">关键是第三个a_table_test表示表名； </div><div class=\"line\">id和name表示字段名； </div><div class=\"line\">两个问号表示插入的值，如果不是问号，而是一个值，那么表示这个字段固定插入这个值 </div><div class=\"line\">*/  </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [<span class=\"number\">1</span>, <span class=\"string\">'wddddd'</span>];       <span class=\"comment\">//这里实际依次对应的是上面2个问号，因为id是int，所以第一个是数字，第二个是字符串  </span></div><div class=\"line\">  </div><div class=\"line\">connection.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">&#125;)  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">connection.end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果显示错误，请检查自己的nodejs代码，一般问题常发生在账号名、密码、库名、表名等。</p>\n<h1 id=\"③查select：\"><a href=\"#③查select：\" class=\"headerlink\" title=\"③查select：\"></a>③查select：</h1><p>有没有发现代码的特点，他的关键是mysql的命令，只要我们更改命令，完全可以像直接在mysql里输入命令行一样操控mysql，例如，我们只需要改这么一段代码：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'SELECT * FORM a_test_table'</span>;</div></pre></td></tr></table></figure></p>\n<p>即使完全不动其他代码，那么回调函数也能正常运行，其表现应该是这样：<br><img src=\"http://img.blog.csdn.net/20160612152125384\" alt=\"\"><br>当然，完全不改是不好的，但无论如何，我们需要的功能是实现了。<br>另外，显而易见，我们需要对返回内容进行操纵，那么首先我们需要明确返回内容是什么？结论是，他是一个数组（从 [] 可以猜出），然后我们这个数组只有一项，因此加上下标[0]，假如我们需要获取name属性，那么就是result[0].name；<br>总得来说，代码在之前的基础上这么修改：<br>把<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);</div></pre></td></tr></table></figure></p>\n<p>修改为：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">0</span>].name);</div></pre></td></tr></table></figure></p>\n<p>然后再次执行js文件，显示结果应该是这样：<br><img src=\"http://img.blog.csdn.net/20160612152225291\" alt=\"\"></p>\n<h1 id=\"④删delete\"><a href=\"#④删delete\" class=\"headerlink\" title=\"④删delete\"></a>④删delete</h1><p>是不是感觉很简单，让我们Go on<br>这次我们要删除id=1的那一项（因为id是唯一的，不会删错）——虽然我们其实就一项<br>在之前代码上继续修改：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'DELETE FROM a_test_table WHERE id = 1'</span>;  <span class=\"comment\">//之所以大写mysql的指令，是为了和数据区分，事实上不大写也是可以的</span></div></pre></td></tr></table></figure></p>\n<p>然后执行之；<br>毫无疑问，代码会报错，但是并非我们删除命令错误了，而是因为之前的代码，会输出结果的name属性，显然咯，都被删除了，哪有name属性；<br>为了证明我们删除命令并没错，在mysql里进行查询：<br><img src=\"http://img.blog.csdn.net/20160612152323055\" alt=\"\"><br>我们可以发现，我们需要删除的那一项被删除了。</p>\n<h1 id=\"⑤改update\"><a href=\"#⑤改update\" class=\"headerlink\" title=\"⑤改update\"></a>⑤改update</h1><p>增删查改，我们只剩下改了。但是目前mysql表里没内容，我们需要重新加上一些mysql信息。<br>一次插入多条数据：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'d'</span>]];  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; userAddSql_value.length; i++) &#123;  </div><div class=\"line\">    connection.query(userAddSql, userAddSql_value[i], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result[<span class=\"number\">0</span>].name);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后接下来，我们要修改数据了。<br>我们这次的目的，是把id=1的项，name修改为pp<br>需要注意的是，所有id=1的项，name属性都将被修改为pp（而不是仅仅只有一个）；<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>;    </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [<span class=\"string\">\"pp\"</span>, <span class=\"number\">1</span>];   </div><div class=\"line\">connection.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>运行之，然后再查表，正常的话，你会发现，id=1的项，其值被更为为了pp<br><img src=\"http://img.blog.csdn.net/20160612152440545\" alt=\"\"></p>\n<h1 id=\"⑥断线重连\"><a href=\"#⑥断线重连\" class=\"headerlink\" title=\"⑥断线重连\"></a>⑥断线重连</h1><p>按照说明，使用连接池的方法更好，不过既然看到了断线重连，虽然挺迷茫，但正常运行了（虽然并不明白，而且感觉有点出入），那就先用着<br>代码这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> db_config = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机地址  </span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password: <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">    database: <span class=\"string\">'test'</span>,                <span class=\"comment\">//库名  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> connect;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleDisconnect</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    connect = mysql.createConnection(db_config);    <span class=\"comment\">//创建连接（连接的设置是上面）  </span></div><div class=\"line\">    connect.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;    <span class=\"comment\">//大概是指连接，  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"正在连接中：\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());  </div><div class=\"line\">            setTimeout(handleDisconnect, <span class=\"number\">3000</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接成功\"</span>);  </div><div class=\"line\">        run();  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">    connect.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'db error'</span>, err);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'PROTOCOL_CONNECTION_SET'</span>) &#123;  </div><div class=\"line\">            handleDisconnect();  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> err;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;  </div><div class=\"line\">handleDisconnect();  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    db_config.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> userAddSql_value = [<span class=\"string\">\"www\"</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">  </div><div class=\"line\">    db_config.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">    db_config.end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"⑦连接池：\"><a href=\"#⑦连接池：\" class=\"headerlink\" title=\"⑦连接池：\"></a>⑦连接池：</h1><p>然后我试了试连接池的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'localhost'</span>,  </div><div class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">'root'</span>,  </div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">''</span>,  </div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'test'</span>,  </div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection, data</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'INSERT INTO a_test_table SET ?'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ID : '</span> + result.insertId);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection, data</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> select = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'SELECT * FROM a_test_table'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(user.id + <span class=\"string\">':'</span> + user.name + <span class=\"string\">':'</span>);  </div><div class=\"line\">        &#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\">pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, connection</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"string\">'www'</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">    select(connection);  </div><div class=\"line\">    update(connection, data);  </div><div class=\"line\">    select(connection);  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'mysql is start!'</span>);  </div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\">然后我尝试停用了mysql，运行这段代码，发现，停用后无法连接，并报错；如果是正在连接，那么会自动断掉连接。</div><div class=\"line\"> </div><div class=\"line\">不是很明白如何断线重连。</div><div class=\"line\"> </div><div class=\"line\">也许是假如断线了，就运行这个pool.getConnection这句代码？</div><div class=\"line\">但是如何判断呢？不清楚</div><div class=\"line\"> </div><div class=\"line\">像下面这么写么？假如没连上，的确可以尝试重复连接，但是如果连接上的时候，断掉了，却不会继续重连。</div><div class=\"line\">`<span class=\"string\">``</span>js</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConnet</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, connection</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接中：\"</span> + err);  </div><div class=\"line\">            setTimeout(toConnet, <span class=\"number\">2000</span>);  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> data = [<span class=\"string\">'bbbb'</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">            select(connection);  </div><div class=\"line\">            update(connection, data);  </div><div class=\"line\">            select(connection);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;  </div><div class=\"line\">toConnet();</div></pre></td></tr></table></figure></p>\n<p>下面的表示链接成功了<br><img src=\"http://img.blog.csdn.net/20160612152611657\" alt=\"\"></p>\n<h1 id=\"⑧防止SQL注入：\"><a href=\"#⑧防止SQL注入：\" class=\"headerlink\" title=\"⑧防止SQL注入：\"></a>⑧防止SQL注入：</h1><p>使用方法：escape()<br>具体用法是：<br>不过貌似nodejs本身就带有一定的防注入功能。例如，我把data改为：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"string\">\"'bbbb', id = 2\"</span>, <span class=\"number\">1</span>];</div></pre></td></tr></table></figure></p>\n<p>这样拼接出来的sql代码应该是：<br>UPDATE a_test_table SET name = ‘bbbb’, id = 2 WHERE id = 1<br>运行这个js文件后，会发现结果变成这样：<br><img src=\"http://img.blog.csdn.net/20160612153243840\" alt=\"\"><br>但若在mysql里面运行这段代码：<br>结果变成这样：<br><img src=\"http://img.blog.csdn.net/20160612153302712\" alt=\"\"><br>说明我们拼接的代码是没错的，只是mysql防止了这种简单的sql注入攻击。</p>\n","excerpt":"<p>MySQL是mysql-5.6.17<br>nodejs是目前最新版。</p>\n<h1 id=\"①安装nodejs的mysql模块\"><a href=\"#①安装nodejs的mysql模块\" class=\"headerlink\" title=\"①安装nodejs的mysql模块\"></a>①安装nodejs的mysql模块</h1><p>如果你的nodejs的版本比较新的话，应该不存在安装路径问题；<br>在你想要运行nodejs文件的根路径，启动命令行（shift+鼠标右键）；<br>输入：<br>","more":"<br><code>npm install mysql</code></p>\n<p>正常的话，应该出的是一个带树形结构的图，比如这样：<br><img src=\"http://p1.bpimg.com/567571/8a56c4679605be87.png\" alt=\"\"></p>\n<p>如果差别过大，可能是出问题了，那么新建一个js文件，把以下内容复制粘贴进去<br>注意修改mysql的账号名、密码，而端口号3306是默认的；<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql  = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>     : <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机  </span></div><div class=\"line\">    user     : <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password : <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span>+err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//执行SQL语句  </span></div><div class=\"line\">connection.query(<span class=\"string\">'SELECT 1 + 1 AS solution'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, rows, fields</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span>+err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>, rows[<span class=\"number\">0</span>].solution);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">connection.end(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果正常运行的话，可以从控制台console.log出来的消息确认（具体请看代码）；</p>\n<h1 id=\"②mysql的增add：\"><a href=\"#②mysql的增add：\" class=\"headerlink\" title=\"②mysql的增add：\"></a>②mysql的增add：</h1><p>假如我想在mysql里，数据库（database）名为test，表名为a_test_table插入数据。<br>假设你只装了mysql，却不懂mysql，那么这里我推荐你安装mysql-5.6.17-winx64这个版本，这样可以保证代码正常执行。<br>然后进入mysql，默认账号名为root，默认密码为空；<br>【以下代码注意结尾的分号，分号表示一条命令的结束】</p>\n<p>输入showdatabases;<br>可以查看库名。应该有一个test库，如下图：<br><img src=\"http://p1.bpimg.com/567571/e7ee7e55bcf03dd5.png\" alt=\"\"><br>如果没有的话，请自行搜索如何创建一个库；<br>然后输入usetest;<br>进入test表；然后输入show tables;<br>显示test库下面的所有表，如下图：<br><img src=\"http://p1.bpimg.com/567571/76a59ac469b33b45.png\" alt=\"\"></p>\n<p>当然，正常来说，你这里应该是空。于是我们需要建表，为了方便，建一个最简单的表，输入以下命令：<br>create table a_test_table(<br>id int,<br>name varchar(20));<br>创建一个表，他只有两个字段，分别是id（int类型表示数字），name（字符类型）。此时再打show tables;  便可以看到a_test_table这个表了；<br>再输入elect* from a_test_table;<br>查询表内容，会显示空：<br><img src=\"http://img.blog.csdn.net/20160612152004210\" alt=\"\"></p>\n<p>下来开始正文，如何在这个表里插入内容：<br>首先，新建一个js文件，记得使用utf-8格式。<br>下面是代码，具体请看注释：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机地址  </span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password: <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">    database: <span class=\"string\">'test'</span>,                <span class=\"comment\">//库名  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建一个connection，即连接到mysql的对象，如果连接错误，会提示错误。  </span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'INSERT INTO a_test_table(id, name) VALUES(?,?)'</span>;  </div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">这里实际上是一个mysql语句， </div><div class=\"line\">关键是第三个a_table_test表示表名； </div><div class=\"line\">id和name表示字段名； </div><div class=\"line\">两个问号表示插入的值，如果不是问号，而是一个值，那么表示这个字段固定插入这个值 </div><div class=\"line\">*/</span>  </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [<span class=\"number\">1</span>, <span class=\"string\">'wddddd'</span>];       <span class=\"comment\">//这里实际依次对应的是上面2个问号，因为id是int，所以第一个是数字，第二个是字符串  </span></div><div class=\"line\">  </div><div class=\"line\">connection.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">&#125;)  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">connection.end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果显示错误，请检查自己的nodejs代码，一般问题常发生在账号名、密码、库名、表名等。</p>\n<h1 id=\"③查select：\"><a href=\"#③查select：\" class=\"headerlink\" title=\"③查select：\"></a>③查select：</h1><p>有没有发现代码的特点，他的关键是mysql的命令，只要我们更改命令，完全可以像直接在mysql里输入命令行一样操控mysql，例如，我们只需要改这么一段代码：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'SELECT * FORM a_test_table'</span>;</div></pre></td></tr></table></figure></p>\n<p>即使完全不动其他代码，那么回调函数也能正常运行，其表现应该是这样：<br><img src=\"http://img.blog.csdn.net/20160612152125384\" alt=\"\"><br>当然，完全不改是不好的，但无论如何，我们需要的功能是实现了。<br>另外，显而易见，我们需要对返回内容进行操纵，那么首先我们需要明确返回内容是什么？结论是，他是一个数组（从 [] 可以猜出），然后我们这个数组只有一项，因此加上下标[0]，假如我们需要获取name属性，那么就是result[0].name；<br>总得来说，代码在之前的基础上这么修改：<br>把<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);</div></pre></td></tr></table></figure></p>\n<p>修改为：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">0</span>].name);</div></pre></td></tr></table></figure></p>\n<p>然后再次执行js文件，显示结果应该是这样：<br><img src=\"http://img.blog.csdn.net/20160612152225291\" alt=\"\"></p>\n<h1 id=\"④删delete\"><a href=\"#④删delete\" class=\"headerlink\" title=\"④删delete\"></a>④删delete</h1><p>是不是感觉很简单，让我们Go on<br>这次我们要删除id=1的那一项（因为id是唯一的，不会删错）——虽然我们其实就一项<br>在之前代码上继续修改：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'DELETE FROM a_test_table WHERE id = 1'</span>;  <span class=\"comment\">//之所以大写mysql的指令，是为了和数据区分，事实上不大写也是可以的</span></div></pre></td></tr></table></figure></p>\n<p>然后执行之；<br>毫无疑问，代码会报错，但是并非我们删除命令错误了，而是因为之前的代码，会输出结果的name属性，显然咯，都被删除了，哪有name属性；<br>为了证明我们删除命令并没错，在mysql里进行查询：<br><img src=\"http://img.blog.csdn.net/20160612152323055\" alt=\"\"><br>我们可以发现，我们需要删除的那一项被删除了。</p>\n<h1 id=\"⑤改update\"><a href=\"#⑤改update\" class=\"headerlink\" title=\"⑤改update\"></a>⑤改update</h1><p>增删查改，我们只剩下改了。但是目前mysql表里没内容，我们需要重新加上一些mysql信息。<br>一次插入多条数据：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'d'</span>]];  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; userAddSql_value.length; i++) &#123;  </div><div class=\"line\">    connection.query(userAddSql, userAddSql_value[i], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result[<span class=\"number\">0</span>].name);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后接下来，我们要修改数据了。<br>我们这次的目的，是把id=1的项，name修改为pp<br>需要注意的是，所有id=1的项，name属性都将被修改为pp（而不是仅仅只有一个）；<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>;    </div><div class=\"line\"><span class=\"keyword\">var</span> userAddSql_value = [<span class=\"string\">\"pp\"</span>, <span class=\"number\">1</span>];   </div><div class=\"line\">connection.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>运行之，然后再查表，正常的话，你会发现，id=1的项，其值被更为为了pp<br><img src=\"http://img.blog.csdn.net/20160612152440545\" alt=\"\"></p>\n<h1 id=\"⑥断线重连\"><a href=\"#⑥断线重连\" class=\"headerlink\" title=\"⑥断线重连\"></a>⑥断线重连</h1><p>按照说明，使用连接池的方法更好，不过既然看到了断线重连，虽然挺迷茫，但正常运行了（虽然并不明白，而且感觉有点出入），那就先用着<br>代码这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  <span class=\"comment\">//调用MySQL模块  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个connection  </span></div><div class=\"line\"><span class=\"keyword\">var</span> db_config = mysql.createConnection(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,       <span class=\"comment\">//主机地址  </span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,               <span class=\"comment\">//MySQL认证用户名  </span></div><div class=\"line\">    password: <span class=\"string\">''</span>,        <span class=\"comment\">//MySQL认证用户密码  </span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,                   <span class=\"comment\">//端口号  </span></div><div class=\"line\">    database: <span class=\"string\">'test'</span>,                <span class=\"comment\">//库名  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> connect;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleDisconnect</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    connect = mysql.createConnection(db_config);    <span class=\"comment\">//创建连接（连接的设置是上面）  </span></div><div class=\"line\">    connect.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;    <span class=\"comment\">//大概是指连接，  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"正在连接中：\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());  </div><div class=\"line\">            setTimeout(handleDisconnect, <span class=\"number\">3000</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接成功\"</span>);  </div><div class=\"line\">        run();  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">    connect.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'db error'</span>, err);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'PROTOCOL_CONNECTION_SET'</span>) &#123;  </div><div class=\"line\">            handleDisconnect();  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> err;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;  </div><div class=\"line\">handleDisconnect();  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    db_config.connect(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> userAddSql = <span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> userAddSql_value = [<span class=\"string\">\"www\"</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">  </div><div class=\"line\">    db_config.query(userAddSql, userAddSql_value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[INSERT ERROR] - '</span>, err.message);  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'——————————————INSERT————————————————'</span>);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'INSERT ID: '</span>, result);  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—————————————————————————————————'</span>);  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//关闭connection  </span></div><div class=\"line\">    db_config.end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection end] succeed!'</span>);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"⑦连接池：\"><a href=\"#⑦连接池：\" class=\"headerlink\" title=\"⑦连接池：\"></a>⑦连接池：</h1><p>然后我试了试连接池的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool(&#123;  </div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'localhost'</span>,  </div><div class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">'root'</span>,  </div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">''</span>,  </div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'test'</span>,  </div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection, data</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'INSERT INTO a_test_table SET ?'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ID : '</span> + result.insertId);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection, data</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'UPDATE a_test_table SET name = ? WHERE id = ?'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> select = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">connection</span>) </span>&#123;  </div><div class=\"line\">    connection.query(<span class=\"string\">'SELECT * FROM a_test_table'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;  </div><div class=\"line\">        result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(user.id + <span class=\"string\">':'</span> + user.name + <span class=\"string\">':'</span>);  </div><div class=\"line\">        &#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\">pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, connection</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"string\">'www'</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">    select(connection);  </div><div class=\"line\">    update(connection, data);  </div><div class=\"line\">    select(connection);  </div><div class=\"line\">&#125;);  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'mysql is start!'</span>);  </div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </div><div class=\"line\">然后我尝试停用了mysql，运行这段代码，发现，停用后无法连接，并报错；如果是正在连接，那么会自动断掉连接。</div><div class=\"line\"> </div><div class=\"line\">不是很明白如何断线重连。</div><div class=\"line\"> </div><div class=\"line\">也许是假如断线了，就运行这个pool.getConnection这句代码？</div><div class=\"line\">但是如何判断呢？不清楚</div><div class=\"line\"> </div><div class=\"line\">像下面这么写么？假如没连上，的确可以尝试重复连接，但是如果连接上的时候，断掉了，却不会继续重连。</div><div class=\"line\">`</span><span class=\"string\">``</span>js</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConnet</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, connection</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"连接中：\"</span> + err);  </div><div class=\"line\">            setTimeout(toConnet, <span class=\"number\">2000</span>);  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> data = [<span class=\"string\">'bbbb'</span>, <span class=\"number\">1</span>];  </div><div class=\"line\">            select(connection);  </div><div class=\"line\">            update(connection, data);  </div><div class=\"line\">            select(connection);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)  </div><div class=\"line\">&#125;  </div><div class=\"line\">toConnet();</div></pre></td></tr></table></figure></p>\n<p>下面的表示链接成功了<br><img src=\"http://img.blog.csdn.net/20160612152611657\" alt=\"\"></p>\n<h1 id=\"⑧防止SQL注入：\"><a href=\"#⑧防止SQL注入：\" class=\"headerlink\" title=\"⑧防止SQL注入：\"></a>⑧防止SQL注入：</h1><p>使用方法：escape()<br>具体用法是：<br>不过貌似nodejs本身就带有一定的防注入功能。例如，我把data改为：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"string\">\"'bbbb', id = 2\"</span>, <span class=\"number\">1</span>];</div></pre></td></tr></table></figure></p>\n<p>这样拼接出来的sql代码应该是：<br>UPDATE a_test_table SET name = ‘bbbb’, id = 2 WHERE id = 1<br>运行这个js文件后，会发现结果变成这样：<br><img src=\"http://img.blog.csdn.net/20160612153243840\" alt=\"\"><br>但若在mysql里面运行这段代码：<br>结果变成这样：<br><img src=\"http://img.blog.csdn.net/20160612153302712\" alt=\"\"><br>说明我们拼接的代码是没错的，只是mysql防止了这种简单的sql注入攻击。</p>"},{"title":"Node.js(3) 模块","date":"2016-10-03T08:59:47.000Z","_content":"当我们制作一个模块时，我们可能会写一个构造函数（因为在浏览器写构造函数时我们经常会这么做）。\n<!-- more -->\n如代码：\n```js\nfunction sayHello() {  \n    this.say = function () {  \n        console.log('hello');  \n    }  \n}  \nexports.Hello = sayHello;  \n```\n在这里，我们有一个构造函数sayHello，函数里有一个方法say，输出hello。\n然后导出的是sayHello这个构造函数。我们在另外一个文件中调用它。\n代码这么写：\n```js\nvar hello = require('./test').Hello;    //调用刚才写的那个模块  \nvar m = new hello();  \nm.say();  \n```\n第一行表示我们调用刚才写的那个模块。\n注意，这个时候和之前不同（之前是直接require模块即可），这里需要添加一个Hello。原因在于require表示导入的是一个整体（即有多个exports导出的方法），这里我们只需要其中的Hello方法（即对应原模块中的sayHello这个构造函数）；\n \n当然，也可以写为require('./test')，在下面的代码，把hello改为hello.Hello即可。\n \n第二行代码表示生成一个这个构造函数的实例（还记得js里如何调用构造函数么？构造函数是不能直接调用其方法的）；\n \n第三行代码表示调用这个实例的say方法（即模块中的this.say=的那个函数）；\n \n这个流程是：\n请求模块==>生成函数的实例==>调用函数的方法\n \n \n我们也可以在导出的时候，用另一种方法：\n```js\nmodule.exports = sayHello;\n```\n然后调用这个模块\n```js\nvar hello = require('./test');    //调用刚才导入的那个文件  \nm = new hello();  \nm.say();  \n```\n这个时候hello就是这个函数，然后生成一个实例，调用其方法。\n \n但我觉得有个潜在问题，这个模块里只能有这一个函数（不是很确定）。我验证结果如下：\n修改之前的模块：\n```js\nfunction sayHello() {  \n    this.say = function () {  \n        console.log('hello');  \n    }  \n}  \nfunction say() {  \n    console.log(\"say\");  \n}  \nmodule.exports = sayHello;  \nexports.say = say;  \n```\n调用其的模块：\n```js\nvar hello = require('./test');    //调用刚才导入的那个文件  \nconsole.log(hello.say)  \n```\n显示是undefined，而正常情况下（删除module.exports = sayHello;这一行）应该显示：\n![](http://img.blog.csdn.net/20160612154252163)\n经过查询，这种用法的作用在于，假如我们只想将一个对象封装到模块中，就这么用。\n \n另外，不可以直接对exports进行赋值以替代（module.exports这种用法）。\n按照说明，这个变量会在模块执行结束后被释放，但module.exports不会。","source":"_posts/nodejs-3.md","raw":"---\ntitle: Node.js(3) 模块\ndate: 2016-10-3 16:59:47\ntags: [node.js,nodejs]\n---\n当我们制作一个模块时，我们可能会写一个构造函数（因为在浏览器写构造函数时我们经常会这么做）。\n<!-- more -->\n如代码：\n```js\nfunction sayHello() {  \n    this.say = function () {  \n        console.log('hello');  \n    }  \n}  \nexports.Hello = sayHello;  \n```\n在这里，我们有一个构造函数sayHello，函数里有一个方法say，输出hello。\n然后导出的是sayHello这个构造函数。我们在另外一个文件中调用它。\n代码这么写：\n```js\nvar hello = require('./test').Hello;    //调用刚才写的那个模块  \nvar m = new hello();  \nm.say();  \n```\n第一行表示我们调用刚才写的那个模块。\n注意，这个时候和之前不同（之前是直接require模块即可），这里需要添加一个Hello。原因在于require表示导入的是一个整体（即有多个exports导出的方法），这里我们只需要其中的Hello方法（即对应原模块中的sayHello这个构造函数）；\n \n当然，也可以写为require('./test')，在下面的代码，把hello改为hello.Hello即可。\n \n第二行代码表示生成一个这个构造函数的实例（还记得js里如何调用构造函数么？构造函数是不能直接调用其方法的）；\n \n第三行代码表示调用这个实例的say方法（即模块中的this.say=的那个函数）；\n \n这个流程是：\n请求模块==>生成函数的实例==>调用函数的方法\n \n \n我们也可以在导出的时候，用另一种方法：\n```js\nmodule.exports = sayHello;\n```\n然后调用这个模块\n```js\nvar hello = require('./test');    //调用刚才导入的那个文件  \nm = new hello();  \nm.say();  \n```\n这个时候hello就是这个函数，然后生成一个实例，调用其方法。\n \n但我觉得有个潜在问题，这个模块里只能有这一个函数（不是很确定）。我验证结果如下：\n修改之前的模块：\n```js\nfunction sayHello() {  \n    this.say = function () {  \n        console.log('hello');  \n    }  \n}  \nfunction say() {  \n    console.log(\"say\");  \n}  \nmodule.exports = sayHello;  \nexports.say = say;  \n```\n调用其的模块：\n```js\nvar hello = require('./test');    //调用刚才导入的那个文件  \nconsole.log(hello.say)  \n```\n显示是undefined，而正常情况下（删除module.exports = sayHello;这一行）应该显示：\n![](http://img.blog.csdn.net/20160612154252163)\n经过查询，这种用法的作用在于，假如我们只想将一个对象封装到模块中，就这么用。\n \n另外，不可以直接对exports进行赋值以替代（module.exports这种用法）。\n按照说明，这个变量会在模块执行结束后被释放，但module.exports不会。","slug":"nodejs-3","published":1,"updated":"2016-10-19T09:06:23.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7w3000i0wtu5ov12a71","content":"<p>当我们制作一个模块时，我们可能会写一个构造函数（因为在浏览器写构造函数时我们经常会这么做）。<br><a id=\"more\"></a><br>如代码：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">exports.Hello = sayHello;</div></pre></td></tr></table></figure></p>\n<p>在这里，我们有一个构造函数sayHello，函数里有一个方法say，输出hello。<br>然后导出的是sayHello这个构造函数。我们在另外一个文件中调用它。<br>代码这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>).Hello;    <span class=\"comment\">//调用刚才写的那个模块  </span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> hello();  </div><div class=\"line\">m.say();</div></pre></td></tr></table></figure></p>\n<p>第一行表示我们调用刚才写的那个模块。<br>注意，这个时候和之前不同（之前是直接require模块即可），这里需要添加一个Hello。原因在于require表示导入的是一个整体（即有多个exports导出的方法），这里我们只需要其中的Hello方法（即对应原模块中的sayHello这个构造函数）；</p>\n<p>当然，也可以写为require(‘./test’)，在下面的代码，把hello改为hello.Hello即可。</p>\n<p>第二行代码表示生成一个这个构造函数的实例（还记得js里如何调用构造函数么？构造函数是不能直接调用其方法的）；</p>\n<p>第三行代码表示调用这个实例的say方法（即模块中的this.say=的那个函数）；</p>\n<p>这个流程是：<br>请求模块==&gt;生成函数的实例==&gt;调用函数的方法</p>\n<p>我们也可以在导出的时候，用另一种方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = sayHello;</div></pre></td></tr></table></figure></p>\n<p>然后调用这个模块<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);    <span class=\"comment\">//调用刚才导入的那个文件  </span></div><div class=\"line\">m = <span class=\"keyword\">new</span> hello();  </div><div class=\"line\">m.say();</div></pre></td></tr></table></figure></p>\n<p>这个时候hello就是这个函数，然后生成一个实例，调用其方法。</p>\n<p>但我觉得有个潜在问题，这个模块里只能有这一个函数（不是很确定）。我验证结果如下：<br>修改之前的模块：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"built_in\">module</span>.exports = sayHello;  </div><div class=\"line\">exports.say = say;</div></pre></td></tr></table></figure></p>\n<p>调用其的模块：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);    <span class=\"comment\">//调用刚才导入的那个文件  </span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hello.say)</div></pre></td></tr></table></figure></p>\n<p>显示是undefined，而正常情况下（删除module.exports = sayHello;这一行）应该显示：<br><img src=\"http://img.blog.csdn.net/20160612154252163\" alt=\"\"><br>经过查询，这种用法的作用在于，假如我们只想将一个对象封装到模块中，就这么用。</p>\n<p>另外，不可以直接对exports进行赋值以替代（module.exports这种用法）。<br>按照说明，这个变量会在模块执行结束后被释放，但module.exports不会。</p>\n","excerpt":"<p>当我们制作一个模块时，我们可能会写一个构造函数（因为在浏览器写构造函数时我们经常会这么做）。<br>","more":"<br>如代码：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">exports.Hello = sayHello;</div></pre></td></tr></table></figure></p>\n<p>在这里，我们有一个构造函数sayHello，函数里有一个方法say，输出hello。<br>然后导出的是sayHello这个构造函数。我们在另外一个文件中调用它。<br>代码这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>).Hello;    <span class=\"comment\">//调用刚才写的那个模块  </span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> hello();  </div><div class=\"line\">m.say();</div></pre></td></tr></table></figure></p>\n<p>第一行表示我们调用刚才写的那个模块。<br>注意，这个时候和之前不同（之前是直接require模块即可），这里需要添加一个Hello。原因在于require表示导入的是一个整体（即有多个exports导出的方法），这里我们只需要其中的Hello方法（即对应原模块中的sayHello这个构造函数）；</p>\n<p>当然，也可以写为require(‘./test’)，在下面的代码，把hello改为hello.Hello即可。</p>\n<p>第二行代码表示生成一个这个构造函数的实例（还记得js里如何调用构造函数么？构造函数是不能直接调用其方法的）；</p>\n<p>第三行代码表示调用这个实例的say方法（即模块中的this.say=的那个函数）；</p>\n<p>这个流程是：<br>请求模块==&gt;生成函数的实例==&gt;调用函数的方法</p>\n<p>我们也可以在导出的时候，用另一种方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = sayHello;</div></pre></td></tr></table></figure></p>\n<p>然后调用这个模块<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);    <span class=\"comment\">//调用刚才导入的那个文件  </span></div><div class=\"line\">m = <span class=\"keyword\">new</span> hello();  </div><div class=\"line\">m.say();</div></pre></td></tr></table></figure></p>\n<p>这个时候hello就是这个函数，然后生成一个实例，调用其方法。</p>\n<p>但我觉得有个潜在问题，这个模块里只能有这一个函数（不是很确定）。我验证结果如下：<br>修改之前的模块：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"built_in\">module</span>.exports = sayHello;  </div><div class=\"line\">exports.say = say;</div></pre></td></tr></table></figure></p>\n<p>调用其的模块：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);    <span class=\"comment\">//调用刚才导入的那个文件  </span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hello.say)</div></pre></td></tr></table></figure></p>\n<p>显示是undefined，而正常情况下（删除module.exports = sayHello;这一行）应该显示：<br><img src=\"http://img.blog.csdn.net/20160612154252163\" alt=\"\"><br>经过查询，这种用法的作用在于，假如我们只想将一个对象封装到模块中，就这么用。</p>\n<p>另外，不可以直接对exports进行赋值以替代（module.exports这种用法）。<br>按照说明，这个变量会在模块执行结束后被释放，但module.exports不会。</p>"},{"title":"使用node.js自动更新本地hosts, 实现科学上网.","date":"2016-09-04T06:52:35.000Z","_content":"现在网上有不少提供google hosts的网址，当我们访问不了google时，就需要复制这个网站提供的hosts到我们本地的hosts，在粘贴前还要在C盘一层一层的找到本地hosts，比较麻烦。\n于是我就想能不能通过运行一条命令就能把网站里的hosts自动更新到本地，刚开始想的是用php写的，不过在跟同学聊天的过程中，同学建议使用node来实现这个功能，简单方便，而且我对php的正则表达式也不是很熟，那就用node试试吧。\n<!-- more -->\n\n# 1. 安装Node\n进入[官网](https://nodejs.org/en/download)，下载我们需要的程序包。下载后，双击进行安装。\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj0h2ii5r4uk81u9p27i1i11a.jpg)\n在现在的node版本中，默认是node和npm一起安装的，不用再单独安装npm了。\n安装成功后，使用win+r打开cmd命令窗口，然后输入``node -v``查看当前node的版本号\n输入``npm -v``查看当前npm的版本号\n如果两个都能正确显示出版本号，就说明node和npm已经安装成功了。\n使用.msi类型的文件进行能够自动添加node和npm到PATH的环境变量中。\n\n# 2. 下载需要的模块包\nnpm是一个node的包管理和分发工具。有了npm，可以很快的找到你想要使用的包，进行下载、安装以及管理已经安装的包。\n使用npm进行模块的安装非常的方便：``npm install ****``\n如果想安装成全局的，所有的项目都能使用，可以添加上-g参数，如：``npm install -g ****``\n本项目中主要使用到的模块有：\n* request : 远程url请求。\n* cheerio : 类似于jQuery，能够像jQuery那样选择元素，获取元素的内容。\n* fs : 这是npm里自带的，不用下载安装，主要用于文件的读写操作。\n\n# 3. 编写程序\n程序的逻辑很简单：\n* 获取远程url的网页内容；\n* 解析出网页内容中hosts部分； \n* 读取自己设置的一些hosts；  \n* 将自己的hosts和远程获取到的hosts一起写入到C盘的hosts文件中。 \n这里使用了async中的waterfall来控制整个代码的流程。\n\n```js\nasync.waterfall([\n    function(callback){\n        self.log(\"正在连接 hosts url....\");\n\n        callback(error, data);\n    },\n    function(body, callback){\n        self.log(\"正在解析数据....\");\n\n        callback(null, text);\n    },\n    function(text, callback){\n        self.log('读取本地文件....');\n        \n        callback(err, data); \n    },\n    function(text, callback){\n        self.log('正在写入hosts....');\n        \n        if(err){\n            self.log(\"写入失败....\");\n        }else{\n            self.log(\"写入成功....\");\n        }\n        calllback(err);\n    },\n    function(){\n        self.log('运行完毕!');\n    }\n], function(err, data){\n    console.log('err: '+err);\n    // console.log('data: '+data);\n})\t\n```\n\nasync.waterfall提供瀑布式的流控制。每个操作产生的数据可以传递给下一个函数，通过callback这个回调函数。 \nasync模块保证回调只会被触发一次。它同时还为我们处理了错误，管理并行的任务。 \n这里还要说明一下：我这儿有一个单独的文件来放置自己的hosts，比如当前目录中的default.txt文件\n\n# 4. 运行代码\n进入到这个项目所在的目录，首先运行``npm install``，安装程序所需要的集成包。安装完成之后，然后运行``index.js:node index.js``，如果正常的话，就会出现下面的提示：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj1499q125g1lkufv518c31r5ga.png)\n程序采用的更新hosts的方式是全覆盖写入，因此我们需要把自己配置的一些hosts写到一个文件里（如default.txt）。当程序更新时，会首先读取default.txt里的hosts配置，然后与远程地址里的google hosts一起写入到本地的hosts文件中。\n代码里还有参数的默认配置：\n```json\n_option : {  \n\thostsurl : 'http://www.360kb.com/kb/2_122.html',  // 请求地址\n\thostsfile : 'C:/Windows/System32/drivers/etc/hosts',  // 本地hosts地址\n\tlocalfile : './default.txt'  // 默认hosts\n}\n```\n你可以直接修改这些变量，或者在调用init()方法时传递你需要的参数，程序自然会覆盖掉默认参数：\n```json\nwzHosts.init({hostsfile:'/etc/hosts', localfile:'/data/default.txt'}); \n```\n这样，本地里的google hosts就更新到了最新！\n\n# 5. 总结与更新地址\n通过这次的hosts读写，学习到了不少的node知识，欢迎提出你们的意见和建议！\nGoogle hosts更新网址:\n>http://www.360kb.com/kb/2_122.html\n>https://laod.cn/black-technology/hosts.html","source":"_posts/nodejs-hosts.md","raw":"---\ntitle: 使用node.js自动更新本地hosts, 实现科学上网.\ndate: 2016-09-04 14:52:35\ntags: [nodejs,hosts,fuck-gfw]\n---\n现在网上有不少提供google hosts的网址，当我们访问不了google时，就需要复制这个网站提供的hosts到我们本地的hosts，在粘贴前还要在C盘一层一层的找到本地hosts，比较麻烦。\n于是我就想能不能通过运行一条命令就能把网站里的hosts自动更新到本地，刚开始想的是用php写的，不过在跟同学聊天的过程中，同学建议使用node来实现这个功能，简单方便，而且我对php的正则表达式也不是很熟，那就用node试试吧。\n<!-- more -->\n\n# 1. 安装Node\n进入[官网](https://nodejs.org/en/download)，下载我们需要的程序包。下载后，双击进行安装。\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj0h2ii5r4uk81u9p27i1i11a.jpg)\n在现在的node版本中，默认是node和npm一起安装的，不用再单独安装npm了。\n安装成功后，使用win+r打开cmd命令窗口，然后输入``node -v``查看当前node的版本号\n输入``npm -v``查看当前npm的版本号\n如果两个都能正确显示出版本号，就说明node和npm已经安装成功了。\n使用.msi类型的文件进行能够自动添加node和npm到PATH的环境变量中。\n\n# 2. 下载需要的模块包\nnpm是一个node的包管理和分发工具。有了npm，可以很快的找到你想要使用的包，进行下载、安装以及管理已经安装的包。\n使用npm进行模块的安装非常的方便：``npm install ****``\n如果想安装成全局的，所有的项目都能使用，可以添加上-g参数，如：``npm install -g ****``\n本项目中主要使用到的模块有：\n* request : 远程url请求。\n* cheerio : 类似于jQuery，能够像jQuery那样选择元素，获取元素的内容。\n* fs : 这是npm里自带的，不用下载安装，主要用于文件的读写操作。\n\n# 3. 编写程序\n程序的逻辑很简单：\n* 获取远程url的网页内容；\n* 解析出网页内容中hosts部分； \n* 读取自己设置的一些hosts；  \n* 将自己的hosts和远程获取到的hosts一起写入到C盘的hosts文件中。 \n这里使用了async中的waterfall来控制整个代码的流程。\n\n```js\nasync.waterfall([\n    function(callback){\n        self.log(\"正在连接 hosts url....\");\n\n        callback(error, data);\n    },\n    function(body, callback){\n        self.log(\"正在解析数据....\");\n\n        callback(null, text);\n    },\n    function(text, callback){\n        self.log('读取本地文件....');\n        \n        callback(err, data); \n    },\n    function(text, callback){\n        self.log('正在写入hosts....');\n        \n        if(err){\n            self.log(\"写入失败....\");\n        }else{\n            self.log(\"写入成功....\");\n        }\n        calllback(err);\n    },\n    function(){\n        self.log('运行完毕!');\n    }\n], function(err, data){\n    console.log('err: '+err);\n    // console.log('data: '+data);\n})\t\n```\n\nasync.waterfall提供瀑布式的流控制。每个操作产生的数据可以传递给下一个函数，通过callback这个回调函数。 \nasync模块保证回调只会被触发一次。它同时还为我们处理了错误，管理并行的任务。 \n这里还要说明一下：我这儿有一个单独的文件来放置自己的hosts，比如当前目录中的default.txt文件\n\n# 4. 运行代码\n进入到这个项目所在的目录，首先运行``npm install``，安装程序所需要的集成包。安装完成之后，然后运行``index.js:node index.js``，如果正常的话，就会出现下面的提示：\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj1499q125g1lkufv518c31r5ga.png)\n程序采用的更新hosts的方式是全覆盖写入，因此我们需要把自己配置的一些hosts写到一个文件里（如default.txt）。当程序更新时，会首先读取default.txt里的hosts配置，然后与远程地址里的google hosts一起写入到本地的hosts文件中。\n代码里还有参数的默认配置：\n```json\n_option : {  \n\thostsurl : 'http://www.360kb.com/kb/2_122.html',  // 请求地址\n\thostsfile : 'C:/Windows/System32/drivers/etc/hosts',  // 本地hosts地址\n\tlocalfile : './default.txt'  // 默认hosts\n}\n```\n你可以直接修改这些变量，或者在调用init()方法时传递你需要的参数，程序自然会覆盖掉默认参数：\n```json\nwzHosts.init({hostsfile:'/etc/hosts', localfile:'/data/default.txt'}); \n```\n这样，本地里的google hosts就更新到了最新！\n\n# 5. 总结与更新地址\n通过这次的hosts读写，学习到了不少的node知识，欢迎提出你们的意见和建议！\nGoogle hosts更新网址:\n>http://www.360kb.com/kb/2_122.html\n>https://laod.cn/black-technology/hosts.html","slug":"nodejs-hosts","published":1,"updated":"2016-09-28T01:10:05.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7w6000k0wtu10pwu2wb","content":"<p>现在网上有不少提供google hosts的网址，当我们访问不了google时，就需要复制这个网站提供的hosts到我们本地的hosts，在粘贴前还要在C盘一层一层的找到本地hosts，比较麻烦。<br>于是我就想能不能通过运行一条命令就能把网站里的hosts自动更新到本地，刚开始想的是用php写的，不过在跟同学聊天的过程中，同学建议使用node来实现这个功能，简单方便，而且我对php的正则表达式也不是很熟，那就用node试试吧。<br><a id=\"more\"></a></p>\n<h1 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1. 安装Node\"></a>1. 安装Node</h1><p>进入<a href=\"https://nodejs.org/en/download\" target=\"_blank\" rel=\"external\">官网</a>，下载我们需要的程序包。下载后，双击进行安装。<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj0h2ii5r4uk81u9p27i1i11a.jpg\" alt=\"\"><br>在现在的node版本中，默认是node和npm一起安装的，不用再单独安装npm了。<br>安装成功后，使用win+r打开cmd命令窗口，然后输入<code>node -v</code>查看当前node的版本号<br>输入<code>npm -v</code>查看当前npm的版本号<br>如果两个都能正确显示出版本号，就说明node和npm已经安装成功了。<br>使用.msi类型的文件进行能够自动添加node和npm到PATH的环境变量中。</p>\n<h1 id=\"2-下载需要的模块包\"><a href=\"#2-下载需要的模块包\" class=\"headerlink\" title=\"2. 下载需要的模块包\"></a>2. 下载需要的模块包</h1><p>npm是一个node的包管理和分发工具。有了npm，可以很快的找到你想要使用的包，进行下载、安装以及管理已经安装的包。<br>使用npm进行模块的安装非常的方便：<code>npm install ****</code><br>如果想安装成全局的，所有的项目都能使用，可以添加上-g参数，如：<code>npm install -g ****</code><br>本项目中主要使用到的模块有：</p>\n<ul>\n<li>request : 远程url请求。</li>\n<li>cheerio : 类似于jQuery，能够像jQuery那样选择元素，获取元素的内容。</li>\n<li>fs : 这是npm里自带的，不用下载安装，主要用于文件的读写操作。</li>\n</ul>\n<h1 id=\"3-编写程序\"><a href=\"#3-编写程序\" class=\"headerlink\" title=\"3. 编写程序\"></a>3. 编写程序</h1><p>程序的逻辑很简单：</p>\n<ul>\n<li>获取远程url的网页内容；</li>\n<li>解析出网页内容中hosts部分； </li>\n<li>读取自己设置的一些hosts；  </li>\n<li>将自己的hosts和远程获取到的hosts一起写入到C盘的hosts文件中。<br>这里使用了async中的waterfall来控制整个代码的流程。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.waterfall([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">\"正在连接 hosts url....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        callback(error, data);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">body, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">\"正在解析数据....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, text);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'读取本地文件....'</span>);</div><div class=\"line\">        </div><div class=\"line\">        callback(err, data); </div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'正在写入hosts....'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            self.log(<span class=\"string\">\"写入失败....\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            self.log(<span class=\"string\">\"写入成功....\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        calllback(err);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'运行完毕!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'err: '</span>+err);</div><div class=\"line\">    <span class=\"comment\">// console.log('data: '+data);</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>async.waterfall提供瀑布式的流控制。每个操作产生的数据可以传递给下一个函数，通过callback这个回调函数。<br>async模块保证回调只会被触发一次。它同时还为我们处理了错误，管理并行的任务。<br>这里还要说明一下：我这儿有一个单独的文件来放置自己的hosts，比如当前目录中的default.txt文件</p>\n<h1 id=\"4-运行代码\"><a href=\"#4-运行代码\" class=\"headerlink\" title=\"4. 运行代码\"></a>4. 运行代码</h1><p>进入到这个项目所在的目录，首先运行<code>npm install</code>，安装程序所需要的集成包。安装完成之后，然后运行<code>index.js:node index.js</code>，如果正常的话，就会出现下面的提示：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj1499q125g1lkufv518c31r5ga.png\" alt=\"\"><br>程序采用的更新hosts的方式是全覆盖写入，因此我们需要把自己配置的一些hosts写到一个文件里（如default.txt）。当程序更新时，会首先读取default.txt里的hosts配置，然后与远程地址里的google hosts一起写入到本地的hosts文件中。<br>代码里还有参数的默认配置：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">_option : &#123;  </div><div class=\"line\">\thostsurl : 'http://www.360kb.com/kb/2_122.html',  // 请求地址</div><div class=\"line\">\thostsfile : 'C:/Windows/System32/drivers/etc/hosts',  // 本地hosts地址</div><div class=\"line\">\tlocalfile : './default.txt'  // 默认hosts</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可以直接修改这些变量，或者在调用init()方法时传递你需要的参数，程序自然会覆盖掉默认参数：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">wzHosts.init(&#123;hostsfile:'/etc/hosts', localfile:'/data/default.txt'&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，本地里的google hosts就更新到了最新！</p>\n<h1 id=\"5-总结与更新地址\"><a href=\"#5-总结与更新地址\" class=\"headerlink\" title=\"5. 总结与更新地址\"></a>5. 总结与更新地址</h1><p>通过这次的hosts读写，学习到了不少的node知识，欢迎提出你们的意见和建议！<br>Google hosts更新网址:</p>\n<blockquote>\n<p><a href=\"http://www.360kb.com/kb/2_122.html\" target=\"_blank\" rel=\"external\">http://www.360kb.com/kb/2_122.html</a><br><a href=\"https://laod.cn/black-technology/hosts.html\" target=\"_blank\" rel=\"external\">https://laod.cn/black-technology/hosts.html</a></p>\n</blockquote>\n","excerpt":"<p>现在网上有不少提供google hosts的网址，当我们访问不了google时，就需要复制这个网站提供的hosts到我们本地的hosts，在粘贴前还要在C盘一层一层的找到本地hosts，比较麻烦。<br>于是我就想能不能通过运行一条命令就能把网站里的hosts自动更新到本地，刚开始想的是用php写的，不过在跟同学聊天的过程中，同学建议使用node来实现这个功能，简单方便，而且我对php的正则表达式也不是很熟，那就用node试试吧。<br>","more":"</p>\n<h1 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1. 安装Node\"></a>1. 安装Node</h1><p>进入<a href=\"https://nodejs.org/en/download\">官网</a>，下载我们需要的程序包。下载后，双击进行安装。<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj0h2ii5r4uk81u9p27i1i11a.jpg\" alt=\"\"><br>在现在的node版本中，默认是node和npm一起安装的，不用再单独安装npm了。<br>安装成功后，使用win+r打开cmd命令窗口，然后输入<code>node -v</code>查看当前node的版本号<br>输入<code>npm -v</code>查看当前npm的版本号<br>如果两个都能正确显示出版本号，就说明node和npm已经安装成功了。<br>使用.msi类型的文件进行能够自动添加node和npm到PATH的环境变量中。</p>\n<h1 id=\"2-下载需要的模块包\"><a href=\"#2-下载需要的模块包\" class=\"headerlink\" title=\"2. 下载需要的模块包\"></a>2. 下载需要的模块包</h1><p>npm是一个node的包管理和分发工具。有了npm，可以很快的找到你想要使用的包，进行下载、安装以及管理已经安装的包。<br>使用npm进行模块的安装非常的方便：<code>npm install ****</code><br>如果想安装成全局的，所有的项目都能使用，可以添加上-g参数，如：<code>npm install -g ****</code><br>本项目中主要使用到的模块有：</p>\n<ul>\n<li>request : 远程url请求。</li>\n<li>cheerio : 类似于jQuery，能够像jQuery那样选择元素，获取元素的内容。</li>\n<li>fs : 这是npm里自带的，不用下载安装，主要用于文件的读写操作。</li>\n</ul>\n<h1 id=\"3-编写程序\"><a href=\"#3-编写程序\" class=\"headerlink\" title=\"3. 编写程序\"></a>3. 编写程序</h1><p>程序的逻辑很简单：</p>\n<ul>\n<li>获取远程url的网页内容；</li>\n<li>解析出网页内容中hosts部分； </li>\n<li>读取自己设置的一些hosts；  </li>\n<li>将自己的hosts和远程获取到的hosts一起写入到C盘的hosts文件中。<br>这里使用了async中的waterfall来控制整个代码的流程。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.waterfall([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">\"正在连接 hosts url....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        callback(error, data);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">body, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">\"正在解析数据....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, text);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'读取本地文件....'</span>);</div><div class=\"line\">        </div><div class=\"line\">        callback(err, data); </div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, callback</span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'正在写入hosts....'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            self.log(<span class=\"string\">\"写入失败....\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            self.log(<span class=\"string\">\"写入成功....\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        calllback(err);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.log(<span class=\"string\">'运行完毕!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'err: '</span>+err);</div><div class=\"line\">    <span class=\"comment\">// console.log('data: '+data);</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>async.waterfall提供瀑布式的流控制。每个操作产生的数据可以传递给下一个函数，通过callback这个回调函数。<br>async模块保证回调只会被触发一次。它同时还为我们处理了错误，管理并行的任务。<br>这里还要说明一下：我这儿有一个单独的文件来放置自己的hosts，比如当前目录中的default.txt文件</p>\n<h1 id=\"4-运行代码\"><a href=\"#4-运行代码\" class=\"headerlink\" title=\"4. 运行代码\"></a>4. 运行代码</h1><p>进入到这个项目所在的目录，首先运行<code>npm install</code>，安装程序所需要的集成包。安装完成之后，然后运行<code>index.js:node index.js</code>，如果正常的话，就会出现下面的提示：<br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ajj1499q125g1lkufv518c31r5ga.png\" alt=\"\"><br>程序采用的更新hosts的方式是全覆盖写入，因此我们需要把自己配置的一些hosts写到一个文件里（如default.txt）。当程序更新时，会首先读取default.txt里的hosts配置，然后与远程地址里的google hosts一起写入到本地的hosts文件中。<br>代码里还有参数的默认配置：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">_option : &#123;  </div><div class=\"line\">\thostsurl : 'http://www.360kb.com/kb/2_122.html',  // 请求地址</div><div class=\"line\">\thostsfile : 'C:/Windows/System32/drivers/etc/hosts',  // 本地hosts地址</div><div class=\"line\">\tlocalfile : './default.txt'  // 默认hosts</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可以直接修改这些变量，或者在调用init()方法时传递你需要的参数，程序自然会覆盖掉默认参数：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">wzHosts.init(&#123;hostsfile:'/etc/hosts', localfile:'/data/default.txt'&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，本地里的google hosts就更新到了最新！</p>\n<h1 id=\"5-总结与更新地址\"><a href=\"#5-总结与更新地址\" class=\"headerlink\" title=\"5. 总结与更新地址\"></a>5. 总结与更新地址</h1><p>通过这次的hosts读写，学习到了不少的node知识，欢迎提出你们的意见和建议！<br>Google hosts更新网址:</p>\n<blockquote>\n<p><a href=\"http://www.360kb.com/kb/2_122.html\">http://www.360kb.com/kb/2_122.html</a><br><a href=\"https://laod.cn/black-technology/hosts.html\">https://laod.cn/black-technology/hosts.html</a></p>\n</blockquote>"},{"title":"Shadowrocket科学上网使用教程","date":"2016-09-02T06:00:43.000Z","_content":"它与Surge的区别不在于代理形式，而是操作界面及自定义部分，配置文件适配Surge的可以快速扩大使用人群及降低使用成本，而且可以对Proxy和DNS部分做单独区别，并且可以强制本机的DNS，我们知道在iOS使用移动网络下是无法自定义DNS的，在运营商DNS已经干扰得不成样的情况下，如果借助外部DNS还是会对网络体验有很大提升。\n其次，我们可以指定DNS做转发，有条件的人可以自己做个专属的DNS转发服务器，扶墙最简单的方式莫过于此，从根本省却了SS这么复杂的方式。\n最后是价格低，每个人都能买到，这就是足够的理由了，虽然还有部分BUG，相信作者也会尽快修复的，多给人鼓励包容，让这类工具多出现总是好的。\n\n<!-- more -->\n## 1、准备工作\n* 1、首先你得有一台iPhone, 并且系统一定要在iOS9以上。\n* 2、然后你要安装有 Shadowrocket 这款APP。\n - ①.去AppStore购买: 6元\n - ②.用第三方助手下载: 0元\n* 3、然后你还得有一个SS帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n\n## 2、添加规则文件\n### 方法1：\n* 进入``Settings``=>``Config``=>``右上角+``，\n* 在地址栏输入``http://joe-10005639.file.myqcloud.com/fuck_gfw_sr.conf``\n* 然后点击``Local files``，选择``Use Config``，也就是选定配置文件。\n\n### 方法2：\n* 进入``Settings``=>``Config``=>``Scan QR code``，扫描以下二维码：\n\n![](http://i1.piimg.com/567571/ba5763a9ced7428f.png)\n\n* 然后点击``Remote files``，选择``Use Config``，也就是选定配置文件。\n\n## 3、填写SS信息\n* 回到主界面，从``Choose A Configuration``里面配置SS信息，如图：\n\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl64sutk5j1tpk1dda5068fea.png)\n\n## 4、启动软件\n* 点击连接，出现``VPN``标志表示工作正常。\n\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl67481r3c1ch32jo1dtb1mga.png)","source":"_posts/sr-ss.md","raw":"---\ntitle: Shadowrocket科学上网使用教程\ndate: 2016-09-02 14:00:43\ntags: [fuck-gfw,ss,Shadowsocks]\n---\n它与Surge的区别不在于代理形式，而是操作界面及自定义部分，配置文件适配Surge的可以快速扩大使用人群及降低使用成本，而且可以对Proxy和DNS部分做单独区别，并且可以强制本机的DNS，我们知道在iOS使用移动网络下是无法自定义DNS的，在运营商DNS已经干扰得不成样的情况下，如果借助外部DNS还是会对网络体验有很大提升。\n其次，我们可以指定DNS做转发，有条件的人可以自己做个专属的DNS转发服务器，扶墙最简单的方式莫过于此，从根本省却了SS这么复杂的方式。\n最后是价格低，每个人都能买到，这就是足够的理由了，虽然还有部分BUG，相信作者也会尽快修复的，多给人鼓励包容，让这类工具多出现总是好的。\n\n<!-- more -->\n## 1、准备工作\n* 1、首先你得有一台iPhone, 并且系统一定要在iOS9以上。\n* 2、然后你要安装有 Shadowrocket 这款APP。\n - ①.去AppStore购买: 6元\n - ②.用第三方助手下载: 0元\n* 3、然后你还得有一个SS帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n\n## 2、添加规则文件\n### 方法1：\n* 进入``Settings``=>``Config``=>``右上角+``，\n* 在地址栏输入``http://joe-10005639.file.myqcloud.com/fuck_gfw_sr.conf``\n* 然后点击``Local files``，选择``Use Config``，也就是选定配置文件。\n\n### 方法2：\n* 进入``Settings``=>``Config``=>``Scan QR code``，扫描以下二维码：\n\n![](http://i1.piimg.com/567571/ba5763a9ced7428f.png)\n\n* 然后点击``Remote files``，选择``Use Config``，也就是选定配置文件。\n\n## 3、填写SS信息\n* 回到主界面，从``Choose A Configuration``里面配置SS信息，如图：\n\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl64sutk5j1tpk1dda5068fea.png)\n\n## 4、启动软件\n* 点击连接，出现``VPN``标志表示工作正常。\n\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl67481r3c1ch32jo1dtb1mga.png)","slug":"sr-ss","published":1,"updated":"2016-09-28T06:18:39.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7w7000l0wtu2zl7uzim","content":"<p>它与Surge的区别不在于代理形式，而是操作界面及自定义部分，配置文件适配Surge的可以快速扩大使用人群及降低使用成本，而且可以对Proxy和DNS部分做单独区别，并且可以强制本机的DNS，我们知道在iOS使用移动网络下是无法自定义DNS的，在运营商DNS已经干扰得不成样的情况下，如果借助外部DNS还是会对网络体验有很大提升。<br>其次，我们可以指定DNS做转发，有条件的人可以自己做个专属的DNS转发服务器，扶墙最简单的方式莫过于此，从根本省却了SS这么复杂的方式。<br>最后是价格低，每个人都能买到，这就是足够的理由了，虽然还有部分BUG，相信作者也会尽快修复的，多给人鼓励包容，让这类工具多出现总是好的。</p>\n<a id=\"more\"></a>\n<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>1、首先你得有一台iPhone, 并且系统一定要在iOS9以上。</li>\n<li>2、然后你要安装有 Shadowrocket 这款APP。<ul>\n<li>①.去AppStore购买: 6元</li>\n<li>②.用第三方助手下载: 0元</li>\n</ul>\n</li>\n<li>3、然后你还得有一个SS帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n</ul>\n<h2 id=\"2、添加规则文件\"><a href=\"#2、添加规则文件\" class=\"headerlink\" title=\"2、添加规则文件\"></a>2、添加规则文件</h2><h3 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h3><ul>\n<li>进入<code>Settings</code>=&gt;<code>Config</code>=&gt;<code>右上角+</code>，</li>\n<li>在地址栏输入<code>http://joe-10005639.file.myqcloud.com/fuck_gfw_sr.conf</code></li>\n<li>然后点击<code>Local files</code>，选择<code>Use Config</code>，也就是选定配置文件。</li>\n</ul>\n<h3 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a>方法2：</h3><ul>\n<li>进入<code>Settings</code>=&gt;<code>Config</code>=&gt;<code>Scan QR code</code>，扫描以下二维码：</li>\n</ul>\n<p><img src=\"http://i1.piimg.com/567571/ba5763a9ced7428f.png\" alt=\"\"></p>\n<ul>\n<li>然后点击<code>Remote files</code>，选择<code>Use Config</code>，也就是选定配置文件。</li>\n</ul>\n<h2 id=\"3、填写SS信息\"><a href=\"#3、填写SS信息\" class=\"headerlink\" title=\"3、填写SS信息\"></a>3、填写SS信息</h2><ul>\n<li>回到主界面，从<code>Choose A Configuration</code>里面配置SS信息，如图：</li>\n</ul>\n<p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl64sutk5j1tpk1dda5068fea.png\" alt=\"\"></p>\n<h2 id=\"4、启动软件\"><a href=\"#4、启动软件\" class=\"headerlink\" title=\"4、启动软件\"></a>4、启动软件</h2><ul>\n<li>点击连接，出现<code>VPN</code>标志表示工作正常。</li>\n</ul>\n<p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl67481r3c1ch32jo1dtb1mga.png\" alt=\"\"></p>\n","excerpt":"<p>它与Surge的区别不在于代理形式，而是操作界面及自定义部分，配置文件适配Surge的可以快速扩大使用人群及降低使用成本，而且可以对Proxy和DNS部分做单独区别，并且可以强制本机的DNS，我们知道在iOS使用移动网络下是无法自定义DNS的，在运营商DNS已经干扰得不成样的情况下，如果借助外部DNS还是会对网络体验有很大提升。<br>其次，我们可以指定DNS做转发，有条件的人可以自己做个专属的DNS转发服务器，扶墙最简单的方式莫过于此，从根本省却了SS这么复杂的方式。<br>最后是价格低，每个人都能买到，这就是足够的理由了，虽然还有部分BUG，相信作者也会尽快修复的，多给人鼓励包容，让这类工具多出现总是好的。</p>","more":"<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>1、首先你得有一台iPhone, 并且系统一定要在iOS9以上。</li>\n<li>2、然后你要安装有 Shadowrocket 这款APP。<ul>\n<li>①.去AppStore购买: 6元</li>\n<li>②.用第三方助手下载: 0元</li>\n</ul>\n</li>\n<li>3、然后你还得有一个SS帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n</ul>\n<h2 id=\"2、添加规则文件\"><a href=\"#2、添加规则文件\" class=\"headerlink\" title=\"2、添加规则文件\"></a>2、添加规则文件</h2><h3 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h3><ul>\n<li>进入<code>Settings</code>=&gt;<code>Config</code>=&gt;<code>右上角+</code>，</li>\n<li>在地址栏输入<code>http://joe-10005639.file.myqcloud.com/fuck_gfw_sr.conf</code></li>\n<li>然后点击<code>Local files</code>，选择<code>Use Config</code>，也就是选定配置文件。</li>\n</ul>\n<h3 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a>方法2：</h3><ul>\n<li>进入<code>Settings</code>=&gt;<code>Config</code>=&gt;<code>Scan QR code</code>，扫描以下二维码：</li>\n</ul>\n<p><img src=\"http://i1.piimg.com/567571/ba5763a9ced7428f.png\" alt=\"\"></p>\n<ul>\n<li>然后点击<code>Remote files</code>，选择<code>Use Config</code>，也就是选定配置文件。</li>\n</ul>\n<h2 id=\"3、填写SS信息\"><a href=\"#3、填写SS信息\" class=\"headerlink\" title=\"3、填写SS信息\"></a>3、填写SS信息</h2><ul>\n<li>回到主界面，从<code>Choose A Configuration</code>里面配置SS信息，如图：</li>\n</ul>\n<p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl64sutk5j1tpk1dda5068fea.png\" alt=\"\"></p>\n<h2 id=\"4、启动软件\"><a href=\"#4、启动软件\" class=\"headerlink\" title=\"4、启动软件\"></a>4、启动软件</h2><ul>\n<li>点击连接，出现<code>VPN</code>标志表示工作正常。</li>\n</ul>\n<p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl67481r3c1ch32jo1dtb1mga.png\" alt=\"\"></p>"},{"title":"Surge搭配Shadowsocks科学上网教程","date":"2016-09-02T07:14:59.000Z","_content":"\n## 1、准备工作\n* 1、首先你得有一台iPhone, 并且系统一定要在`iOS9`以上。\n* 2、然后你要安装有`Surge`这款App。\n\t- ①.去AppStore购买: 328元。\n\t- ②.用第三方助手下载: 0元\n* 3、然后你还得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n* 4、本教程适用于`1.20 Build 511及以上版本`，低版请尽快升级。\n<!-- more -->\n\n## 2、添加Surge规则文件\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cqtsg1lg3n95j2lj1j1865a.jpg)\n备用规则文件地址：``http://joe-10005639.file.myqcloud.com/fuck_gfw.conf``\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag8505tj1bojblffp91bj7bvma.jpg)\n\n## 3、配置Shadowsocks帐号\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cv5pqobn7s9g191ongejra.jpg)\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl6v9he127v1dp1m8222811n9a.jpg)\n\n## 4、启动Surge\n#### 第一次运行，会出现下面的提示:\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114258hjbbk66gfzbbabdb.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114300r1cmzn22vruscavg.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114302kpvpumupvpkzmkvr.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114300cpeeorhjkoliovss.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114302o6bw6vbsyio336vi.jpg)\n#### 点击`Start`之后，出现`VPN`标志后表示成功。\n\n## 5、常见问题\nQ：主要作用？\n`A：科学上网、加速苹果商城，屏蔽优酷、土豆、乐视等广告。`\nQ：速度会慢吗？\n`A：不会，和你平时用Shadowsocks完全一样。`\nQ：能添加多条线路吗？\n`A：你可以自行修改[Proxy]和[Proxy Group]。`\nQ：会耗电吗？\n`A：自己使用过程中，没有任何耗电的感觉，也不会发热。`\nnQ：使用微信什么的，要断开吗？\n`A：完全不需要，因为微信、QQ什么的统统都不走代理。`\nQ：锁屏会断开吗？\n`A：不会。`\nQ：代理了所有的网络，那么用这个软件安全吗？\n`A：只能表示本人倾向于信任它。Surge本身就是一款网络调试工具，高级一点的玩法可以通过Surge来分析其他APP的网络活动。`\nQ：怎么样快速开启和停止？\n`A：Surge提供了通知中心Widget，在Widget里面调出来，很方便的进行开启和停止。`\nQ：上面显示VPN图标了，怎么还是打开不了谷歌？\n`A：显示VPN图标，只能说明Surge接管了你的网络，但是不代表你的SS账号和服务器是正常的，建议检查SS的设置。`","source":"_posts/surge-ss.md","raw":"---\ntitle: Surge搭配Shadowsocks科学上网教程\ndate: 2016-09-02 15:14:59\ntags: [surge,ss,Shadowsocks,fuck-gfw]\n---\n\n## 1、准备工作\n* 1、首先你得有一台iPhone, 并且系统一定要在`iOS9`以上。\n* 2、然后你要安装有`Surge`这款App。\n\t- ①.去AppStore购买: 328元。\n\t- ②.用第三方助手下载: 0元\n* 3、然后你还得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。\n* 4、本教程适用于`1.20 Build 511及以上版本`，低版请尽快升级。\n<!-- more -->\n\n## 2、添加Surge规则文件\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cqtsg1lg3n95j2lj1j1865a.jpg)\n备用规则文件地址：``http://joe-10005639.file.myqcloud.com/fuck_gfw.conf``\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag8505tj1bojblffp91bj7bvma.jpg)\n\n## 3、配置Shadowsocks帐号\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cv5pqobn7s9g191ongejra.jpg)\n![](http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl6v9he127v1dp1m8222811n9a.jpg)\n\n## 4、启动Surge\n#### 第一次运行，会出现下面的提示:\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114258hjbbk66gfzbbabdb.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114300r1cmzn22vruscavg.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114302kpvpumupvpkzmkvr.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114300cpeeorhjkoliovss.jpg)\n![](http://images.weiphone.net/data/attachment/forum/201511/22/114302o6bw6vbsyio336vi.jpg)\n#### 点击`Start`之后，出现`VPN`标志后表示成功。\n\n## 5、常见问题\nQ：主要作用？\n`A：科学上网、加速苹果商城，屏蔽优酷、土豆、乐视等广告。`\nQ：速度会慢吗？\n`A：不会，和你平时用Shadowsocks完全一样。`\nQ：能添加多条线路吗？\n`A：你可以自行修改[Proxy]和[Proxy Group]。`\nQ：会耗电吗？\n`A：自己使用过程中，没有任何耗电的感觉，也不会发热。`\nnQ：使用微信什么的，要断开吗？\n`A：完全不需要，因为微信、QQ什么的统统都不走代理。`\nQ：锁屏会断开吗？\n`A：不会。`\nQ：代理了所有的网络，那么用这个软件安全吗？\n`A：只能表示本人倾向于信任它。Surge本身就是一款网络调试工具，高级一点的玩法可以通过Surge来分析其他APP的网络活动。`\nQ：怎么样快速开启和停止？\n`A：Surge提供了通知中心Widget，在Widget里面调出来，很方便的进行开启和停止。`\nQ：上面显示VPN图标了，怎么还是打开不了谷歌？\n`A：显示VPN图标，只能说明Surge接管了你的网络，但是不代表你的SS账号和服务器是正常的，建议检查SS的设置。`","slug":"surge-ss","published":1,"updated":"2016-09-28T06:22:57.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuhtu7w9000n0wtuovqwtb3c","content":"<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>1、首先你得有一台iPhone, 并且系统一定要在<code>iOS9</code>以上。</li>\n<li>2、然后你要安装有<code>Surge</code>这款App。<ul>\n<li>①.去AppStore购买: 328元。</li>\n<li>②.用第三方助手下载: 0元</li>\n</ul>\n</li>\n<li>3、然后你还得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n<li>4、本教程适用于<code>1.20 Build 511及以上版本</code>，低版请尽快升级。<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"2、添加Surge规则文件\"><a href=\"#2、添加Surge规则文件\" class=\"headerlink\" title=\"2、添加Surge规则文件\"></a>2、添加Surge规则文件</h2><p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cqtsg1lg3n95j2lj1j1865a.jpg\" alt=\"\"><br>备用规则文件地址：<code>http://joe-10005639.file.myqcloud.com/fuck_gfw.conf</code><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag8505tj1bojblffp91bj7bvma.jpg\" alt=\"\"></p>\n<h2 id=\"3、配置Shadowsocks帐号\"><a href=\"#3、配置Shadowsocks帐号\" class=\"headerlink\" title=\"3、配置Shadowsocks帐号\"></a>3、配置Shadowsocks帐号</h2><p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cv5pqobn7s9g191ongejra.jpg\" alt=\"\"><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl6v9he127v1dp1m8222811n9a.jpg\" alt=\"\"></p>\n<h2 id=\"4、启动Surge\"><a href=\"#4、启动Surge\" class=\"headerlink\" title=\"4、启动Surge\"></a>4、启动Surge</h2><h4 id=\"第一次运行，会出现下面的提示\"><a href=\"#第一次运行，会出现下面的提示\" class=\"headerlink\" title=\"第一次运行，会出现下面的提示:\"></a>第一次运行，会出现下面的提示:</h4><p><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114258hjbbk66gfzbbabdb.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114300r1cmzn22vruscavg.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114302kpvpumupvpkzmkvr.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114300cpeeorhjkoliovss.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114302o6bw6vbsyio336vi.jpg\" alt=\"\"></p>\n<h4 id=\"点击Start之后，出现VPN标志后表示成功。\"><a href=\"#点击Start之后，出现VPN标志后表示成功。\" class=\"headerlink\" title=\"点击Start之后，出现VPN标志后表示成功。\"></a>点击<code>Start</code>之后，出现<code>VPN</code>标志后表示成功。</h4><h2 id=\"5、常见问题\"><a href=\"#5、常见问题\" class=\"headerlink\" title=\"5、常见问题\"></a>5、常见问题</h2><p>Q：主要作用？<br><code>A：科学上网、加速苹果商城，屏蔽优酷、土豆、乐视等广告。</code><br>Q：速度会慢吗？<br><code>A：不会，和你平时用Shadowsocks完全一样。</code><br>Q：能添加多条线路吗？<br><code>A：你可以自行修改[Proxy]和[Proxy Group]。</code><br>Q：会耗电吗？<br><code>A：自己使用过程中，没有任何耗电的感觉，也不会发热。</code><br>nQ：使用微信什么的，要断开吗？<br><code>A：完全不需要，因为微信、QQ什么的统统都不走代理。</code><br>Q：锁屏会断开吗？<br><code>A：不会。</code><br>Q：代理了所有的网络，那么用这个软件安全吗？<br><code>A：只能表示本人倾向于信任它。Surge本身就是一款网络调试工具，高级一点的玩法可以通过Surge来分析其他APP的网络活动。</code><br>Q：怎么样快速开启和停止？<br><code>A：Surge提供了通知中心Widget，在Widget里面调出来，很方便的进行开启和停止。</code><br>Q：上面显示VPN图标了，怎么还是打开不了谷歌？<br><code>A：显示VPN图标，只能说明Surge接管了你的网络，但是不代表你的SS账号和服务器是正常的，建议检查SS的设置。</code></p>\n","excerpt":"<h2 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h2><ul>\n<li>1、首先你得有一台iPhone, 并且系统一定要在<code>iOS9</code>以上。</li>\n<li>2、然后你要安装有<code>Surge</code>这款App。<ul>\n<li>①.去AppStore购买: 328元。</li>\n<li>②.用第三方助手下载: 0元</li>\n</ul>\n</li>\n<li>3、然后你还得有一个Shadowsocks帐号，可以自己在服务器上搭建，也可以购买，我这里不提供、也不出售。</li>\n<li>4、本教程适用于<code>1.20 Build 511及以上版本</code>，低版请尽快升级。","more":"</li>\n</ul>\n<h2 id=\"2、添加Surge规则文件\"><a href=\"#2、添加Surge规则文件\" class=\"headerlink\" title=\"2、添加Surge规则文件\"></a>2、添加Surge规则文件</h2><p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cqtsg1lg3n95j2lj1j1865a.jpg\" alt=\"\"><br>备用规则文件地址：<code>http://joe-10005639.file.myqcloud.com/fuck_gfw.conf</code><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag8505tj1bojblffp91bj7bvma.jpg\" alt=\"\"></p>\n<h2 id=\"3、配置Shadowsocks帐号\"><a href=\"#3、配置Shadowsocks帐号\" class=\"headerlink\" title=\"3、配置Shadowsocks帐号\"></a>3、配置Shadowsocks帐号</h2><p><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ag5cv5pqobn7s9g191ongejra.jpg\" alt=\"\"><br><img src=\"http://7xoatu.com1.z0.glb.clouddn.com/o_1ahl6v9he127v1dp1m8222811n9a.jpg\" alt=\"\"></p>\n<h2 id=\"4、启动Surge\"><a href=\"#4、启动Surge\" class=\"headerlink\" title=\"4、启动Surge\"></a>4、启动Surge</h2><h4 id=\"第一次运行，会出现下面的提示\"><a href=\"#第一次运行，会出现下面的提示\" class=\"headerlink\" title=\"第一次运行，会出现下面的提示:\"></a>第一次运行，会出现下面的提示:</h4><p><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114258hjbbk66gfzbbabdb.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114300r1cmzn22vruscavg.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114302kpvpumupvpkzmkvr.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114300cpeeorhjkoliovss.jpg\" alt=\"\"><br><img src=\"http://images.weiphone.net/data/attachment/forum/201511/22/114302o6bw6vbsyio336vi.jpg\" alt=\"\"></p>\n<h4 id=\"点击Start之后，出现VPN标志后表示成功。\"><a href=\"#点击Start之后，出现VPN标志后表示成功。\" class=\"headerlink\" title=\"点击Start之后，出现VPN标志后表示成功。\"></a>点击<code>Start</code>之后，出现<code>VPN</code>标志后表示成功。</h4><h2 id=\"5、常见问题\"><a href=\"#5、常见问题\" class=\"headerlink\" title=\"5、常见问题\"></a>5、常见问题</h2><p>Q：主要作用？<br><code>A：科学上网、加速苹果商城，屏蔽优酷、土豆、乐视等广告。</code><br>Q：速度会慢吗？<br><code>A：不会，和你平时用Shadowsocks完全一样。</code><br>Q：能添加多条线路吗？<br><code>A：你可以自行修改[Proxy]和[Proxy Group]。</code><br>Q：会耗电吗？<br><code>A：自己使用过程中，没有任何耗电的感觉，也不会发热。</code><br>nQ：使用微信什么的，要断开吗？<br><code>A：完全不需要，因为微信、QQ什么的统统都不走代理。</code><br>Q：锁屏会断开吗？<br><code>A：不会。</code><br>Q：代理了所有的网络，那么用这个软件安全吗？<br><code>A：只能表示本人倾向于信任它。Surge本身就是一款网络调试工具，高级一点的玩法可以通过Surge来分析其他APP的网络活动。</code><br>Q：怎么样快速开启和停止？<br><code>A：Surge提供了通知中心Widget，在Widget里面调出来，很方便的进行开启和停止。</code><br>Q：上面显示VPN图标了，怎么还是打开不了谷歌？<br><code>A：显示VPN图标，只能说明Surge接管了你的网络，但是不代表你的SS账号和服务器是正常的，建议检查SS的设置。</code></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciuhtu7us00000wtusk755nbp","tag_id":"ciuhtu7v400030wtugdjhimk0","_id":"ciuhtu7vt000c0wtu5aobu6pj"},{"post_id":"ciuhtu7us00000wtusk755nbp","tag_id":"ciuhtu7vj00070wtu2ma9mbik","_id":"ciuhtu7vy000e0wtubub3xpet"},{"post_id":"ciuhtu7uz00020wtungy84mco","tag_id":"ciuhtu7vr000a0wtukbq4m1z8","_id":"ciuhtu7w2000h0wtu5x62hxxq"},{"post_id":"ciuhtu7v700040wtur9iuz15v","tag_id":"ciuhtu7vr000a0wtukbq4m1z8","_id":"ciuhtu7wd000o0wtuga7ohilw"},{"post_id":"ciuhtu7v700040wtur9iuz15v","tag_id":"ciuhtu7w5000j0wtufbe0stvh","_id":"ciuhtu7we000p0wtu0t0hq8s7"},{"post_id":"ciuhtu7vb00050wtugcew2gdv","tag_id":"ciuhtu7vr000a0wtukbq4m1z8","_id":"ciuhtu7wf000s0wtu5n27x9b5"},{"post_id":"ciuhtu7vb00050wtugcew2gdv","tag_id":"ciuhtu7we000q0wtuo67zofk0","_id":"ciuhtu7wg000t0wtuxtccucbp"},{"post_id":"ciuhtu7vg00060wtum95jilru","tag_id":"ciuhtu7vr000a0wtukbq4m1z8","_id":"ciuhtu7wg000w0wtuo8bvsy7t"},{"post_id":"ciuhtu7vg00060wtum95jilru","tag_id":"ciuhtu7wg000u0wtukaw58qss","_id":"ciuhtu7wh000x0wtuchiovrfl"},{"post_id":"ciuhtu7vk00080wtuj5fqjdxd","tag_id":"ciuhtu7vr000a0wtukbq4m1z8","_id":"ciuhtu7wi00100wturqbhio39"},{"post_id":"ciuhtu7vk00080wtuj5fqjdxd","tag_id":"ciuhtu7wh000y0wtukq5rn5o9","_id":"ciuhtu7wi00110wtuawwn5a4o"},{"post_id":"ciuhtu7vp00090wtujemd6475","tag_id":"ciuhtu7wh000z0wtu7zzieyqc","_id":"ciuhtu7wj00150wtukki8wr1t"},{"post_id":"ciuhtu7vp00090wtujemd6475","tag_id":"ciuhtu7wi00120wtu1qm622j9","_id":"ciuhtu7wk00160wtu4dac8wva"},{"post_id":"ciuhtu7vp00090wtujemd6475","tag_id":"ciuhtu7wj00130wtuxbacf907","_id":"ciuhtu7wk00180wtuhjhc88xk"},{"post_id":"ciuhtu7vs000b0wtusb08mahd","tag_id":"ciuhtu7wj00140wtu0v6lp6bq","_id":"ciuhtu7wl001c0wtuz01fnzbr"},{"post_id":"ciuhtu7vs000b0wtusb08mahd","tag_id":"ciuhtu7wk00170wtusfrztkxd","_id":"ciuhtu7wl001d0wtuqa8p7gh6"},{"post_id":"ciuhtu7vs000b0wtusb08mahd","tag_id":"ciuhtu7wk00190wtu00e2ag5q","_id":"ciuhtu7wm001f0wtuacx2zv4y"},{"post_id":"ciuhtu7vs000b0wtusb08mahd","tag_id":"ciuhtu7wl001a0wtuzb84cxyd","_id":"ciuhtu7wm001g0wtuef7sfz5m"},{"post_id":"ciuhtu7vw000d0wtu7o5ty79o","tag_id":"ciuhtu7wi00120wtu1qm622j9","_id":"ciuhtu7wo001i0wtuf0agkox4"},{"post_id":"ciuhtu7vw000d0wtu7o5ty79o","tag_id":"ciuhtu7wj00130wtuxbacf907","_id":"ciuhtu7wo001j0wtughmkl7n4"},{"post_id":"ciuhtu7w0000g0wtuske73275","tag_id":"ciuhtu7wj00130wtuxbacf907","_id":"ciuhtu7wv001n0wtuavd7ltup"},{"post_id":"ciuhtu7w0000g0wtuske73275","tag_id":"ciuhtu7wi00120wtu1qm622j9","_id":"ciuhtu7ww001o0wtun37iua3k"},{"post_id":"ciuhtu7w0000g0wtuske73275","tag_id":"ciuhtu7wt001l0wtu2gih76y7","_id":"ciuhtu7wx001q0wtuktwefpah"},{"post_id":"ciuhtu7w3000i0wtu5ov12a71","tag_id":"ciuhtu7wj00130wtuxbacf907","_id":"ciuhtu7wy001s0wtuahrkbr91"},{"post_id":"ciuhtu7w3000i0wtu5ov12a71","tag_id":"ciuhtu7wi00120wtu1qm622j9","_id":"ciuhtu7wy001t0wtu41b0d7g9"},{"post_id":"ciuhtu7w6000k0wtu10pwu2wb","tag_id":"ciuhtu7wi00120wtu1qm622j9","_id":"ciuhtu7x1001x0wtugpms4bto"},{"post_id":"ciuhtu7w6000k0wtu10pwu2wb","tag_id":"ciuhtu7wz001u0wtuda44kv8m","_id":"ciuhtu7x2001y0wturlapk2za"},{"post_id":"ciuhtu7w6000k0wtu10pwu2wb","tag_id":"ciuhtu7wl001a0wtuzb84cxyd","_id":"ciuhtu7x500200wtuat0l2src"},{"post_id":"ciuhtu7w7000l0wtu2zl7uzim","tag_id":"ciuhtu7wl001a0wtuzb84cxyd","_id":"ciuhtu7x700230wtubv7zla9q"},{"post_id":"ciuhtu7w7000l0wtu2zl7uzim","tag_id":"ciuhtu7wk00170wtusfrztkxd","_id":"ciuhtu7x800240wtua8a6naxf"},{"post_id":"ciuhtu7w7000l0wtu2zl7uzim","tag_id":"ciuhtu7wk00190wtu00e2ag5q","_id":"ciuhtu7x900260wtutsi2rmmr"},{"post_id":"ciuhtu7w9000n0wtuovqwtb3c","tag_id":"ciuhtu7x700220wtum4f5y5lk","_id":"ciuhtu7xb00290wtuu84t390j"},{"post_id":"ciuhtu7w9000n0wtuovqwtb3c","tag_id":"ciuhtu7wk00170wtusfrztkxd","_id":"ciuhtu7xc002a0wtu3bg8q3yx"},{"post_id":"ciuhtu7w9000n0wtuovqwtb3c","tag_id":"ciuhtu7wk00190wtu00e2ag5q","_id":"ciuhtu7xc002b0wtuu5dgxtfg"},{"post_id":"ciuhtu7w9000n0wtuovqwtb3c","tag_id":"ciuhtu7wl001a0wtuzb84cxyd","_id":"ciuhtu7xc002c0wtux3qhkl8i"}],"Tag":[{"name":"Bootstrap","_id":"ciuhtu7v400030wtugdjhimk0"},{"name":"grid","_id":"ciuhtu7vj00070wtu2ma9mbik"},{"name":"gulp","_id":"ciuhtu7vr000a0wtukbq4m1z8"},{"name":"css","_id":"ciuhtu7w5000j0wtufbe0stvh"},{"name":"js","_id":"ciuhtu7we000q0wtuo67zofk0"},{"name":"less","_id":"ciuhtu7wg000u0wtukaw58qss"},{"name":"sass","_id":"ciuhtu7wh000y0wtukq5rn5o9"},{"name":"browser-sync","_id":"ciuhtu7wh000z0wtu7zzieyqc"},{"name":"nodejs","_id":"ciuhtu7wi00120wtu1qm622j9"},{"name":"node.js","_id":"ciuhtu7wj00130wtuxbacf907"},{"name":"hiwifi","_id":"ciuhtu7wj00140wtu0v6lp6bq"},{"name":"ss","_id":"ciuhtu7wk00170wtusfrztkxd"},{"name":"Shadowsocks","_id":"ciuhtu7wk00190wtu00e2ag5q"},{"name":"fuck-gfw","_id":"ciuhtu7wl001a0wtuzb84cxyd"},{"name":"mysql","_id":"ciuhtu7wt001l0wtu2gih76y7"},{"name":"hosts","_id":"ciuhtu7wz001u0wtuda44kv8m"},{"name":"surge","_id":"ciuhtu7x700220wtum4f5y5lk"}]}}